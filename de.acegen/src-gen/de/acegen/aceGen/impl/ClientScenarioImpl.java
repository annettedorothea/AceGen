/**
 * generated by Xtext 2.23.0
 */
package de.acegen.aceGen.impl;

import de.acegen.aceGen.AceGenPackage;
import de.acegen.aceGen.ClientScenario;
import de.acegen.aceGen.ClientThenBlock;
import de.acegen.aceGen.ClientWhenBlock;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectResolvingEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Client Scenario</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link de.acegen.aceGen.impl.ClientScenarioImpl#getName <em>Name</em>}</li>
 *   <li>{@link de.acegen.aceGen.impl.ClientScenarioImpl#getGivenRefs <em>Given Refs</em>}</li>
 *   <li>{@link de.acegen.aceGen.impl.ClientScenarioImpl#getWhenBlock <em>When Block</em>}</li>
 *   <li>{@link de.acegen.aceGen.impl.ClientScenarioImpl#getThenBlock <em>Then Block</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ClientScenarioImpl extends MinimalEObjectImpl.Container implements ClientScenario
{
  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getGivenRefs() <em>Given Refs</em>}' reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getGivenRefs()
   * @generated
   * @ordered
   */
  protected EList<ClientScenario> givenRefs;

  /**
   * The cached value of the '{@link #getWhenBlock() <em>When Block</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getWhenBlock()
   * @generated
   * @ordered
   */
  protected ClientWhenBlock whenBlock;

  /**
   * The cached value of the '{@link #getThenBlock() <em>Then Block</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getThenBlock()
   * @generated
   * @ordered
   */
  protected ClientThenBlock thenBlock;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ClientScenarioImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return AceGenPackage.Literals.CLIENT_SCENARIO;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AceGenPackage.CLIENT_SCENARIO__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<ClientScenario> getGivenRefs()
  {
    if (givenRefs == null)
    {
      givenRefs = new EObjectResolvingEList<ClientScenario>(ClientScenario.class, this, AceGenPackage.CLIENT_SCENARIO__GIVEN_REFS);
    }
    return givenRefs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ClientWhenBlock getWhenBlock()
  {
    return whenBlock;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetWhenBlock(ClientWhenBlock newWhenBlock, NotificationChain msgs)
  {
    ClientWhenBlock oldWhenBlock = whenBlock;
    whenBlock = newWhenBlock;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, AceGenPackage.CLIENT_SCENARIO__WHEN_BLOCK, oldWhenBlock, newWhenBlock);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setWhenBlock(ClientWhenBlock newWhenBlock)
  {
    if (newWhenBlock != whenBlock)
    {
      NotificationChain msgs = null;
      if (whenBlock != null)
        msgs = ((InternalEObject)whenBlock).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - AceGenPackage.CLIENT_SCENARIO__WHEN_BLOCK, null, msgs);
      if (newWhenBlock != null)
        msgs = ((InternalEObject)newWhenBlock).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - AceGenPackage.CLIENT_SCENARIO__WHEN_BLOCK, null, msgs);
      msgs = basicSetWhenBlock(newWhenBlock, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AceGenPackage.CLIENT_SCENARIO__WHEN_BLOCK, newWhenBlock, newWhenBlock));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ClientThenBlock getThenBlock()
  {
    return thenBlock;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetThenBlock(ClientThenBlock newThenBlock, NotificationChain msgs)
  {
    ClientThenBlock oldThenBlock = thenBlock;
    thenBlock = newThenBlock;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, AceGenPackage.CLIENT_SCENARIO__THEN_BLOCK, oldThenBlock, newThenBlock);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setThenBlock(ClientThenBlock newThenBlock)
  {
    if (newThenBlock != thenBlock)
    {
      NotificationChain msgs = null;
      if (thenBlock != null)
        msgs = ((InternalEObject)thenBlock).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - AceGenPackage.CLIENT_SCENARIO__THEN_BLOCK, null, msgs);
      if (newThenBlock != null)
        msgs = ((InternalEObject)newThenBlock).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - AceGenPackage.CLIENT_SCENARIO__THEN_BLOCK, null, msgs);
      msgs = basicSetThenBlock(newThenBlock, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AceGenPackage.CLIENT_SCENARIO__THEN_BLOCK, newThenBlock, newThenBlock));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case AceGenPackage.CLIENT_SCENARIO__WHEN_BLOCK:
        return basicSetWhenBlock(null, msgs);
      case AceGenPackage.CLIENT_SCENARIO__THEN_BLOCK:
        return basicSetThenBlock(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case AceGenPackage.CLIENT_SCENARIO__NAME:
        return getName();
      case AceGenPackage.CLIENT_SCENARIO__GIVEN_REFS:
        return getGivenRefs();
      case AceGenPackage.CLIENT_SCENARIO__WHEN_BLOCK:
        return getWhenBlock();
      case AceGenPackage.CLIENT_SCENARIO__THEN_BLOCK:
        return getThenBlock();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case AceGenPackage.CLIENT_SCENARIO__NAME:
        setName((String)newValue);
        return;
      case AceGenPackage.CLIENT_SCENARIO__GIVEN_REFS:
        getGivenRefs().clear();
        getGivenRefs().addAll((Collection<? extends ClientScenario>)newValue);
        return;
      case AceGenPackage.CLIENT_SCENARIO__WHEN_BLOCK:
        setWhenBlock((ClientWhenBlock)newValue);
        return;
      case AceGenPackage.CLIENT_SCENARIO__THEN_BLOCK:
        setThenBlock((ClientThenBlock)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case AceGenPackage.CLIENT_SCENARIO__NAME:
        setName(NAME_EDEFAULT);
        return;
      case AceGenPackage.CLIENT_SCENARIO__GIVEN_REFS:
        getGivenRefs().clear();
        return;
      case AceGenPackage.CLIENT_SCENARIO__WHEN_BLOCK:
        setWhenBlock((ClientWhenBlock)null);
        return;
      case AceGenPackage.CLIENT_SCENARIO__THEN_BLOCK:
        setThenBlock((ClientThenBlock)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case AceGenPackage.CLIENT_SCENARIO__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case AceGenPackage.CLIENT_SCENARIO__GIVEN_REFS:
        return givenRefs != null && !givenRefs.isEmpty();
      case AceGenPackage.CLIENT_SCENARIO__WHEN_BLOCK:
        return whenBlock != null;
      case AceGenPackage.CLIENT_SCENARIO__THEN_BLOCK:
        return thenBlock != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(')');
    return result.toString();
  }

} //ClientScenarioImpl
