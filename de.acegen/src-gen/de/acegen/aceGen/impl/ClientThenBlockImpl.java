/**
 * generated by Xtext 2.22.0
 */
package de.acegen.aceGen.impl;

import de.acegen.aceGen.AceGenPackage;
import de.acegen.aceGen.ClientThenBlock;
import de.acegen.aceGen.ServerCall;
import de.acegen.aceGen.StateVerification;
import de.acegen.aceGen.TriggeredAction;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Client Then Block</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link de.acegen.aceGen.impl.ClientThenBlockImpl#getServerCall <em>Server Call</em>}</li>
 *   <li>{@link de.acegen.aceGen.impl.ClientThenBlockImpl#getStateVerifications <em>State Verifications</em>}</li>
 *   <li>{@link de.acegen.aceGen.impl.ClientThenBlockImpl#getTriggeredAction <em>Triggered Action</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ClientThenBlockImpl extends MinimalEObjectImpl.Container implements ClientThenBlock
{
  /**
   * The cached value of the '{@link #getServerCall() <em>Server Call</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getServerCall()
   * @generated
   * @ordered
   */
  protected ServerCall serverCall;

  /**
   * The cached value of the '{@link #getStateVerifications() <em>State Verifications</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getStateVerifications()
   * @generated
   * @ordered
   */
  protected EList<StateVerification> stateVerifications;

  /**
   * The cached value of the '{@link #getTriggeredAction() <em>Triggered Action</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTriggeredAction()
   * @generated
   * @ordered
   */
  protected EList<TriggeredAction> triggeredAction;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ClientThenBlockImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return AceGenPackage.Literals.CLIENT_THEN_BLOCK;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ServerCall getServerCall()
  {
    return serverCall;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetServerCall(ServerCall newServerCall, NotificationChain msgs)
  {
    ServerCall oldServerCall = serverCall;
    serverCall = newServerCall;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, AceGenPackage.CLIENT_THEN_BLOCK__SERVER_CALL, oldServerCall, newServerCall);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setServerCall(ServerCall newServerCall)
  {
    if (newServerCall != serverCall)
    {
      NotificationChain msgs = null;
      if (serverCall != null)
        msgs = ((InternalEObject)serverCall).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - AceGenPackage.CLIENT_THEN_BLOCK__SERVER_CALL, null, msgs);
      if (newServerCall != null)
        msgs = ((InternalEObject)newServerCall).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - AceGenPackage.CLIENT_THEN_BLOCK__SERVER_CALL, null, msgs);
      msgs = basicSetServerCall(newServerCall, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, AceGenPackage.CLIENT_THEN_BLOCK__SERVER_CALL, newServerCall, newServerCall));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<StateVerification> getStateVerifications()
  {
    if (stateVerifications == null)
    {
      stateVerifications = new EObjectContainmentEList<StateVerification>(StateVerification.class, this, AceGenPackage.CLIENT_THEN_BLOCK__STATE_VERIFICATIONS);
    }
    return stateVerifications;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<TriggeredAction> getTriggeredAction()
  {
    if (triggeredAction == null)
    {
      triggeredAction = new EObjectContainmentEList<TriggeredAction>(TriggeredAction.class, this, AceGenPackage.CLIENT_THEN_BLOCK__TRIGGERED_ACTION);
    }
    return triggeredAction;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case AceGenPackage.CLIENT_THEN_BLOCK__SERVER_CALL:
        return basicSetServerCall(null, msgs);
      case AceGenPackage.CLIENT_THEN_BLOCK__STATE_VERIFICATIONS:
        return ((InternalEList<?>)getStateVerifications()).basicRemove(otherEnd, msgs);
      case AceGenPackage.CLIENT_THEN_BLOCK__TRIGGERED_ACTION:
        return ((InternalEList<?>)getTriggeredAction()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case AceGenPackage.CLIENT_THEN_BLOCK__SERVER_CALL:
        return getServerCall();
      case AceGenPackage.CLIENT_THEN_BLOCK__STATE_VERIFICATIONS:
        return getStateVerifications();
      case AceGenPackage.CLIENT_THEN_BLOCK__TRIGGERED_ACTION:
        return getTriggeredAction();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case AceGenPackage.CLIENT_THEN_BLOCK__SERVER_CALL:
        setServerCall((ServerCall)newValue);
        return;
      case AceGenPackage.CLIENT_THEN_BLOCK__STATE_VERIFICATIONS:
        getStateVerifications().clear();
        getStateVerifications().addAll((Collection<? extends StateVerification>)newValue);
        return;
      case AceGenPackage.CLIENT_THEN_BLOCK__TRIGGERED_ACTION:
        getTriggeredAction().clear();
        getTriggeredAction().addAll((Collection<? extends TriggeredAction>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case AceGenPackage.CLIENT_THEN_BLOCK__SERVER_CALL:
        setServerCall((ServerCall)null);
        return;
      case AceGenPackage.CLIENT_THEN_BLOCK__STATE_VERIFICATIONS:
        getStateVerifications().clear();
        return;
      case AceGenPackage.CLIENT_THEN_BLOCK__TRIGGERED_ACTION:
        getTriggeredAction().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case AceGenPackage.CLIENT_THEN_BLOCK__SERVER_CALL:
        return serverCall != null;
      case AceGenPackage.CLIENT_THEN_BLOCK__STATE_VERIFICATIONS:
        return stateVerifications != null && !stateVerifications.isEmpty();
      case AceGenPackage.CLIENT_THEN_BLOCK__TRIGGERED_ACTION:
        return triggeredAction != null && !triggeredAction.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //ClientThenBlockImpl
