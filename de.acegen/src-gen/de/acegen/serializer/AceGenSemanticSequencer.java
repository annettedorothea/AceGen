/*
 * generated by Xtext 2.21.0
 */
package de.acegen.serializer;

import com.google.inject.Inject;
import de.acegen.aceGen.AceGenPackage;
import de.acegen.aceGen.Attribute;
import de.acegen.aceGen.AttributeDefinition;
import de.acegen.aceGen.AttributeDefinitionList;
import de.acegen.aceGen.AttributeDefinitionListForList;
import de.acegen.aceGen.AuthUser;
import de.acegen.aceGen.Authorization;
import de.acegen.aceGen.DataDefinition;
import de.acegen.aceGen.GivenRef;
import de.acegen.aceGen.HttpClient;
import de.acegen.aceGen.HttpClientAce;
import de.acegen.aceGen.HttpClientOutcome;
import de.acegen.aceGen.HttpClientStateElement;
import de.acegen.aceGen.HttpClientStateFunction;
import de.acegen.aceGen.HttpClientTypeDefinition;
import de.acegen.aceGen.HttpServer;
import de.acegen.aceGen.HttpServerAceRead;
import de.acegen.aceGen.HttpServerAceWrite;
import de.acegen.aceGen.HttpServerOutcome;
import de.acegen.aceGen.HttpServerView;
import de.acegen.aceGen.HttpServerViewFunction;
import de.acegen.aceGen.Model;
import de.acegen.aceGen.PrimitiveValue;
import de.acegen.aceGen.PrimitiveValueDefinitionForList;
import de.acegen.aceGen.Project;
import de.acegen.aceGen.Scenario;
import de.acegen.aceGen.ThenBlock;
import de.acegen.aceGen.Value;
import de.acegen.aceGen.ValueDefinitionList;
import de.acegen.aceGen.WhenBlock;
import de.acegen.services.AceGenGrammarAccess;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;

@SuppressWarnings("all")
public class AceGenSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private AceGenGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == AceGenPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case AceGenPackage.ATTRIBUTE:
				sequence_Attribute(context, (Attribute) semanticObject); 
				return; 
			case AceGenPackage.ATTRIBUTE_DEFINITION:
				sequence_AttributeDefinition(context, (AttributeDefinition) semanticObject); 
				return; 
			case AceGenPackage.ATTRIBUTE_DEFINITION_LIST:
				sequence_AttributeDefinitionList(context, (AttributeDefinitionList) semanticObject); 
				return; 
			case AceGenPackage.ATTRIBUTE_DEFINITION_LIST_FOR_LIST:
				sequence_AttributeDefinitionListForList(context, (AttributeDefinitionListForList) semanticObject); 
				return; 
			case AceGenPackage.AUTH_USER:
				sequence_AuthUser(context, (AuthUser) semanticObject); 
				return; 
			case AceGenPackage.AUTHORIZATION:
				sequence_Authorization(context, (Authorization) semanticObject); 
				return; 
			case AceGenPackage.DATA_DEFINITION:
				sequence_DataDefinition(context, (DataDefinition) semanticObject); 
				return; 
			case AceGenPackage.GIVEN_REF:
				sequence_GivenRef(context, (GivenRef) semanticObject); 
				return; 
			case AceGenPackage.HTTP_CLIENT:
				sequence_HttpClient(context, (HttpClient) semanticObject); 
				return; 
			case AceGenPackage.HTTP_CLIENT_ACE:
				sequence_HttpClientAce(context, (HttpClientAce) semanticObject); 
				return; 
			case AceGenPackage.HTTP_CLIENT_OUTCOME:
				sequence_HttpClientOutcome(context, (HttpClientOutcome) semanticObject); 
				return; 
			case AceGenPackage.HTTP_CLIENT_STATE_ELEMENT:
				sequence_HttpClientStateElement(context, (HttpClientStateElement) semanticObject); 
				return; 
			case AceGenPackage.HTTP_CLIENT_STATE_FUNCTION:
				sequence_HttpClientStateFunction(context, (HttpClientStateFunction) semanticObject); 
				return; 
			case AceGenPackage.HTTP_CLIENT_TYPE_DEFINITION:
				sequence_HttpClientTypeDefinition(context, (HttpClientTypeDefinition) semanticObject); 
				return; 
			case AceGenPackage.HTTP_SERVER:
				sequence_HttpServer(context, (HttpServer) semanticObject); 
				return; 
			case AceGenPackage.HTTP_SERVER_ACE_READ:
				sequence_HttpServerAceRead(context, (HttpServerAceRead) semanticObject); 
				return; 
			case AceGenPackage.HTTP_SERVER_ACE_WRITE:
				sequence_HttpServerAceWrite(context, (HttpServerAceWrite) semanticObject); 
				return; 
			case AceGenPackage.HTTP_SERVER_OUTCOME:
				sequence_HttpServerOutcome(context, (HttpServerOutcome) semanticObject); 
				return; 
			case AceGenPackage.HTTP_SERVER_VIEW:
				sequence_HttpServerView(context, (HttpServerView) semanticObject); 
				return; 
			case AceGenPackage.HTTP_SERVER_VIEW_FUNCTION:
				sequence_HttpServerViewFunction(context, (HttpServerViewFunction) semanticObject); 
				return; 
			case AceGenPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case AceGenPackage.PRIMITIVE_VALUE:
				sequence_PrimitiveValue(context, (PrimitiveValue) semanticObject); 
				return; 
			case AceGenPackage.PRIMITIVE_VALUE_DEFINITION_FOR_LIST:
				sequence_PrimitiveValueDefinitionForList(context, (PrimitiveValueDefinitionForList) semanticObject); 
				return; 
			case AceGenPackage.PROJECT:
				sequence_Project(context, (Project) semanticObject); 
				return; 
			case AceGenPackage.SCENARIO:
				sequence_Scenario(context, (Scenario) semanticObject); 
				return; 
			case AceGenPackage.THEN_BLOCK:
				sequence_ThenBlock(context, (ThenBlock) semanticObject); 
				return; 
			case AceGenPackage.VALUE:
				sequence_Value(context, (Value) semanticObject); 
				return; 
			case AceGenPackage.VALUE_DEFINITION_LIST:
				sequence_ValueDefinitionList(context, (ValueDefinitionList) semanticObject); 
				return; 
			case AceGenPackage.WHEN_BLOCK:
				sequence_WhenBlock(context, (WhenBlock) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     ListAttributeDefinitionList returns AttributeDefinitionListForList
	 *     AttributeDefinitionListForList returns AttributeDefinitionListForList
	 *
	 * Constraint:
	 *     attributeDefinitionList+=AttributeDefinitionList*
	 */
	protected void sequence_AttributeDefinitionListForList(ISerializationContext context, AttributeDefinitionListForList semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AttributeDefinitionList returns AttributeDefinitionList
	 *
	 * Constraint:
	 *     attributeDefinitions+=AttributeDefinition*
	 */
	protected void sequence_AttributeDefinitionList(ISerializationContext context, AttributeDefinitionList semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AttributeDefinition returns AttributeDefinition
	 *
	 * Constraint:
	 *     (attribute=[Attribute|QualifiedName] value=Value)
	 */
	protected void sequence_AttributeDefinition(ISerializationContext context, AttributeDefinition semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AceGenPackage.Literals.ATTRIBUTE_DEFINITION__ATTRIBUTE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AceGenPackage.Literals.ATTRIBUTE_DEFINITION__ATTRIBUTE));
			if (transientValues.isValueTransient(semanticObject, AceGenPackage.Literals.ATTRIBUTE_DEFINITION__VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AceGenPackage.Literals.ATTRIBUTE_DEFINITION__VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAttributeDefinitionAccess().getAttributeAttributeQualifiedNameParserRuleCall_0_0_1(), semanticObject.eGet(AceGenPackage.Literals.ATTRIBUTE_DEFINITION__ATTRIBUTE, false));
		feeder.accept(grammarAccess.getAttributeDefinitionAccess().getValueValueParserRuleCall_2_0(), semanticObject.getValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Attribute returns Attribute
	 *
	 * Constraint:
	 *     (
	 *         unique?='Unique'? 
	 *         primaryKey?='PrimaryKey'? 
	 *         constraint=Constraint? 
	 *         list?='List'? 
	 *         (type=Type | model=[Model|QualifiedName]) 
	 *         name=ID 
	 *         foreignKey=[Attribute|QualifiedName]? 
	 *         notReplayable?='notReplayable'?
	 *     )
	 */
	protected void sequence_Attribute(ISerializationContext context, Attribute semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     AuthUser returns AuthUser
	 *
	 * Constraint:
	 *     (name=ID attributes+=Attribute*)
	 */
	protected void sequence_AuthUser(ISerializationContext context, AuthUser semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Authorization returns Authorization
	 *
	 * Constraint:
	 *     (username=STRING password=STRING)
	 */
	protected void sequence_Authorization(ISerializationContext context, Authorization semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AceGenPackage.Literals.AUTHORIZATION__USERNAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AceGenPackage.Literals.AUTHORIZATION__USERNAME));
			if (transientValues.isValueTransient(semanticObject, AceGenPackage.Literals.AUTHORIZATION__PASSWORD) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AceGenPackage.Literals.AUTHORIZATION__PASSWORD));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAuthorizationAccess().getUsernameSTRINGTerminalRuleCall_1_0(), semanticObject.getUsername());
		feeder.accept(grammarAccess.getAuthorizationAccess().getPasswordSTRINGTerminalRuleCall_3_0(), semanticObject.getPassword());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     DataDefinition returns DataDefinition
	 *
	 * Constraint:
	 *     (uuid=STRING? (systemtime=STRING pattern=STRING)? data=AttributeDefinitionList?)
	 */
	protected void sequence_DataDefinition(ISerializationContext context, DataDefinition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     GivenRef returns GivenRef
	 *
	 * Constraint:
	 *     (scenario=[Scenario|QualifiedName] times=INT?)
	 */
	protected void sequence_GivenRef(ISerializationContext context, GivenRef semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     HttpClientAce returns HttpClientAce
	 *
	 * Constraint:
	 *     (
	 *         async?='async'? 
	 *         name=ID 
	 *         (input+=ID input+=ID*)? 
	 *         serverCall=[HttpServerAce|QualifiedName]? 
	 *         loadingFlag=[HttpClientStateElement|QualifiedName]? 
	 *         outcomes+=HttpClientOutcome*
	 *     )
	 */
	protected void sequence_HttpClientAce(ISerializationContext context, HttpClientAce semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     HttpClientOutcome returns HttpClientOutcome
	 *
	 * Constraint:
	 *     (name=ID listeners+=HttpClientStateFunction* aceOperations+=[HttpClientAce|QualifiedName]*)
	 */
	protected void sequence_HttpClientOutcome(ISerializationContext context, HttpClientOutcome semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     HttpClientStateElement returns HttpClientStateElement
	 *
	 * Constraint:
	 *     (name=ID list?='list'? hash?='location.hash'? storage?='storage'? (types+=HttpClientTypeDefinition types+=HttpClientTypeDefinition*)?)
	 */
	protected void sequence_HttpClientStateElement(ISerializationContext context, HttpClientStateElement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     HttpClientStateFunction returns HttpClientStateFunction
	 *
	 * Constraint:
	 *     (stateFunctionType=HttpClientStateFunctionType attribute=[HttpClientStateElement|QualifiedName])
	 */
	protected void sequence_HttpClientStateFunction(ISerializationContext context, HttpClientStateFunction semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AceGenPackage.Literals.HTTP_CLIENT_STATE_FUNCTION__STATE_FUNCTION_TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AceGenPackage.Literals.HTTP_CLIENT_STATE_FUNCTION__STATE_FUNCTION_TYPE));
			if (transientValues.isValueTransient(semanticObject, AceGenPackage.Literals.HTTP_CLIENT_STATE_FUNCTION__ATTRIBUTE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AceGenPackage.Literals.HTTP_CLIENT_STATE_FUNCTION__ATTRIBUTE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getHttpClientStateFunctionAccess().getStateFunctionTypeHttpClientStateFunctionTypeParserRuleCall_0_0(), semanticObject.getStateFunctionType());
		feeder.accept(grammarAccess.getHttpClientStateFunctionAccess().getAttributeHttpClientStateElementQualifiedNameParserRuleCall_1_0_1(), semanticObject.eGet(AceGenPackage.Literals.HTTP_CLIENT_STATE_FUNCTION__ATTRIBUTE, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     HttpClientTypeDefinition returns HttpClientTypeDefinition
	 *
	 * Constraint:
	 *     (name=ID elements+=HttpClientStateElement*)
	 */
	protected void sequence_HttpClientTypeDefinition(ISerializationContext context, HttpClientTypeDefinition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     HttpClient returns HttpClient
	 *
	 * Constraint:
	 *     (name=QualifiedName aceOperations+=HttpClientAce* appState=HttpClientStateElement?)
	 */
	protected void sequence_HttpClient(ISerializationContext context, HttpClient semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     HttpServerAce returns HttpServerAceRead
	 *     HttpServerAceRead returns HttpServerAceRead
	 *
	 * Constraint:
	 *     (
	 *         proxy?='proxy'? 
	 *         name=ID 
	 *         model=[Model|QualifiedName] 
	 *         type=ReadFunctionType 
	 *         url=STRING 
	 *         authorize?='authorize'? 
	 *         pathParams+=[Attribute|QualifiedName]* 
	 *         queryParams+=[Attribute|QualifiedName]* 
	 *         payload+=[Attribute|QualifiedName]* 
	 *         response+=[Attribute|QualifiedName]*
	 *     )
	 */
	protected void sequence_HttpServerAceRead(ISerializationContext context, HttpServerAceRead semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     HttpServerAce returns HttpServerAceWrite
	 *     HttpServerAceWrite returns HttpServerAceWrite
	 *
	 * Constraint:
	 *     (
	 *         proxy?='proxy'? 
	 *         name=ID 
	 *         model=[Model|QualifiedName] 
	 *         type=WriteFunctionType 
	 *         url=STRING 
	 *         authorize?='authorize'? 
	 *         pathParams+=[Attribute|QualifiedName]* 
	 *         queryParams+=[Attribute|QualifiedName]* 
	 *         payload+=[Attribute|QualifiedName]* 
	 *         response+=[Attribute|QualifiedName]* 
	 *         outcomes+=HttpServerOutcome*
	 *     )
	 */
	protected void sequence_HttpServerAceWrite(ISerializationContext context, HttpServerAceWrite semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     HttpServerOutcome returns HttpServerOutcome
	 *
	 * Constraint:
	 *     (name=ID listeners+=[HttpServerViewFunction|QualifiedName]*)
	 */
	protected void sequence_HttpServerOutcome(ISerializationContext context, HttpServerOutcome semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     HttpServerViewFunction returns HttpServerViewFunction
	 *
	 * Constraint:
	 *     (name=ID model=[Model|QualifiedName])
	 */
	protected void sequence_HttpServerViewFunction(ISerializationContext context, HttpServerViewFunction semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AceGenPackage.Literals.HTTP_SERVER_VIEW_FUNCTION__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AceGenPackage.Literals.HTTP_SERVER_VIEW_FUNCTION__NAME));
			if (transientValues.isValueTransient(semanticObject, AceGenPackage.Literals.HTTP_SERVER_VIEW_FUNCTION__MODEL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AceGenPackage.Literals.HTTP_SERVER_VIEW_FUNCTION__MODEL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getHttpServerViewFunctionAccess().getNameIDTerminalRuleCall_0_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getHttpServerViewFunctionAccess().getModelModelQualifiedNameParserRuleCall_2_0_1(), semanticObject.eGet(AceGenPackage.Literals.HTTP_SERVER_VIEW_FUNCTION__MODEL, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     HttpServerView returns HttpServerView
	 *
	 * Constraint:
	 *     (name=ID renderFunctions+=HttpServerViewFunction*)
	 */
	protected void sequence_HttpServerView(ISerializationContext context, HttpServerView semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     HttpServer returns HttpServer
	 *
	 * Constraint:
	 *     (
	 *         name=QualifiedName 
	 *         authUser=AuthUser? 
	 *         authUserRef=[AuthUser|QualifiedName]? 
	 *         aceOperations+=HttpServerAce* 
	 *         views+=HttpServerView* 
	 *         models+=Model* 
	 *         scenarios+=Scenario*
	 *     )
	 */
	protected void sequence_HttpServer(ISerializationContext context, HttpServer semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Model returns Model
	 *
	 * Constraint:
	 *     (persistent?='persistent'? name=ID (superModels+=[Model|QualifiedName] superModels+=[Model|QualifiedName]*)? attributes+=Attribute*)
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ListAttributeDefinitionList returns PrimitiveValueDefinitionForList
	 *     PrimitiveValueDefinitionForList returns PrimitiveValueDefinitionForList
	 *
	 * Constraint:
	 *     valueDefinitionList+=ValueDefinitionList*
	 */
	protected void sequence_PrimitiveValueDefinitionForList(ISerializationContext context, PrimitiveValueDefinitionForList semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PrimitiveValue returns PrimitiveValue
	 *
	 * Constraint:
	 *     (stringValue=STRING | intValue=INT)
	 */
	protected void sequence_PrimitiveValue(ISerializationContext context, PrimitiveValue semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Project returns Project
	 *
	 * Constraint:
	 *     (httpClient=HttpClient | httpServer=HttpServer)
	 */
	protected void sequence_Project(ISerializationContext context, Project semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Scenario returns Scenario
	 *
	 * Constraint:
	 *     (name=ID givenRefs+=GivenRef* whenBlock=WhenBlock thenBlock=ThenBlock)
	 */
	protected void sequence_Scenario(ISerializationContext context, Scenario semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ThenBlock returns ThenBlock
	 *
	 * Constraint:
	 *     (statusCode=INT response=DataDefinition?)
	 */
	protected void sequence_ThenBlock(ISerializationContext context, ThenBlock semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     ValueDefinitionList returns ValueDefinitionList
	 *
	 * Constraint:
	 *     primitiveValue=PrimitiveValue
	 */
	protected void sequence_ValueDefinitionList(ISerializationContext context, ValueDefinitionList semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, AceGenPackage.Literals.VALUE_DEFINITION_LIST__PRIMITIVE_VALUE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, AceGenPackage.Literals.VALUE_DEFINITION_LIST__PRIMITIVE_VALUE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getValueDefinitionListAccess().getPrimitiveValuePrimitiveValueParserRuleCall_0(), semanticObject.getPrimitiveValue());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Value returns Value
	 *
	 * Constraint:
	 *     (
	 *         stringValue=STRING | 
	 *         intValue=INT | 
	 *         (dateValue=STRING pattern=STRING) | 
	 *         attributeDefinitionList=AttributeDefinitionList | 
	 *         listAttributeDefinitionList=ListAttributeDefinitionList
	 *     )
	 */
	protected void sequence_Value(ISerializationContext context, Value semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     WhenBlock returns WhenBlock
	 *
	 * Constraint:
	 *     (action=[HttpServerAce|QualifiedName] dataDefinition=DataDefinition authorization=Authorization?)
	 */
	protected void sequence_WhenBlock(ISerializationContext context, WhenBlock semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
