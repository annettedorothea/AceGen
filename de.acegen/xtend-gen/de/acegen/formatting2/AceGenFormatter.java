/**
 * generated by Xtext 2.20.0
 */
package de.acegen.formatting2;

import com.google.inject.Inject;
import de.acegen.aceGen.AttributeDefinition;
import de.acegen.aceGen.AttributeDefinitionList;
import de.acegen.aceGen.AuthUser;
import de.acegen.aceGen.DataDefinition;
import de.acegen.aceGen.HttpClient;
import de.acegen.aceGen.HttpClientAce;
import de.acegen.aceGen.HttpClientOutcome;
import de.acegen.aceGen.HttpClientStateElement;
import de.acegen.aceGen.HttpClientTypeDefinition;
import de.acegen.aceGen.HttpServer;
import de.acegen.aceGen.HttpServerAceRead;
import de.acegen.aceGen.HttpServerAceWrite;
import de.acegen.aceGen.HttpServerView;
import de.acegen.aceGen.ListAttributeDefinitionList;
import de.acegen.aceGen.Model;
import de.acegen.aceGen.Project;
import de.acegen.aceGen.Scenario;
import de.acegen.aceGen.ThenBlock;
import de.acegen.aceGen.Value;
import de.acegen.aceGen.WhenBlock;
import de.acegen.services.AceGenGrammarAccess;
import java.util.Arrays;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.formatting2.AbstractFormatter2;
import org.eclipse.xtext.formatting2.IFormattableDocument;
import org.eclipse.xtext.resource.XtextResource;
import org.eclipse.xtext.xbase.lib.Extension;

@SuppressWarnings("all")
public class AceGenFormatter extends AbstractFormatter2 {
  @Inject
  @Extension
  private AceGenGrammarAccess _aceGenGrammarAccess;
  
  protected void _format(final Project project, @Extension final IFormattableDocument document) {
  }
  
  protected void _format(final HttpClient httpClient, @Extension final IFormattableDocument document) {
  }
  
  protected void _format(final HttpClientAce it, @Extension final IFormattableDocument document) {
  }
  
  protected void _format(final HttpClientOutcome it, @Extension final IFormattableDocument document) {
  }
  
  protected void _format(final HttpClientStateElement it, @Extension final IFormattableDocument document) {
  }
  
  protected void _format(final HttpClientTypeDefinition it, @Extension final IFormattableDocument document) {
  }
  
  protected void _format(final HttpServer it, @Extension final IFormattableDocument document) {
  }
  
  protected void _format(final HttpServerAceWrite it, @Extension final IFormattableDocument document) {
  }
  
  protected void _format(final HttpServerAceRead it, @Extension final IFormattableDocument document) {
  }
  
  protected void _format(final HttpServerView it, @Extension final IFormattableDocument document) {
  }
  
  protected void _format(final AuthUser it, @Extension final IFormattableDocument document) {
  }
  
  protected void _format(final Model it, @Extension final IFormattableDocument document) {
  }
  
  protected void _format(final Scenario it, @Extension final IFormattableDocument document) {
  }
  
  protected void _format(final WhenBlock it, @Extension final IFormattableDocument document) {
  }
  
  protected void _format(final ThenBlock it, @Extension final IFormattableDocument document) {
  }
  
  protected void _format(final DataDefinition it, @Extension final IFormattableDocument document) {
  }
  
  protected void _format(final AttributeDefinitionList it, @Extension final IFormattableDocument document) {
  }
  
  protected void _format(final ListAttributeDefinitionList it, @Extension final IFormattableDocument document) {
  }
  
  protected void _format(final AttributeDefinition it, @Extension final IFormattableDocument document) {
  }
  
  protected void _format(final Value it, @Extension final IFormattableDocument document) {
  }
  
  public void format(final Object it, final IFormattableDocument document) {
    if (it instanceof XtextResource) {
      _format((XtextResource)it, document);
      return;
    } else if (it instanceof HttpServerAceRead) {
      _format((HttpServerAceRead)it, document);
      return;
    } else if (it instanceof HttpServerAceWrite) {
      _format((HttpServerAceWrite)it, document);
      return;
    } else if (it instanceof AttributeDefinition) {
      _format((AttributeDefinition)it, document);
      return;
    } else if (it instanceof AttributeDefinitionList) {
      _format((AttributeDefinitionList)it, document);
      return;
    } else if (it instanceof AuthUser) {
      _format((AuthUser)it, document);
      return;
    } else if (it instanceof DataDefinition) {
      _format((DataDefinition)it, document);
      return;
    } else if (it instanceof HttpClient) {
      _format((HttpClient)it, document);
      return;
    } else if (it instanceof HttpClientAce) {
      _format((HttpClientAce)it, document);
      return;
    } else if (it instanceof HttpClientOutcome) {
      _format((HttpClientOutcome)it, document);
      return;
    } else if (it instanceof HttpClientStateElement) {
      _format((HttpClientStateElement)it, document);
      return;
    } else if (it instanceof HttpClientTypeDefinition) {
      _format((HttpClientTypeDefinition)it, document);
      return;
    } else if (it instanceof HttpServer) {
      _format((HttpServer)it, document);
      return;
    } else if (it instanceof HttpServerView) {
      _format((HttpServerView)it, document);
      return;
    } else if (it instanceof ListAttributeDefinitionList) {
      _format((ListAttributeDefinitionList)it, document);
      return;
    } else if (it instanceof Model) {
      _format((Model)it, document);
      return;
    } else if (it instanceof Project) {
      _format((Project)it, document);
      return;
    } else if (it instanceof Scenario) {
      _format((Scenario)it, document);
      return;
    } else if (it instanceof ThenBlock) {
      _format((ThenBlock)it, document);
      return;
    } else if (it instanceof Value) {
      _format((Value)it, document);
      return;
    } else if (it instanceof WhenBlock) {
      _format((WhenBlock)it, document);
      return;
    } else if (it instanceof EObject) {
      _format((EObject)it, document);
      return;
    } else if (it == null) {
      _format((Void)null, document);
      return;
    } else if (it != null) {
      _format(it, document);
      return;
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(it, document).toString());
    }
  }
}
