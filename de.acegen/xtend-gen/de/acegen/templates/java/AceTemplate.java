/**
 * Copyright (c) 2019, Annette Pohl, Koblenz, Germany
 * 
 * Permission to use, copy, modify, and/or distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */
package de.acegen.templates.java;

import de.acegen.aceGen.Attribute;
import de.acegen.aceGen.AuthUser;
import de.acegen.extensions.CommonExtension;
import de.acegen.extensions.java.AttributeExtension;
import javax.inject.Inject;
import org.eclipse.emf.common.util.EList;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.StringExtensions;

@SuppressWarnings("all")
public class AceTemplate {
  @Inject
  @Extension
  private AttributeExtension _attributeExtension;
  
  @Inject
  @Extension
  private CommonExtension _commonExtension;
  
  public CharSequence generateApp() {
    StringConcatenation _builder = new StringConcatenation();
    String _copyright = this._commonExtension.copyright();
    _builder.append(_copyright);
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("package de.acegen;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import org.glassfish.jersey.server.filter.RolesAllowedDynamicFeature;");
    _builder.newLine();
    _builder.append("import org.jdbi.v3.core.Jdbi;");
    _builder.newLine();
    _builder.append("import org.slf4j.Logger;");
    _builder.newLine();
    _builder.append("import org.slf4j.LoggerFactory;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import io.dropwizard.Application;");
    _builder.newLine();
    _builder.append("import io.dropwizard.db.DataSourceFactory;");
    _builder.newLine();
    _builder.append("import io.dropwizard.jdbi3.JdbiFactory;");
    _builder.newLine();
    _builder.append("import io.dropwizard.jdbi3.bundles.JdbiExceptionsBundle;");
    _builder.newLine();
    _builder.append("import io.dropwizard.jersey.jackson.JsonProcessingExceptionMapper;");
    _builder.newLine();
    _builder.append("import io.dropwizard.migrations.MigrationsBundle;");
    _builder.newLine();
    _builder.append("import io.dropwizard.setup.Bootstrap;");
    _builder.newLine();
    _builder.append("import io.dropwizard.setup.Environment;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class App extends Application<CustomAppConfiguration> {");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("static final Logger LOG = LoggerFactory.getLogger(App.class);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("static IDaoProvider daoProvider;");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static ViewProvider viewProvider;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private static String mode;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static void main(String[] args) throws Exception {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("new App().run(args);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public String getName() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return \"app name\";");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static String getVersion() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return \"app version\";");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static String getMode() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return mode;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static void reportException(Exception x) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// notify about exception");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void initialize(Bootstrap<CustomAppConfiguration> bootstrap) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("bootstrap.addBundle(new MigrationsBundle<CustomAppConfiguration>() {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("public DataSourceFactory getDataSourceFactory(CustomAppConfiguration configuration) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("return configuration.getDataSourceFactory();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("});");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if (!ServerConfiguration.LIVE.equals(mode)) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("bootstrap.addCommand(new EventReplayCommand(this));");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void run(CustomAppConfiguration configuration, Environment environment) throws ClassNotFoundException {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("LOG.info(\"running version {}\", getVersion());");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("daoProvider = DaoProvider.create();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("viewProvider = ViewProvider.create(daoProvider, configuration);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("final JdbiFactory factory = new JdbiFactory();");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Jdbi jdbi = factory.build(environment, configuration.getDataSourceFactory(), \"todo\");");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("E2E e2e = new E2E();");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("String mode = configuration.getServerConfiguration().getMode();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if (ServerConfiguration.REPLAY.equals(mode)) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("environment.jersey().register(new PrepareE2EResource(jdbi, daoProvider, viewProvider, e2e, configuration));");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("environment.jersey().register(new StartE2ESessionResource(jdbi, daoProvider, e2e, configuration));");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("environment.jersey().register(new StopE2ESessionResource(e2e, configuration));");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("environment.jersey().register(new GetServerTimelineResource(jdbi, configuration));");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("LOG.warn(\"You are running in REPLAY mode. This is a security risc.\");");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("} else if (ServerConfiguration.DEV.equals(mode)) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("environment.jersey().register(new GetServerTimelineResource(jdbi, configuration));");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("LOG.warn(\"You are running in DEV mode. This is a security risc.\");");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("environment.jersey().register(new JsonProcessingExceptionMapper(true));");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("environment.jersey().register(new GetServerInfoResource());");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("JdbiExceptionsBundle dbiExceptionsBundle = new JdbiExceptionsBundle();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("environment.jersey().register(dbiExceptionsBundle);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("environment.jersey().register(RolesAllowedDynamicFeature.class);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("AppRegistration.registerResources(environment, new PersistenceConnection(jdbi), configuration, daoProvider, viewProvider, e2e);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("AppRegistration.registerConsumers(viewProvider, mode);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    String _sdg = this._commonExtension.sdg();
    _builder.append(_sdg);
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generateAppRegistration() {
    StringConcatenation _builder = new StringConcatenation();
    String _copyright = this._commonExtension.copyright();
    _builder.append(_copyright);
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("package de.acegen;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import io.dropwizard.setup.Environment;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class AppRegistration {");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static void registerResources(Environment environment, PersistenceConnection persistenceConnection, CustomAppConfiguration appConfiguration,");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("IDaoProvider daoProvider, ViewProvider viewProvider, E2E e2e) {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static void registerConsumers(ViewProvider viewProvider, String mode) {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    String _sdg = this._commonExtension.sdg();
    _builder.append(_sdg);
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generateE2E() {
    StringConcatenation _builder = new StringConcatenation();
    String _copyright = this._commonExtension.copyright();
    _builder.append(_copyright);
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("package de.acegen;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import java.util.ArrayList;");
    _builder.newLine();
    _builder.append("import java.util.HashMap;");
    _builder.newLine();
    _builder.append("import java.util.List;");
    _builder.newLine();
    _builder.append("import java.util.Map;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import org.joda.time.DateTime;");
    _builder.newLine();
    _builder.append("import org.slf4j.Logger;");
    _builder.newLine();
    _builder.append("import org.slf4j.LoggerFactory;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class E2E {");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private boolean sessionIsRunning;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private DateTime sessionStartedAt;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private Map<String, AceOperation> timeline;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private List<String> uuidList;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private int index;");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private List<Thread> triggerdThreads;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("static final Logger LOG = LoggerFactory.getLogger(E2E.class);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public E2E() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.sessionIsRunning = false;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.sessionStartedAt = null;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.timeline = null;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.index = 0;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.triggerdThreads = new ArrayList<>();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void addTriggeredThread(Thread thread) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("triggerdThreads.add(thread);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public boolean isSessionRunning() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return this.sessionIsRunning;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public DateTime getSessionStartedAt() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return this.sessionStartedAt;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void reset() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("for (Thread thread : triggerdThreads) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("LOG.info(\"wait for thread {} to finish before resetting E2E session\", thread.getName());");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("thread.join();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("} catch (InterruptedException e) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("LOG.error(\"thread.join {} was interrupted\", thread.getName(), e);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.sessionIsRunning = false;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.sessionStartedAt = null;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.timeline = null;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.index = 0;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.triggerdThreads.clear();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void init(List<ITimelineItem> initialTimeline) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("timeline = new HashMap<>();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("uuidList = new ArrayList<>();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("for (ITimelineItem timelineItem : initialTimeline) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("String uuid = timelineItem.getUuid();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if (!uuidList.contains(uuid)) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("uuidList.add(uuid);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("AceOperation aceOperation = timeline.get(uuid);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if (aceOperation == null) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("aceOperation = new AceOperation(uuid);");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("timeline.put(uuid, aceOperation);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if (\"action\".equals(timelineItem.getType())) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("aceOperation.setAction(timelineItem);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("} else if (\"command\".equals(timelineItem.getType())) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("aceOperation.setCommand(timelineItem);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("} else if (\"event\".equals(timelineItem.getType())) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("aceOperation.setEvent(timelineItem);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.sessionIsRunning = true;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.sessionStartedAt = new DateTime(System.currentTimeMillis());");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.index = 0;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public ITimelineItem selectNextAction() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if (index < uuidList.size()) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("String uuid = uuidList.get(index);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("index++;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return timeline.get(uuid).getAction();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return null;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public ITimelineItem selectAction(String uuid) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return timeline.get(uuid).getAction();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public ITimelineItem selectCommand(String uuid) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return timeline.get(uuid).getCommand();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public ITimelineItem selectEvent(String uuid) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return timeline.get(uuid).getEvent();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    String _sdg = this._commonExtension.sdg();
    _builder.append(_sdg);
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generateServerConfiguration() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("\t");
    String _copyright = this._commonExtension.copyright();
    _builder.append(_copyright, "\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("package de.acegen;");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("import com.fasterxml.jackson.annotation.JsonProperty;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public class ServerConfiguration {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("public static final String REPLAY = \"REPLAY\";");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("public static final String LIVE = \"LIVE\";");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("public static final String DEV = \"DEV\";");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("public static final String TEST = \"TEST\";");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("public static final String ALWAYS = \"ALWAYS\";");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("public static final String ON_ERROR = \"ON_ERROR\";");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("public static final String NEVER = \"NEVER\";");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("private String mode = DEV;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("private String writeTimeline = ON_ERROR;");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("@JsonProperty(\"mode\")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("public String getMode() {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return mode;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("@JsonProperty(\"mode\")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("public void setMode(String mode) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("this.mode = mode;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("@JsonProperty(\"writeTimeline\")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("public String getWriteTimeline() {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return writeTimeline;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("@JsonProperty(\"writeTimeline\")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("public void setWriteTimeline(String writeTimeline) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("this.writeTimeline = writeTimeline;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("public boolean writeTimeline() {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return !NEVER.equals(writeTimeline);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("public boolean writeError() {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return ON_ERROR.equals(writeTimeline) || ALWAYS.equals(writeTimeline);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    String _sdg = this._commonExtension.sdg();
    _builder.append(_sdg, "\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generateAppConfiguration() {
    StringConcatenation _builder = new StringConcatenation();
    String _copyright = this._commonExtension.copyright();
    _builder.append(_copyright);
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("package de.acegen;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import javax.validation.Valid;");
    _builder.newLine();
    _builder.append("import javax.validation.constraints.NotNull;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import com.fasterxml.jackson.annotation.JsonProperty;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import io.dropwizard.Configuration;");
    _builder.newLine();
    _builder.append("import io.dropwizard.db.DataSourceFactory;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class AppConfiguration extends Configuration {");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Valid");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@NotNull");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private DataSourceFactory database = new DataSourceFactory();");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private int port;");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public int getPort() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return port;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void setPort(int port) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.port = port;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Valid");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@NotNull");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private ServerConfiguration serverConfiguration = new ServerConfiguration();");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@JsonProperty(\"database\")");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public DataSourceFactory getDataSourceFactory() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return database;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@JsonProperty(\"database\")");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void setDataSourceFactory(DataSourceFactory dataSourceFactory) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.database = dataSourceFactory;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@JsonProperty(\"config\")");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public ServerConfiguration getServerConfiguration() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return serverConfiguration;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@JsonProperty(\"config\")");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void setServerConfiguration(ServerConfiguration serverConfiguration) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.serverConfiguration = serverConfiguration;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    String _sdg = this._commonExtension.sdg();
    _builder.append(_sdg);
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generateCustomAppConfiguration() {
    StringConcatenation _builder = new StringConcatenation();
    String _copyright = this._commonExtension.copyright();
    _builder.append(_copyright);
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("package de.acegen;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class CustomAppConfiguration extends AppConfiguration {");
    _builder.newLine();
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    String _sdg = this._commonExtension.sdg();
    _builder.append(_sdg);
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generateStartE2ESessionResource() {
    StringConcatenation _builder = new StringConcatenation();
    String _copyright = this._commonExtension.copyright();
    _builder.append(_copyright);
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("package de.acegen;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import java.util.List;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import javax.validation.constraints.NotNull;");
    _builder.newLine();
    _builder.append("import javax.ws.rs.Consumes;");
    _builder.newLine();
    _builder.append("import javax.ws.rs.PUT;");
    _builder.newLine();
    _builder.append("import javax.ws.rs.Path;");
    _builder.newLine();
    _builder.append("import javax.ws.rs.Produces;");
    _builder.newLine();
    _builder.append("import javax.ws.rs.WebApplicationException;");
    _builder.newLine();
    _builder.append("import javax.ws.rs.core.MediaType;");
    _builder.newLine();
    _builder.append("import javax.ws.rs.core.Response;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import org.jdbi.v3.core.Jdbi;");
    _builder.newLine();
    _builder.append("import org.slf4j.Logger;");
    _builder.newLine();
    _builder.append("import org.slf4j.LoggerFactory;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import com.codahale.metrics.annotation.Timed;");
    _builder.newLine();
    _builder.append("import com.fasterxml.jackson.core.JsonProcessingException;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("@Path(\"/e2e\")");
    _builder.newLine();
    _builder.append("@Produces(MediaType.APPLICATION_JSON)");
    _builder.newLine();
    _builder.append("@Consumes(MediaType.APPLICATION_JSON)");
    _builder.newLine();
    _builder.append("public class StartE2ESessionResource {");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("static final Logger LOG = LoggerFactory.getLogger(StartE2ESessionResource.class);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private Jdbi jdbi;\t\t\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private CustomAppConfiguration configuration;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private IDaoProvider daoProvider = new DaoProvider();");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private E2E e2e;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public StartE2ESessionResource(Jdbi jdbi, IDaoProvider daoProvider, E2E e2e, CustomAppConfiguration configuration) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("super();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.jdbi = jdbi;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.daoProvider = daoProvider;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.e2e = e2e;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.configuration = configuration;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@PUT");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Timed");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Path(\"/start\")");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public Response put(@NotNull List<ITimelineItem> timeline) throws JsonProcessingException {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if (ServerConfiguration.LIVE.equals(configuration.getServerConfiguration().getMode())) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("throw new WebApplicationException(\"start e2e session is not available in a live environment\", Response.Status.FORBIDDEN);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if (e2e.isSessionRunning() && e2e.getSessionStartedAt().plusMinutes(1).isAfterNow()) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("throw new WebApplicationException(\"session is already running\", Response.Status.SERVICE_UNAVAILABLE);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("e2e.init(timeline);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("PersistenceHandle handle = new PersistenceHandle(jdbi.open());");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("handle.getHandle().begin();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("daoProvider.getAceDao().truncateTimelineTable(handle);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("daoProvider.truncateAllViews(handle);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("handle.getHandle().commit();");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return Response.ok().build();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("} catch (Exception e) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("handle.getHandle().rollback();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("throw new WebApplicationException(e);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("} finally {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("handle.getHandle().close();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    String _sdg = this._commonExtension.sdg();
    _builder.append(_sdg);
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generateEventReplayCommand() {
    StringConcatenation _builder = new StringConcatenation();
    String _copyright = this._commonExtension.copyright();
    _builder.append(_copyright);
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("package de.acegen;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import java.util.List;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import org.jdbi.v3.core.Jdbi;");
    _builder.newLine();
    _builder.append("import org.slf4j.Logger;");
    _builder.newLine();
    _builder.append("import org.slf4j.LoggerFactory;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import io.dropwizard.Application;");
    _builder.newLine();
    _builder.append("import io.dropwizard.cli.EnvironmentCommand;");
    _builder.newLine();
    _builder.append("import io.dropwizard.jdbi3.JdbiFactory;");
    _builder.newLine();
    _builder.append("import io.dropwizard.setup.Environment;");
    _builder.newLine();
    _builder.append("import net.sourceforge.argparse4j.inf.Namespace;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class EventReplayCommand extends EnvironmentCommand<CustomAppConfiguration> {");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("static final Logger LOG = LoggerFactory.getLogger(EventReplayCommand.class);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("protected EventReplayCommand(Application<CustomAppConfiguration> application) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("super(application, \"replay\", \"truncates views and replays events\");");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("protected void run(Environment environment, Namespace namespace, CustomAppConfiguration configuration)");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("throws Exception {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if (ServerConfiguration.LIVE.equals(configuration.getServerConfiguration().getMode())) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("throw new RuntimeException(\"we won\'t truncate all views and replay events in a live environment\");");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("IDaoProvider daoProvider = DaoProvider.create();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("ViewProvider viewProvider = ViewProvider.create(daoProvider, configuration);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("final JdbiFactory factory = new JdbiFactory();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Jdbi jdbi = factory.build(environment, configuration.getDataSourceFactory(), \"data-source-name\");");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("DatabaseHandle databaseHandle = new DatabaseHandle(jdbi, configuration);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("AppRegistration.registerConsumers(viewProvider, ServerConfiguration.REPLAY);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("LOG.info(\"START EVENT REPLAY\");");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("databaseHandle.beginTransaction();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("PersistenceHandle handle = databaseHandle.getHandle();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("daoProvider.truncateAllViews(handle);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("List<ITimelineItem> timeline = daoProvider.getAceDao().selectReplayTimeline(handle);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("int i = 0;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("for (ITimelineItem nextEvent : timeline) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("IEvent event = EventFactory.createEvent(nextEvent.getName(), nextEvent.getData(), daoProvider, viewProvider, configuration);");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("if (event != null) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("event.notifyListeners(databaseHandle.getHandle());");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("i++;");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("if (i%1000 == 0) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("LOG.info(\"published \" + i + \" events\");");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("//LOG.info(\"published \" + nextEvent.getUuid() + \" - \" + nextEvent.getName());");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("} else {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("LOG.info(\"event \" + nextEvent.getName() + \" seems to be obsolete and was not replayed\");");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("databaseHandle.commitTransaction();");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("LOG.info(\"EVENT REPLAY FINISHED: successfully replayed \" + i + \" events\");");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("} catch (Exception e) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("databaseHandle.rollbackTransaction();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("LOG.info(\"EVENT REPLAY ABORTED \" + e.getMessage());");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("throw e;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("} finally {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("databaseHandle.close();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    String _sdg = this._commonExtension.sdg();
    _builder.append(_sdg);
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generateNotReplayableDataProvider() {
    StringConcatenation _builder = new StringConcatenation();
    String _copyright = this._commonExtension.copyright();
    _builder.append(_copyright);
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("package de.acegen;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import java.util.HashMap;");
    _builder.newLine();
    _builder.append("import java.util.Map;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import org.joda.time.DateTime;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class NotReplayableDataProvider {");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private static DateTime systemTime;");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private static Map<String, Object> valueMap = new HashMap<>();");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static DateTime getSystemTime() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return systemTime;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static void setSystemTime(DateTime systemTime) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("NotReplayableDataProvider.systemTime = systemTime;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static void put(String key, Object value) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("valueMap.put(key, value);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static Object get(String key) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return valueMap.get(key);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static void clear() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("systemTime = null;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("valueMap.clear();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    String _sdg = this._commonExtension.sdg();
    _builder.append(_sdg);
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generateGetServerInfoResource() {
    StringConcatenation _builder = new StringConcatenation();
    String _copyright = this._commonExtension.copyright();
    _builder.append(_copyright);
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("package de.acegen;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import javax.ws.rs.Consumes;");
    _builder.newLine();
    _builder.append("import javax.ws.rs.GET;");
    _builder.newLine();
    _builder.append("import javax.ws.rs.Path;");
    _builder.newLine();
    _builder.append("import javax.ws.rs.Produces;");
    _builder.newLine();
    _builder.append("import javax.ws.rs.core.MediaType;");
    _builder.newLine();
    _builder.append("import javax.ws.rs.core.Response;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import com.codahale.metrics.annotation.Timed;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("@Path(\"/server\")");
    _builder.newLine();
    _builder.append("@Produces(MediaType.APPLICATION_JSON)");
    _builder.newLine();
    _builder.append("@Consumes(MediaType.APPLICATION_JSON)");
    _builder.newLine();
    _builder.append("public class GetServerInfoResource {");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public GetServerInfoResource() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("super();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@GET");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Timed");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Path(\"/info\")");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public Response put() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return Response.ok(new ServerInfo(App.getVersion())).build();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    String _sdg = this._commonExtension.sdg();
    _builder.append(_sdg);
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generateServerInfo() {
    StringConcatenation _builder = new StringConcatenation();
    String _copyright = this._commonExtension.copyright();
    _builder.append(_copyright);
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("package de.acegen;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import com.fasterxml.jackson.annotation.JsonProperty;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class ServerInfo {");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private String serverVersion;");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public ServerInfo(String serverVersion) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("super();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.serverVersion = serverVersion;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@JsonProperty");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public String getServerVersion() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return serverVersion;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    String _sdg = this._commonExtension.sdg();
    _builder.append(_sdg);
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generateGetServerTimelineResource() {
    StringConcatenation _builder = new StringConcatenation();
    String _copyright = this._commonExtension.copyright();
    _builder.append(_copyright);
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("package de.acegen;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import java.util.List;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import javax.ws.rs.Consumes;");
    _builder.newLine();
    _builder.append("import javax.ws.rs.GET;");
    _builder.newLine();
    _builder.append("import javax.ws.rs.Path;");
    _builder.newLine();
    _builder.append("import javax.ws.rs.Produces;");
    _builder.newLine();
    _builder.append("import javax.ws.rs.WebApplicationException;");
    _builder.newLine();
    _builder.append("import javax.ws.rs.core.MediaType;");
    _builder.newLine();
    _builder.append("import javax.ws.rs.core.Response;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import org.jdbi.v3.core.Jdbi;");
    _builder.newLine();
    _builder.append("import org.slf4j.Logger;");
    _builder.newLine();
    _builder.append("import org.slf4j.LoggerFactory;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import com.codahale.metrics.annotation.Timed;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("@Path(\"/e2e\")");
    _builder.newLine();
    _builder.append("@Produces(MediaType.APPLICATION_JSON)");
    _builder.newLine();
    _builder.append("@Consumes(MediaType.APPLICATION_JSON)");
    _builder.newLine();
    _builder.append("public class GetServerTimelineResource {");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private Jdbi jdbi;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private CustomAppConfiguration configuration;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("static final Logger LOG = LoggerFactory.getLogger(GetServerTimelineResource.class);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private AceDao aceDao = new AceDao();");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public GetServerTimelineResource(Jdbi jdbi, CustomAppConfiguration configuration) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("super();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.jdbi = jdbi;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.configuration = configuration;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@GET");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Timed");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Path(\"/timeline\")");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public Response get() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if (ServerConfiguration.LIVE.equals(configuration.getServerConfiguration().getMode())) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("throw new WebApplicationException(\"get server timeline is not available in a live environment\", Response.Status.FORBIDDEN);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("PersistenceHandle timelineHandle = new PersistenceHandle(jdbi.open());");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("List<ITimelineItem> serverTimeline = aceDao.selectTimeline(timelineHandle);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return Response.ok(serverTimeline).build();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("} catch (Exception e) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("throw new WebApplicationException(e);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("} finally {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("timelineHandle.getHandle().close();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    String _sdg = this._commonExtension.sdg();
    _builder.append(_sdg);
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generatePrepareE2EResource() {
    StringConcatenation _builder = new StringConcatenation();
    String _copyright = this._commonExtension.copyright();
    _builder.append(_copyright);
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("package de.acegen;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import javax.validation.constraints.NotNull;");
    _builder.newLine();
    _builder.append("import javax.ws.rs.Consumes;");
    _builder.newLine();
    _builder.append("import javax.ws.rs.PUT;");
    _builder.newLine();
    _builder.append("import javax.ws.rs.Path;");
    _builder.newLine();
    _builder.append("import javax.ws.rs.Produces;");
    _builder.newLine();
    _builder.append("import javax.ws.rs.QueryParam;");
    _builder.newLine();
    _builder.append("import javax.ws.rs.WebApplicationException;");
    _builder.newLine();
    _builder.append("import javax.ws.rs.core.MediaType;");
    _builder.newLine();
    _builder.append("import javax.ws.rs.core.Response;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import org.jdbi.v3.core.Jdbi;");
    _builder.newLine();
    _builder.append("import org.slf4j.Logger;");
    _builder.newLine();
    _builder.append("import org.slf4j.LoggerFactory;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import com.codahale.metrics.annotation.Timed;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("@Path(\"/e2e\")");
    _builder.newLine();
    _builder.append("@Produces(MediaType.APPLICATION_JSON)");
    _builder.newLine();
    _builder.append("@Consumes(MediaType.APPLICATION_JSON)");
    _builder.newLine();
    _builder.append("public class PrepareE2EResource {");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private Jdbi jdbi;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private CustomAppConfiguration configuration;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("static final Logger LOG = LoggerFactory.getLogger(PrepareE2EResource.class);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private IDaoProvider daoProvider;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private ViewProvider viewProvider;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private E2E e2e;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public PrepareE2EResource(Jdbi jdbi, IDaoProvider daoProvider, ViewProvider viewProvider, E2E e2e, CustomAppConfiguration configuration) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("super();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.jdbi = jdbi;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.daoProvider = daoProvider;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.viewProvider = viewProvider;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.e2e = e2e;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.configuration = configuration;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@PUT");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Timed");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Path(\"/prepare\")");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public Response put(@NotNull @QueryParam(\"uuid\") String uuid) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if (ServerConfiguration.LIVE.equals(configuration.getServerConfiguration().getMode())) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("throw new WebApplicationException(\"prepare e2e replay is not available in a live environment\", Response.Status.FORBIDDEN);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("DatabaseHandle databaseHandle = new DatabaseHandle(jdbi, configuration);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("LOG.info(\"PREPARE ACTION \" + uuid);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("databaseHandle.beginTransaction();");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("int eventCount = 0;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("ITimelineItem nextAction = e2e.selectNextAction();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("while (nextAction != null && !nextAction.getUuid().equals(uuid)) {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("if (!nextAction.getMethod().equalsIgnoreCase(\"GET\")) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("ITimelineItem nextEvent = e2e.selectEvent(nextAction.getUuid());");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("if (nextEvent != null) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("LOG.info(\"PUBLISH EVENT \" + nextEvent.getUuid() + \" - \" + nextEvent.getName());");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("IEvent event = EventFactory.createEvent(nextEvent.getName(), nextEvent.getData(), daoProvider, viewProvider, configuration);");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("if (event != null) {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("event.notifyListeners(databaseHandle.getHandle());");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("daoProvider.getAceDao().addPreparingEventToTimeline(event, nextAction.getUuid(), databaseHandle.getTimelineHandle());");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("eventCount++;");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("} else {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.append("LOG.error(\"failed to create \" + nextEvent.getName());");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("nextAction = e2e.selectNextAction();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("databaseHandle.commitTransaction();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return Response.ok(\"prepared action \" + uuid + \" by publishing \" + eventCount + \" events\").build();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("} catch (Exception e) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("databaseHandle.rollbackTransaction();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("LOG.error(\"exception during prepare action \" + uuid);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("LOG.error(e.getMessage());");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("throw new WebApplicationException(e);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("} finally {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("databaseHandle.close();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    String _sdg = this._commonExtension.sdg();
    _builder.append(_sdg);
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generateStopE2ESessionResource() {
    StringConcatenation _builder = new StringConcatenation();
    String _copyright = this._commonExtension.copyright();
    _builder.append(_copyright);
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("package de.acegen;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import javax.ws.rs.Consumes;");
    _builder.newLine();
    _builder.append("import javax.ws.rs.PUT;");
    _builder.newLine();
    _builder.append("import javax.ws.rs.Path;");
    _builder.newLine();
    _builder.append("import javax.ws.rs.Produces;");
    _builder.newLine();
    _builder.append("import javax.ws.rs.core.MediaType;");
    _builder.newLine();
    _builder.append("import javax.ws.rs.core.Response;");
    _builder.newLine();
    _builder.append("import javax.ws.rs.WebApplicationException;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import org.slf4j.Logger;");
    _builder.newLine();
    _builder.append("import org.slf4j.LoggerFactory;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import com.codahale.metrics.annotation.Timed;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("@Path(\"/e2e\")");
    _builder.newLine();
    _builder.append("@Produces(MediaType.APPLICATION_JSON)");
    _builder.newLine();
    _builder.append("@Consumes(MediaType.APPLICATION_JSON)");
    _builder.newLine();
    _builder.append("public class StopE2ESessionResource {");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("static final Logger LOG = LoggerFactory.getLogger(StopE2ESessionResource.class);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private E2E e2e;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private CustomAppConfiguration configuration;");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public StopE2ESessionResource(E2E e2e, CustomAppConfiguration configuration) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("super();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.e2e = e2e;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.configuration = configuration;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@PUT");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Timed");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Path(\"/stop\")");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public Response put() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if (ServerConfiguration.LIVE.equals(configuration.getServerConfiguration().getMode())) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("throw new WebApplicationException(\"stop e2e session is not available in a live environment\", Response.Status.FORBIDDEN);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("e2e.reset();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return Response.ok().build();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    String _sdg = this._commonExtension.sdg();
    _builder.append(_sdg);
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generateAceOperation() {
    StringConcatenation _builder = new StringConcatenation();
    String _copyright = this._commonExtension.copyright();
    _builder.append(_copyright);
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("package de.acegen;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class AceOperation {");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private ITimelineItem action;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private ITimelineItem command;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private ITimelineItem event;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private String uuid;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public AceOperation(String uuid) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("super();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.uuid = uuid;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public ITimelineItem getAction() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return action;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public ITimelineItem getCommand() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return command;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public ITimelineItem getEvent() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return event;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void setAction(ITimelineItem action) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.action = action;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void setCommand(ITimelineItem command) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.command = command;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void setEvent(ITimelineItem event) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.event = event;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public String getUuid() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return uuid;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    String _sdg = this._commonExtension.sdg();
    _builder.append(_sdg);
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generateAceDao() {
    StringConcatenation _builder = new StringConcatenation();
    String _copyright = this._commonExtension.copyright();
    _builder.append(_copyright);
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("package de.acegen;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import java.util.List;");
    _builder.newLine();
    _builder.append("import java.util.Optional;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import org.jdbi.v3.core.statement.Update;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import com.fasterxml.jackson.core.JsonProcessingException;");
    _builder.newLine();
    _builder.append("import javax.ws.rs.WebApplicationException;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class AceDao {");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private JodaObjectMapper mapper = new JodaObjectMapper();");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void truncateTimelineTable(PersistenceHandle handle) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("handle.getHandle().execute(\"TRUNCATE TABLE timeline\");");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public boolean contains(PersistenceHandle handle, String uuid) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Optional<Integer> optional = handle.getHandle()");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append(".createQuery(\"SELECT count(uuid) \" + \"FROM timeline \"");
    _builder.newLine();
    _builder.append("\t\t\t\t\t\t");
    _builder.append("+ \"where uuid = :uuid\")");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append(".bind(\"uuid\", uuid)");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append(".mapTo((Integer.class)).findFirst();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Integer count = optional.isPresent() ? optional.get() : 0;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return count > 0;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void insertIntoTimeline(PersistenceHandle handle, String type, String method, String name, String data, String uuid) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Update statement = handle.getHandle().createUpdate(\"INSERT INTO timeline (type, method, name, time, data, uuid) \" + \"VALUES (:type, :method, :name, NOW(), :data, :uuid);\");");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("statement.bind(\"type\", type);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if (method != null) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("statement.bind(\"method\", method);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("} else {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("statement.bind(\"method\", \"---\");");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("statement.bind(\"name\", name);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("statement.bind(\"data\", data);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("statement.bind(\"uuid\", uuid);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("statement.execute();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public ITimelineItem selectLastAction(PersistenceHandle handle) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Optional<ITimelineItem> optional = handle.getHandle()");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append(".createQuery(\"SELECT type, method, name, time, data, uuid FROM timeline order by time desc limit 1\")");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append(".map(new TimelineItemMapper())");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append(".findFirst();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return optional.isPresent() ? optional.get() : null;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public List<ITimelineItem> selectTimeline(PersistenceHandle handle) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return handle.getHandle()");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append(".createQuery(\"SELECT type, method, name, time, data, uuid FROM timeline order by time asc\")");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append(".map(new TimelineItemMapper()).list();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public List<ITimelineItem> selectReplayTimeline(PersistenceHandle handle) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return handle.getHandle()");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append(".createQuery(\"SELECT type, method, name, time, data, uuid FROM timeline where type = \'event\' order by time asc \")");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append(".map(new TimelineItemMapper()).list();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void addActionToTimeline(IAction action, PersistenceHandle timelineHandle) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("String json = mapper.writeValueAsString(action.getActionData());");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("addItemToTimeline(\"action\", action.getHttpMethod().name(), action.getActionName(), json,");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("action.getActionData().getUuid(), timelineHandle);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("} catch (JsonProcessingException e) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("throw new WebApplicationException(e);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void addCommandToTimeline(ICommand command, PersistenceHandle timelineHandle) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("addItemToTimeline(\"command\", null, command.getCommandName(),");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("mapper.writeValueAsString(command.getCommandData()), command.getCommandData().getUuid(),");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("timelineHandle);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("} catch (JsonProcessingException e) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("throw new WebApplicationException(e);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void addEventToTimeline(IEvent event, PersistenceHandle timelineHandle) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("addItemToTimeline(\"event\", null, event.getEventName(), mapper.writeValueAsString(event.getEventData()),");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("event.getEventData().getUuid(), timelineHandle);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("} catch (JsonProcessingException e) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("throw new WebApplicationException(e);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void addPreparingEventToTimeline(IEvent event, String uuid, PersistenceHandle timelineHandle) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("addItemToTimeline(\"preparing event\", null, event.getEventName(),");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("mapper.writeValueAsString(event.getEventData()), uuid, timelineHandle);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("} catch (JsonProcessingException e) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("throw new WebApplicationException(e);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void addExceptionToTimeline(String uuid, Throwable x, PersistenceHandle timelineHandle) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.insertIntoTimeline(timelineHandle, \"exception\", \"\", x.getClass().getName(),");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("x.getMessage() != null ? x.getMessage() : \"\", uuid);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private void addItemToTimeline(String type, String method, String name, String json, String uuid,");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("PersistenceHandle timelineHandle) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.insertIntoTimeline(timelineHandle, type, method, name, json, uuid);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    String _sdg = this._commonExtension.sdg();
    _builder.append(_sdg);
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generateAceExecutionMode() {
    StringConcatenation _builder = new StringConcatenation();
    String _copyright = this._commonExtension.copyright();
    _builder.append(_copyright);
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("package de.acegen;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public enum AceExecutionMode {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("LIVE, REPLAY, DEV");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    String _sdg = this._commonExtension.sdg();
    _builder.append(_sdg);
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generateITimelineItem() {
    StringConcatenation _builder = new StringConcatenation();
    String _copyright = this._commonExtension.copyright();
    _builder.append(_copyright);
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("package de.acegen;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import org.joda.time.DateTime;");
    _builder.newLine();
    _builder.append("import com.fasterxml.jackson.databind.annotation.JsonDeserialize;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("@JsonDeserialize(as=TimelineItem.class)");
    _builder.newLine();
    _builder.append("public interface ITimelineItem {");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("String getType();");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("String getMethod();");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("String getName();");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("DateTime getTimestamp();");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("String getData();");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("String getUuid();");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    String _sdg = this._commonExtension.sdg();
    _builder.append(_sdg);
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generateJodaObjectMapper() {
    StringConcatenation _builder = new StringConcatenation();
    String _copyright = this._commonExtension.copyright();
    _builder.append(_copyright);
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("package de.acegen;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import com.fasterxml.jackson.databind.ObjectMapper;");
    _builder.newLine();
    _builder.append("import com.fasterxml.jackson.datatype.joda.JodaModule;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class JodaObjectMapper extends ObjectMapper {");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private static final long serialVersionUID = 3204337293769989499L;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public JodaObjectMapper() {");
    _builder.newLine();
    _builder.append("\t       ");
    _builder.append("super();");
    _builder.newLine();
    _builder.append("\t       ");
    _builder.append("registerModule(new JodaModule());");
    _builder.newLine();
    _builder.append("\t   ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    String _sdg = this._commonExtension.sdg();
    _builder.append(_sdg);
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generateTimelineItem() {
    StringConcatenation _builder = new StringConcatenation();
    String _copyright = this._commonExtension.copyright();
    _builder.append(_copyright);
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("package de.acegen;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import org.joda.time.DateTime;");
    _builder.newLine();
    _builder.append("import com.fasterxml.jackson.annotation.JsonProperty;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class TimelineItem implements ITimelineItem {");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private String type;");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private String method;");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private String name;");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private DateTime timestamp;");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private String data;");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private String uuid;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public TimelineItem(");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("@JsonProperty(\"type\") String type, ");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("@JsonProperty(\"method\") String method, ");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("@JsonProperty(\"name\") String name, ");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("@JsonProperty(\"timestamp\") DateTime timestamp, ");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("@JsonProperty(\"data\") String data,");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("@JsonProperty(\"uuid\") String uuid");
    _builder.newLine();
    _builder.append("\t");
    _builder.append(") {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("super();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.type = type;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.method = method;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.name = name;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.timestamp = timestamp;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.data = data;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.uuid = uuid;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@JsonProperty");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public String getType() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return type;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@JsonProperty");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public String getMethod() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return method;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@JsonProperty");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public String getName() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return name;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@JsonProperty");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public DateTime getTimestamp() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return timestamp;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@JsonProperty");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public String getData() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return data;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@JsonProperty");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public String getUuid() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return uuid;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public String toString() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return \"TimelineItem [type=\" + type + \", method=\" + method + \", name=\" + name + \", timestamp=\"");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("+ timestamp + \", uuid=\" + uuid + \"]\";");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    String _sdg = this._commonExtension.sdg();
    _builder.append(_sdg);
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generateTimelineItemMapper() {
    StringConcatenation _builder = new StringConcatenation();
    String _copyright = this._commonExtension.copyright();
    _builder.append(_copyright);
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("package de.acegen;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import java.sql.ResultSet;");
    _builder.newLine();
    _builder.append("import java.sql.SQLException;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import org.joda.time.DateTime;");
    _builder.newLine();
    _builder.append("import org.joda.time.format.DateTimeFormat;");
    _builder.newLine();
    _builder.append("import org.joda.time.format.DateTimeFormatter;");
    _builder.newLine();
    _builder.append("import org.jdbi.v3.core.mapper.RowMapper;");
    _builder.newLine();
    _builder.append("import org.jdbi.v3.core.statement.StatementContext;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class TimelineItemMapper implements RowMapper<ITimelineItem> {");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public ITimelineItem map(ResultSet r, StatementContext ctx) throws SQLException {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("DateTimeFormatter fmt = DateTimeFormat.forPattern(\"yyyy-MM-dd HH:mm:ss.SSSSSS\");");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("DateTime time = DateTime.parse(r.getString(\"time\"), fmt);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return new TimelineItem(");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("r.getString(\"type\"),");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("r.getString(\"method\"),");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("r.getString(\"name\"),");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("time,");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("r.getString(\"data\"),");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("r.getString(\"uuid\")");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append(");");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    String _sdg = this._commonExtension.sdg();
    _builder.append(_sdg);
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generateAbstractDaoProvider() {
    StringConcatenation _builder = new StringConcatenation();
    String _copyright = this._commonExtension.copyright();
    _builder.append(_copyright);
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("package de.acegen;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public abstract class AbstractDaoProvider implements IDaoProvider {");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("protected final AceDao aceDao = new AceDao();");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public AceDao getAceDao() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return this.aceDao;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    String _sdg = this._commonExtension.sdg();
    _builder.append(_sdg);
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generateDaoProvider() {
    StringConcatenation _builder = new StringConcatenation();
    String _copyright = this._commonExtension.copyright();
    _builder.append(_copyright);
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("package de.acegen;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class DaoProvider extends AbstractDaoProvider implements IDaoProvider {");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static IDaoProvider create() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return new DaoProvider();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void truncateAllViews(PersistenceHandle handle) {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    String _sdg = this._commonExtension.sdg();
    _builder.append(_sdg);
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generateIDaoProvider() {
    StringConcatenation _builder = new StringConcatenation();
    String _copyright = this._commonExtension.copyright();
    _builder.append(_copyright);
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("package de.acegen;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public interface IDaoProvider {");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("void truncateAllViews(PersistenceHandle handle);");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("AceDao getAceDao();");
    _builder.newLine();
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    String _sdg = this._commonExtension.sdg();
    _builder.append(_sdg);
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generateViewProvider() {
    StringConcatenation _builder = new StringConcatenation();
    String _copyright = this._commonExtension.copyright();
    _builder.append(_copyright);
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("package de.acegen;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class ViewProvider extends AbstractViewProvider {");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public ViewProvider() {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static ViewProvider create(IDaoProvider daoProvider, CustomAppConfiguration configuration) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return new ViewProvider();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    String _sdg = this._commonExtension.sdg();
    _builder.append(_sdg);
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generateAbstractViewProvider() {
    StringConcatenation _builder = new StringConcatenation();
    String _copyright = this._commonExtension.copyright();
    _builder.append(_copyright);
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("package de.acegen;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import java.util.ArrayList;");
    _builder.newLine();
    _builder.append("import java.util.HashMap;");
    _builder.newLine();
    _builder.append("import java.util.List;");
    _builder.newLine();
    _builder.append("import java.util.Map;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class AbstractViewProvider {");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private final Map<String, List<EventConsumer>> consumerMap;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public AbstractViewProvider() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("consumerMap = new HashMap<String, List<EventConsumer>>();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void addConsumer(String eventName, EventConsumer eventConsumer) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("List<EventConsumer> consumerForEvent = consumerMap.get(eventName);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if (consumerForEvent == null) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("consumerForEvent = new ArrayList<EventConsumer>();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("consumerMap.put(eventName, consumerForEvent);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("consumerForEvent.add(eventConsumer);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public List<EventConsumer> getConsumerForEvent(String eventName) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return consumerMap.get(eventName);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    String _sdg = this._commonExtension.sdg();
    _builder.append(_sdg);
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generateAceMigration() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<createTable tableName=\"timeline\">");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<column name=\"type\" type=\"character varying\">");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<constraints nullable=\"false\" />");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("</column>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<column name=\"method\" type=\"character varying\">");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<constraints nullable=\"false\" />");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("</column>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<column name=\"name\" type=\"character varying\">");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<constraints nullable=\"false\" />");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("</column>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<column name=\"time\" type=\"timestamp\">");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<constraints nullable=\"false\" />");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("</column>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<column name=\"data\" type=\"text\">");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<constraints nullable=\"false\" />");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("</column>");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("<column name=\"uuid\" type=\"character varying\">");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("<constraints nullable=\"false\" />");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("</column>");
    _builder.newLine();
    _builder.append("</createTable>");
    _builder.newLine();
    _builder.newLine();
    _builder.append("<addUniqueConstraint columnNames=\"type, uuid\" tableName=\"timeline\" />");
    _builder.newLine();
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generateAuthUser(final AuthUser it) {
    StringConcatenation _builder = new StringConcatenation();
    String _copyright = this._commonExtension.copyright();
    _builder.append(_copyright);
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("package de.acegen.auth;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import java.security.Principal;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class ");
    String _firstUpper = StringExtensions.toFirstUpper(it.getName());
    _builder.append(_firstUpper);
    _builder.append(" implements Principal {");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    {
      EList<Attribute> _attributes = it.getAttributes();
      for(final Attribute attribute : _attributes) {
        _builder.append("\t");
        String _declaration = this._attributeExtension.declaration(attribute);
        _builder.append(_declaration, "\t");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.newLine();
      }
    }
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public ");
    String _firstUpper_1 = StringExtensions.toFirstUpper(it.getName());
    _builder.append(_firstUpper_1, "\t");
    _builder.append(" (");
    _builder.newLineIfNotEmpty();
    {
      EList<Attribute> _attributes_1 = it.getAttributes();
      boolean _hasElements = false;
      for(final Attribute attribute_1 : _attributes_1) {
        if (!_hasElements) {
          _hasElements = true;
        } else {
          _builder.appendImmediate(",", "\t\t");
        }
        _builder.append("\t\t");
        String _param = this._attributeExtension.param(attribute_1, false);
        _builder.append(_param, "\t\t");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t");
    _builder.append(") {");
    _builder.newLine();
    {
      EList<Attribute> _attributes_2 = it.getAttributes();
      for(final Attribute attribute_2 : _attributes_2) {
        _builder.append("\t\t");
        String _assign = this._attributeExtension.assign(attribute_2);
        _builder.append(_assign, "\t\t");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    {
      EList<Attribute> _attributes_3 = it.getAttributes();
      for(final Attribute attribute_3 : _attributes_3) {
        _builder.append("\t");
        String _ter = this._attributeExtension.getter(attribute_3, false);
        _builder.append(_ter, "\t");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.newLine();
      }
    }
    _builder.append("\t");
    _builder.append("public String getName() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return \"AuthUser\";");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    String _sdg = this._commonExtension.sdg();
    _builder.append(_sdg);
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generatePersistenceHandle() {
    StringConcatenation _builder = new StringConcatenation();
    String _copyright = this._commonExtension.copyright();
    _builder.append(_copyright);
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("package de.acegen;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import org.jdbi.v3.core.Handle;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class PersistenceHandle {");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private Handle handle;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public PersistenceHandle(Handle handle) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("super();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.handle = handle;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public Handle getHandle() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return handle;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    String _sdg = this._commonExtension.sdg();
    _builder.append(_sdg);
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generatePersistenceConnection() {
    StringConcatenation _builder = new StringConcatenation();
    String _copyright = this._commonExtension.copyright();
    _builder.append(_copyright);
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("package de.acegen;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("import org.jdbi.v3.core.Jdbi;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class PersistenceConnection {");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private Jdbi jdbi;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public PersistenceConnection(Jdbi jdbi) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("super();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.jdbi = jdbi;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public Jdbi getJdbi() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return jdbi;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    String _sdg = this._commonExtension.sdg();
    _builder.append(_sdg);
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    return _builder;
  }
}
