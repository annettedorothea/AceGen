/**
 * Copyright (c) 2020 Annette Pohl
 * 
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 * 
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 * 
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 */
package de.acegen.templates.es6;

import de.acegen.aceGen.ClientAttribute;
import de.acegen.aceGen.GroupedClientAttribute;
import de.acegen.aceGen.SingleClientAttribute;
import de.acegen.extensions.CommonExtension;
import de.acegen.extensions.es6.Es6Extension;
import java.util.Arrays;
import java.util.List;
import javax.inject.Inject;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.xbase.lib.Conversions;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.StringExtensions;

@SuppressWarnings("all")
public class AceTemplate {
  @Inject
  @Extension
  private Es6Extension _es6Extension;
  
  @Inject
  @Extension
  private CommonExtension _commonExtension;
  
  public CharSequence generateAppUtilsStub() {
    StringConcatenation _builder = new StringConcatenation();
    String _copyright = this._commonExtension.copyright();
    _builder.append(_copyright);
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("import CryptoJS from \"crypto-js\";");
    _builder.newLine();
    _builder.append("import * as AppState from \"../../gen/ace/AppState\";");
    _builder.newLine();
    _builder.append("import * as App from \"./App\";");
    _builder.newLine();
    _builder.append("import Utils from \"../../gen/ace/Utils\";");
    _builder.newLine();
    _builder.newLine();
    _builder.append("export default class AppUtils {");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("static initEventListenersAndActionFactories() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// add EventListenerRegistration.init() of all modules");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// add ActionFactoryRegistrationTodo.init() of all modules");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("static start() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("Utils.loadSettings().then((settings) => {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("Utils.settings = settings;");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("// call init action");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("});");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("static createInitialAppState() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("const initialAppState = {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("};");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("AppState.setInitialAppState(initialAppState);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("static renderNewState() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("App.render(AppState.getAppState());");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("static httpGet(url, authorize) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return new Promise((resolve, reject) => {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("const headers = new Headers();");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("headers.append(\"Content-Type\", \"application/json\");");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("headers.append(\"Accept\", \"application/json\");");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("if (authorize === true) {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("let authorization = AppUtils.basicAuth();");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("if (authorization !== undefined) {");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("headers.append(\"Authorization\", authorization);");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("            ");
    _builder.append("const options = {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("method: \'GET\',");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("headers: headers,");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("mode: \'cors\',");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("cache: \'no-cache\'");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("};");
    _builder.newLine();
    _builder.newLine();
    _builder.append("            ");
    _builder.append("const request = new Request(url, options);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("            ");
    _builder.append("let status;");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("let statusText;");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("fetch(request).then(function (response) {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("status = response.status;");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("statusText = response.statusText;");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("if (status >= 300) {");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("return response.text();");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("} else {");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("return response.json();");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}).then(function (data) {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("if (status >= 300) {");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("const error = {");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("code: status,");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("text: statusText,");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("errorKey: data");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("};");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("reject(error);");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("} else {");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("resolve(data);");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}).catch(function (error) {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("const status = {");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("code: error.name,");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("text: error.message");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("};");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("reject(status);");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("});");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("});");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("static httpChange(methodType, url, authorize, data) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return new Promise((resolve, reject) => {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("const headers = new Headers();");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("headers.append(\"Content-Type\", \"application/json\");");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("headers.append(\"Accept\", \"application/json\");");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("if (authorize === true) {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("let authorization = AppUtils.basicAuth();");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("if (authorization !== undefined) {");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("headers.append(\"Authorization\", authorization);");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("            ");
    _builder.append("const options = {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("method: methodType,");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("headers: headers,");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("mode: \'cors\',");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("cache: \'no-cache\',");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("body: JSON.stringify(data)");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("};");
    _builder.newLine();
    _builder.newLine();
    _builder.append("            ");
    _builder.append("const request = new Request(url, options);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("            ");
    _builder.append("let status;");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("let statusText;");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("fetch(request).then(function (response) {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("status = response.status;");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("statusText = response.statusText;");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("return response.text();");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}).then(function (data) {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("if (status >= 300) {");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("const error = {");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("code: status,");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("text: statusText,");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("errorKey: data");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("};");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("reject(error);");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("} else {");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("resolve(JSON.parse(data));");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}).catch(function (error) {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("const status = {");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("code: error.name,");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("text: error.message");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("};");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("reject(status);");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("});");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("});");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("static httpPost(url, authorize, data) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return AppUtils.httpChange(\"POST\", url, authorize, data);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("static httpPut(url, authorize, data) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return AppUtils.httpChange(\"PUT\", url, authorize, data);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("static httpDelete(url, authorize, data) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return AppUtils.httpChange(\"DELETE\", url, authorize, data);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("static basicAuth() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return \"<your authorization>\";");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("static createUUID() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("let d = new Date().getTime();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return \'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\'.replace(/[xy]/g, function (c) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("const r = (d + Math.random() * 16) % 16 | 0;");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("d = Math.floor(d / 16);");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("return (c === \'x\' ? r : (r & 0x3 | 0x8)).toString(16);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("});");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("static displayUnexpectedError(error) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("console.error(error);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("if (typeof error !== \"object\") {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("error = {");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("errorKey: error");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("};");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("//displayError(error)");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("} else {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("if (error.code === 401) {");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("error.errorKey = \"unauthorized\";");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("//displayErrorAndLogout(error);");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("} else if (error.code === 400) {");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("//displayError(error)");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("} else {");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("error = {");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("errorKey: error.text");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("};");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("//displayError(error)");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("} catch (e) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("console.error(e);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("//displaySaveBugDialog();");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("static deepCopy(object) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return object ? JSON.parse(JSON.stringify(object)) : undefined;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/*       S.D.G.       */");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    String _sdg = this._commonExtension.sdg();
    _builder.append(_sdg);
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generateAppStub() {
    StringConcatenation _builder = new StringConcatenation();
    String _copyright = this._commonExtension.copyright();
    _builder.append(_copyright);
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.newLine();
    _builder.append("import AppUtils from \"./AppUtils\";");
    _builder.newLine();
    _builder.newLine();
    _builder.append("//import Container from \"../web/Container\";");
    _builder.newLine();
    _builder.newLine();
    _builder.append("export * from \"../../gen/ace/Scenario\";");
    _builder.newLine();
    _builder.append("export * from \"../../gen/ace/Bug\";");
    _builder.newLine();
    _builder.newLine();
    _builder.append("const React = require(\'react\');");
    _builder.newLine();
    _builder.append("const ReactDOM = require(\'react-dom\');");
    _builder.newLine();
    _builder.newLine();
    _builder.append("AppUtils.createInitialAppState();");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/*export const container = ReactDOM.render(");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("<Container/>,");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("document.getElementById(\'root\')");
    _builder.newLine();
    _builder.append(");");
    _builder.newLine();
    _builder.newLine();
    _builder.append("export function render(newAppState) {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("container.setState(newAppState);");
    _builder.newLine();
    _builder.append("}*/");
    _builder.newLine();
    _builder.newLine();
    _builder.append("window.onhashchange = () => {");
    _builder.newLine();
    _builder.append("};");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("AppUtils.initEventListenersAndActionFactories();");
    _builder.newLine();
    _builder.newLine();
    _builder.append("AppUtils.start();");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    String _sdg = this._commonExtension.sdg();
    _builder.append(_sdg);
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generateReplayUtilsStub() {
    StringConcatenation _builder = new StringConcatenation();
    String _copyright = this._commonExtension.copyright();
    _builder.append(_copyright);
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("export default class ReplayUtils {");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("static itemStringifyReplacer(key, value) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (key === \'timestamp\') {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("return undefined;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("} else {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("return value;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("static compareItems(expected, actual) {");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("// will return false if just the order of props is different");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("// for a better result use https://www.npmjs.com/package/json-stable-stringify");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return JSON.stringify(expected, ReplayUtils.itemStringifyReplacer) === JSON.stringify(actual, ReplayUtils.itemStringifyReplacer);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("static prepareReplay() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// localStorage.removeItem(\"<key>\");");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("static tearDownReplay() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// localStorage.removeItem(\"<key>\");");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("//window.location.hash = \"#\";");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    String _sdg = this._commonExtension.sdg();
    _builder.append(_sdg);
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generateACEController() {
    StringConcatenation _builder = new StringConcatenation();
    String _copyright = this._commonExtension.copyright();
    _builder.append(_copyright);
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("import AppUtils from \"../../src/app/AppUtils\";");
    _builder.newLine();
    _builder.append("import Utils from \"./Utils\";");
    _builder.newLine();
    _builder.append("import * as AppState from \"./AppState\";");
    _builder.newLine();
    _builder.newLine();
    _builder.append("export default class ACEController {");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("static init() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("ACEController.timeline = [];");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("ACEController.listeners = {};");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("ACEController.factories = {};");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("ACEController.registerListener(\'TriggerAction\', ACEController.triggerAction);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("ACEController.actionIsProcessing = false;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("ACEController.actionQueue = [];");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("ACEController.UI = 1;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("ACEController.REPLAY = 2;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("ACEController.E2E = 3;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("ACEController.execution = ACEController.UI;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("ACEController.actualTimeline = [];");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("ACEController.expectedTimeline = [];");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("static registerListener(eventName, listener) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (!eventName.trim()) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("throw new Error(\'cannot register listener for empty eventName\');");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (!listener) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("throw new Error(\'cannot register undefined listener for event \' + eventName);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("let listenersForEventName;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (ACEController.listeners[eventName] === undefined) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("ACEController.listeners[eventName] = [];");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("listenersForEventName = ACEController.listeners[eventName];");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("listenersForEventName.push(listener);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("static registerFactory(actionName, factory) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (!actionName.trim()) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("throw new Error(\'cannot register factory for empty actionName\');");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (!factory) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("throw new Error(\'cannot register undefined factory for action \' + actionName);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("ACEController.factories[actionName] = factory;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("static addItemToTimeLine(item) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("let timestamp = new Date();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("item.timestamp = timestamp.getTime();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if (ACEController.execution === ACEController.UI && Utils.isDevelopment() && Utils.getTimelineSize() > 0) {");
    _builder.newLine();
    _builder.append("\t\t    ");
    _builder.append("ACEController.timeline.push(AppUtils.deepCopy(item));");
    _builder.newLine();
    _builder.append("\t\t    ");
    _builder.append("if (ACEController.timeline.length > Utils.getTimelineSize()) {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("ACEController.timeline.shift();");
    _builder.newLine();
    _builder.append("\t\t        ");
    _builder.append("while (ACEController.timeline.length > 0 && ACEController.timeline.length > 0 && !ACEController.timeline[0].appState) {");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("ACEController.timeline.shift();");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("} else if (ACEController.execution !== ACEController.UI) {");
    _builder.newLine();
    _builder.append("\t\t    ");
    _builder.append("ACEController.actualTimeline.push(AppUtils.deepCopy(item));");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("static addActionToQueue(action) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (ACEController.execution === ACEController.UI) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("ACEController.actionQueue.push(action);");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("if (ACEController.actionIsProcessing === false) {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("ACEController.actionIsProcessing = true;");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("ACEController.applyNextActions();");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("static applyNextActions() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("let action = ACEController.actionQueue.shift();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (action) {");
    _builder.newLine();
    _builder.append("\t    \t");
    _builder.append("ACEController.addItemToTimeLine({appState: AppState.getAppState()});");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if (action.asynchronous) {");
    _builder.newLine();
    _builder.append("\t\t\t    ");
    _builder.append("action.applyAction().then(() => {");
    _builder.newLine();
    _builder.append("\t\t\t    \t");
    _builder.append("ACEController.callApplyNextActions();");
    _builder.newLine();
    _builder.append("\t\t\t    ");
    _builder.append("}, (error) => {");
    _builder.newLine();
    _builder.append("\t\t\t        ");
    _builder.append("AppUtils.displayUnexpectedError(error);");
    _builder.newLine();
    _builder.append("\t\t\t    \t");
    _builder.append("ACEController.callApplyNextActions();");
    _builder.newLine();
    _builder.append("\t\t\t    ");
    _builder.append("});");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("} else {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("action.applyAction();");
    _builder.newLine();
    _builder.append("\t\t\t    \t");
    _builder.append("ACEController.callApplyNextActions();");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("} catch(error) {");
    _builder.newLine();
    _builder.append("\t\t\t        ");
    _builder.append("AppUtils.displayUnexpectedError(error);");
    _builder.newLine();
    _builder.append("\t\t\t    \t");
    _builder.append("ACEController.callApplyNextActions();");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("} else if (action === undefined) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("ACEController.actionIsProcessing = false;");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("if (ACEController.execution !== ACEController.UI) {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("ACEController.timeline = [];");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("ACEController.actionIsProcessing = false;");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("ACEController.actionQueue = [];");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("ACEController.execution = ACEController.UI;");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("Utils.finishReplay();");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("AppUtils.start();");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("static callApplyNextActions() {");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("if (ACEController.execution === ACEController.UI) {");
    _builder.newLine();
    _builder.append("    \t\t");
    _builder.append("ACEController.applyNextActions();");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("} else {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("setTimeout(ACEController.applyNextActions, ACEController.pauseInMillis);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("static triggerAction(action) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("ACEController.addActionToQueue(action);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("static startReplay(level, pauseInMillis) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("ACEController.actualTimeline = [];");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("ACEController.execution = level;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("ACEController.pauseInMillis = pauseInMillis;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("ACEController.readTimelineAndCreateReplayActions();");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("static readTimelineAndCreateReplayActions() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("let actions = [];");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("let appStateWasSet = false;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("for (let i = 0; i < ACEController.expectedTimeline.length; i++) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("let item = ACEController.expectedTimeline[i];");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("if (item.action) {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("const actionData = item.action.actionData;");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("let action = ACEController.factories[item.action.actionName](actionData);");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("action.actionData = actionData;");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("actions.push(action);");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if (item.appState && !appStateWasSet) {");
    _builder.newLine();
    _builder.append("\t\t\t    ");
    _builder.append("AppState.setInitialAppState(item.appState);");
    _builder.newLine();
    _builder.append("\t\t\t    ");
    _builder.append("appStateWasSet = true;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("            ");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("ACEController.actionQueue = actions;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("ACEController.applyNextActions();");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("static getCommandByUuid(uuid) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("for (let i = 0; i < ACEController.expectedTimeline.length; i++) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("let item = ACEController.expectedTimeline[i];");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("if (item.command && item.command.commandData.uuid === uuid) {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("return item.command;");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("ACEController.init();");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    String _sdg = this._commonExtension.sdg();
    _builder.append(_sdg);
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generateScenario() {
    StringConcatenation _builder = new StringConcatenation();
    String _copyright = this._commonExtension.copyright();
    _builder.append(_copyright);
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("import AppUtils from \"../../src/app/AppUtils\";");
    _builder.newLine();
    _builder.append("import ReplayUtils from \"../../src/app/ReplayUtils\";");
    _builder.newLine();
    _builder.append("import ACEController from \"./ACEController\";");
    _builder.newLine();
    _builder.append("import Utils from \"./Utils\";");
    _builder.newLine();
    _builder.newLine();
    _builder.append("export function runScenario(scenarioId, executor = \"unknown\", pauseInMillis = 0) {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if (Utils.isDevelopment() === false) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("console.error(\"runScenario is only available during development\");");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("} else {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("Utils.loadScenario(scenarioId).then((scenario) => {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("ReplayUtils.scenarioConfig = {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("executor,");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("scenarioId,");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("saveScenarioResult: true");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("};");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("ACEController.expectedTimeline = JSON.parse(scenario.timeline);");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("Utils.replayE2E(pauseInMillis, scenario.serverTimeline);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("});");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("export function runAllScenarios(executor = \"unknown\", pauseInMillis = 0) {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if (Utils.isDevelopment() === false) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("console.error(\"runAllScenarios is only available during development\");");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("} else {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("Utils.loadNextScenario(null).then((scenario) => {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("if (scenario) {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("ReplayUtils.scenarioConfig = {");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("executor,");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("scenarioId: scenario.id,");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("saveScenarioResult: true,");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("runAllScenarios: true,");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("pauseInMillis");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("};");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("ACEController.expectedTimeline = JSON.parse(scenario.timeline);");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("Utils.replayE2E(pauseInMillis, scenario.serverTimeline);");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("});");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("export function saveScenario(description, creator) {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if (Utils.isDevelopment() === false) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("console.error(\"saveScenario is only available during development\");");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("} else {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("Utils.saveScenario(description, creator).then((id) => {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("console.log(`saved scenario with id ${id}`);");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("ACEController.timeline = [];");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("AppUtils.start();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("});");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    String _sdg = this._commonExtension.sdg();
    _builder.append(_sdg);
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generateBug() {
    StringConcatenation _builder = new StringConcatenation();
    String _copyright = this._commonExtension.copyright();
    _builder.append(_copyright);
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("import ReplayUtils from \"../../src/app/ReplayUtils\";");
    _builder.newLine();
    _builder.append("import ACEController from \"./ACEController\";");
    _builder.newLine();
    _builder.append("import Utils from \"./Utils\";");
    _builder.newLine();
    _builder.newLine();
    _builder.append("export function runBug(bugId, pauseInMillis = 0) {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("Utils.loadBug(bugId).then((scenario) => {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("ReplayUtils.scenarioConfig = {};");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("ACEController.expectedTimeline = JSON.parse(scenario.timeline);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("Utils.replayServerless(pauseInMillis);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("});");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("export function saveBug(description, creator) {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("Utils.saveBug(description, creator).then((id) => {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("console.log(`saved bug with id ${id}`);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("});");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    String _sdg = this._commonExtension.sdg();
    _builder.append(_sdg);
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generateTriggerAction() {
    StringConcatenation _builder = new StringConcatenation();
    String _copyright = this._commonExtension.copyright();
    _builder.append(_copyright);
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("import Event from \"./Event\";");
    _builder.newLine();
    _builder.append("import ACEController from \"./ACEController\";");
    _builder.newLine();
    _builder.newLine();
    _builder.append("export default class TriggerAction extends Event {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("constructor(action) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("super(action, \'TriggerAction\');");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("this.eventData = action;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("publish() {");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("ACEController.addItemToTimeLine({event: this});");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("this.notifyListeners();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("notifyListeners() {");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("let i, listener;");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("if (this.eventName !== undefined) {");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("const listenersForEvent = ACEController.listeners[this.eventName];");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("if (listenersForEvent !== undefined) {");
    _builder.newLine();
    _builder.append("\t            ");
    _builder.append("for (i = 0; i < listenersForEvent.length; i += 1) {");
    _builder.newLine();
    _builder.append("\t                ");
    _builder.append("listener = listenersForEvent[i];");
    _builder.newLine();
    _builder.append("\t                ");
    _builder.append("listener(this.eventData);");
    _builder.newLine();
    _builder.append("\t            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    String _sdg = this._commonExtension.sdg();
    _builder.append(_sdg);
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generateUtils() {
    StringConcatenation _builder = new StringConcatenation();
    String _copyright = this._commonExtension.copyright();
    _builder.append(_copyright);
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("import AppUtils from \"../../src/app/AppUtils\";");
    _builder.newLine();
    _builder.append("import ACEController from \"./ACEController\";");
    _builder.newLine();
    _builder.append("import ReplayUtils from \"../../src/app/ReplayUtils\";");
    _builder.newLine();
    _builder.newLine();
    _builder.append("export default class Utils {");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("static getServerInfo() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return AppUtils.httpGet(Utils.getRootPath() + \'/server/info\');");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("static loadSettings() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return new Promise((resolve, reject) => {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("const headers = new Headers();");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("headers.append(\"Content-Type\", \"application/json\");");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("headers.append(\"Accept\", \"application/json\");");
    _builder.newLine();
    _builder.newLine();
    _builder.append("            ");
    _builder.append("const options = {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("method: \'GET\',");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("headers: headers,");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("mode: \'cors\',");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("cache: \'no-cache\'");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("};");
    _builder.newLine();
    _builder.newLine();
    _builder.append("            ");
    _builder.append("const request = new Request(\"settings.json\", options);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("            ");
    _builder.append("fetch(request).then(function (response) {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("return response.json();");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}).then(function (data) {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("resolve(data);");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}).catch(function (error) {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("reject(error);");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("});");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("});");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("static getClientVersion() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return Utils.settings ? Utils.settings.clientVersion : \"\";");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("static isDevelopment() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return Utils.settings ? Utils.settings.development : false;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("static getAceScenariosApiKey() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return Utils.settings ? Utils.settings.aceScenariosApiKey : \"\";");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("static getAceScenariosBaseUrl() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return Utils.settings ? Utils.settings.aceScenariosBaseUrl : \"\";");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("static getRootPath() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return Utils.settings ? (ACEController.execution !== ACEController.E2E ? Utils.settings.rootPath :  Utils.settings.replayRootPath) : \"\";");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("static getTimelineSize() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return Utils.settings ? Utils.settings.timelineSize : 0;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("static saveBug(description, creator) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return Utils.getServerInfo().then((serverInfo) => {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("const browser = Utils.getBrowserInfo();");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("const uuid = AppUtils.createUUID();");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("const data = {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("description,");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("timeline: JSON.stringify(ACEController.timeline),");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("creator,");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("clientVersion: Utils.getClientVersion(),");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("device: browser.name + \" \" + browser.version,");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("uuid,");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("apiKey: Utils.getAceScenariosApiKey(),");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("serverVersion: serverInfo.serverVersion");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("};");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("return AppUtils.httpPost(Utils.getAceScenariosBaseUrl() + \'api/bugs/create\', false, data).then(() => {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("return new Promise((resolve) => {");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("resolve(uuid);");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("});");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("});");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("});");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("static loadBug(id) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return AppUtils.httpGet(Utils.getAceScenariosBaseUrl() + `api/bugs/get?id=${id}&apiKey=${Utils.getAceScenariosApiKey()}&uuid=${AppUtils.createUUID()}`, false);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("static saveScenario(description, creator) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return AppUtils.httpGet(Utils.getRootPath() + \'/e2e/timeline\').then((serverTimeline) => {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("return Utils.getServerInfo().then((serverInfo) => {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("const browser = Utils.getBrowserInfo();");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("const uuid = AppUtils.createUUID();");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("const data = {");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("description,");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("timeline: JSON.stringify(ACEController.timeline),");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("serverTimeline: JSON.stringify(serverTimeline),");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("creator,");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("clientVersion: Utils.getClientVersion(),");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("device: browser.name + \" \" + browser.version,");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("uuid,");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("apiKey: Utils.getAceScenariosApiKey(),");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("serverVersion: serverInfo.serverVersion");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("};");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("return AppUtils.httpPost(Utils.getAceScenariosBaseUrl() + \'api/scenarios/create\', false, data).then(() => {");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("return new Promise((resolve) => {");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("resolve(uuid);");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("});");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("});");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("});");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("});");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("static saveScenarioResult(normalized, result) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return AppUtils.httpGet(\'replay/e2e/timeline\').then((serverTimeline) => {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("return Utils.getServerInfo().then((serverInfo) => {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("const browser = Utils.getBrowserInfo();");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("const uuid = AppUtils.createUUID();");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("const data = {");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("scenarioId: ReplayUtils.scenarioConfig.scenarioId,");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("timeline: JSON.stringify(normalized),");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("executor: ReplayUtils.scenarioConfig.executor,");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("result,");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("uuid,");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("clientVersion: Utils.getClientVersion(),");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("device: browser.name + \" \" + browser.version,");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("apiKey: Utils.getAceScenariosApiKey(),");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("serverVersion: serverInfo.serverVersion,");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("serverTimeline: JSON.stringify(serverTimeline)");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("};");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("return AppUtils.httpPost(Utils.getAceScenariosBaseUrl() + \'api/results/create\', false, data);");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("});");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("});");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("static loadScenario(id) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return AppUtils.httpGet(Utils.getAceScenariosBaseUrl() + `api/scenarios/get?id=${id}&apiKey=${Utils.getAceScenariosApiKey()}&uuid=${AppUtils.createUUID()}`, false);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("static loadNextScenario(lastId) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return AppUtils.httpGet(Utils.getAceScenariosBaseUrl() + `api/scenarios/next?lastId=${lastId}&apiKey=${Utils.getAceScenariosApiKey()}&uuid=${AppUtils.createUUID()}`, false);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("static getBrowserInfo() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("let ua = navigator.userAgent, tem,");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("M = ua.match(/(opera|chrome|safari|firefox|msie|trident(?=\\/))\\/?\\s*(\\d+)/i) || [];");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (/trident/i.test(M[1])) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("tem = /\\brv[ :]+(\\d+)/g.exec(ua) || [];");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("return {name: \'IE \', version: (tem[1] || \'\')};");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (M[1] === \'Chrome\') {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("tem = ua.match(/\\bOPR\\/(\\d+)/);");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("if (tem != null) {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("return {name: \'Opera\', version: tem[1]};");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("M = M[2] ? [M[1], M[2]] : [navigator.appName, navigator.appVersion, \'-?\'];");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if ((tem = ua.match(/version\\/(\\d+)/i)) != null) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("M.splice(1, 1, tem[1]);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("name: M[0],");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("version: M[1]");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("};");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("static prepareAction(uuid) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (ACEController.execution === ACEController.E2E) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("return AppUtils.httpPut(\'replay/e2e/prepare?uuid=\' + uuid);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("} else {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("return new Promise((resolve) => {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("resolve();");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("});");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("static replayServerless(pauseInMillis) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("ReplayUtils.prepareReplay();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("AppUtils.createInitialAppState();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("ACEController.startReplay(ACEController.REPLAY, pauseInMillis)");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("static replayE2E(pauseInMillis, serverTimeline) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("ReplayUtils.prepareReplay();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("AppUtils.createInitialAppState();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("AppUtils.httpPut(\'replay/e2e/start\', false, JSON.parse(serverTimeline)).then(() => {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("ACEController.startReplay(ACEController.E2E, pauseInMillis)");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("});");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("static normalizeTimelines(expected, actual) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("let normalizedExpected = [];");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("let normalizedActual = [];");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("let expectedIndex = 0;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("let actualIndex = 0;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("while (expectedIndex < expected.length) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("if (actualIndex >= actual.length) {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("normalizedExpected.push(expected[expectedIndex]);");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("normalizedActual.push({});");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("expectedIndex++;");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("} else if (expected[expectedIndex].action && actual[actualIndex].action || !expected[expectedIndex].action && !actual[actualIndex].action) {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("normalizedExpected.push(expected[expectedIndex]);");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("normalizedActual.push(actual[actualIndex]);");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("expectedIndex++;");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("actualIndex++;");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("} else if (expected[expectedIndex].action && !actual[actualIndex].action) {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("normalizedExpected.push({});");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("normalizedActual.push(actual[actualIndex]);");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("actualIndex++;");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("} else if (!expected[expectedIndex].action && actual[actualIndex].action) {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("normalizedExpected.push(expected[expectedIndex]);");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("normalizedActual.push({});");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("expectedIndex++;");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("while (actualIndex < actual.length) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("normalizedExpected.push({});");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("normalizedActual.push(actual[actualIndex]);");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("actualIndex++;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("expected: normalizedExpected,");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("actual: normalizedActual");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("};");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("static finishReplay() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("console.log(\"replay finished\");");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("ReplayUtils.tearDownReplay();");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("AppUtils.createInitialAppState();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (ReplayUtils.scenarioConfig.saveScenarioResult === true) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("const normalized = Utils.normalizeTimelines(ACEController.expectedTimeline, ACEController.actualTimeline);");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("const result = ReplayUtils.compareItems(normalized.expected, normalized.actual);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("            ");
    _builder.append("if (normalized.expected && normalized.actual) {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("const size = normalized.expected.length > normalized.actual.length ? normalized.expected.length : normalized.actual.length;");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("for (let i = 0; i < size; i++) {");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("const expected = normalized.expected[i] ? normalized.expected[i] : null;");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("const actual = normalized.actual[i] ? normalized.actual[i] : null;");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("const result = ReplayUtils.compareItems(expected, actual);");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("const item = {");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("expected,");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("actual,");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("result");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("};");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("if (result === true) {");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("console.log(\"%cSUCCESS expected \" + Utils.name(item.expected) + \" actual \" + Utils.name(item.actual), \"color: green;\", item);");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("} else {");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("console.log(\"%cFAILURE expected \" + Utils.name(item.expected) + \" actual \" + Utils.name(item.actual), \"color: red;\", item);");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("if (result === true) {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("console.log(\"%c===============\", \"color: green;\");");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("console.log(\"%c=== SCENARIO \" + ReplayUtils.scenarioConfig.scenarioId + \" SUCCESS ===\", \"color: green;\");");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("console.log(\"%c===============\", \"color: green;\");");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("} else {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("console.log(\"%c===============\", \"color: red;\");");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("console.log(\"%c=== SCENARIO \" + ReplayUtils.scenarioConfig.scenarioId + \" FAILURE ===\", \"color: red;\");");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("console.log(\"%c===============\", \"color: red;\");");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("Utils.saveScenarioResult(normalized, result);");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("AppUtils.httpPut(\'replay/e2e/stop\').then(() => {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("if (ReplayUtils.scenarioConfig.runAllScenarios === true) {");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("Utils.loadNextScenario(ReplayUtils.scenarioConfig.scenarioId).then((scenario) => {");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("if (scenario.id) {");
    _builder.newLine();
    _builder.append("                            ");
    _builder.append("ReplayUtils.scenarioConfig.scenarioId = scenario.id;");
    _builder.newLine();
    _builder.append("                            ");
    _builder.append("ACEController.expectedTimeline = JSON.parse(scenario.timeline);");
    _builder.newLine();
    _builder.append("                            ");
    _builder.append("Utils.replayE2E(ReplayUtils.scenarioConfig.pauseInMillis, scenario.serverTimeline);");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("});");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("});");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("static name(item) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (item.action) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("return item.action.actionName;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (item.command) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("return item.command.commandName;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (item.event) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("return item.event.eventName;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return \"AppState\";");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    String _sdg = this._commonExtension.sdg();
    _builder.append(_sdg);
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    return _builder;
  }
  
  public String generateAppState(final List<ClientAttribute> attributes, final String prefix) {
    StringConcatenation _builder = new StringConcatenation();
    String _copyright = this._commonExtension.copyright();
    _builder.append(_copyright);
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("import AppUtils from \"../../src/app/AppUtils\";");
    _builder.newLine();
    _builder.newLine();
    _builder.append("export let appState;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("export function getAppState() {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("return AppUtils.deepCopy(appState);");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("export function setInitialAppState(initialAppState) {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("appState = AppUtils.deepCopy(initialAppState);");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    {
      for(final ClientAttribute attribute : attributes) {
        String _generateAppStateRec = this.generateAppStateRec(attribute);
        _builder.append(_generateAppStateRec);
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder.toString();
  }
  
  private CharSequence getStateFunction(final SingleClientAttribute it) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("export function get_");
    String _functionName = this._es6Extension.functionName(it);
    _builder.append(_functionName);
    _builder.append("() {");
    _builder.newLineIfNotEmpty();
    {
      boolean _isHash = it.isHash();
      if (_isHash) {
        _builder.append("\t");
        _builder.append("return location.hash;");
        _builder.newLine();
      } else {
        boolean _isStorage = it.isStorage();
        if (_isStorage) {
          _builder.append("\t");
          _builder.append("return localStorage.getItem(\"");
          String _name = it.getName();
          _builder.append(_name, "\t");
          _builder.append("\");");
          _builder.newLineIfNotEmpty();
        } else {
          {
            List<ClientAttribute> _allParentAttributes = this._es6Extension.allParentAttributes(it);
            for(final ClientAttribute attribute : _allParentAttributes) {
              _builder.append("\t");
              _builder.append("if (!");
              String _elementPath = this._es6Extension.elementPath(attribute);
              _builder.append(_elementPath, "\t");
              _builder.append(") {");
              _builder.newLineIfNotEmpty();
              _builder.append("\t");
              _builder.append("\t");
              _builder.append("return undefined;");
              _builder.newLine();
              _builder.append("\t");
              _builder.append("}");
              _builder.newLine();
              {
                EObject _eContainer = attribute.eContainer();
                if ((_eContainer instanceof GroupedClientAttribute)) {
                  _builder.append("\t");
                  _builder.append("if (");
                  String _elementPath_1 = this._es6Extension.elementPath(attribute);
                  _builder.append(_elementPath_1, "\t");
                  _builder.append(".is");
                  String _firstUpper = StringExtensions.toFirstUpper(attribute.getName());
                  _builder.append(_firstUpper, "\t");
                  _builder.append(" !== true) {");
                  _builder.newLineIfNotEmpty();
                  _builder.append("\t");
                  _builder.append("\t");
                  _builder.append("return undefined;");
                  _builder.newLine();
                  _builder.append("\t");
                  _builder.append("}");
                  _builder.newLine();
                }
              }
            }
          }
          {
            if (((it.getAttributes() == null) || (((Object[])Conversions.unwrapArray(it.getAttributes(), Object.class)).length == 0))) {
              _builder.append("\t");
              _builder.append("return ");
              String _elementPath_2 = this._es6Extension.elementPath(it);
              _builder.append(_elementPath_2, "\t");
              _builder.append(";");
              _builder.newLineIfNotEmpty();
            } else {
              {
                EObject _eContainer_1 = it.eContainer();
                if ((_eContainer_1 instanceof GroupedClientAttribute)) {
                  _builder.append("\t");
                  _builder.append("if (");
                  String _elementPath_3 = this._es6Extension.elementPath(it);
                  _builder.append(_elementPath_3, "\t");
                  _builder.append(" && ");
                  String _elementPath_4 = this._es6Extension.elementPath(it);
                  _builder.append(_elementPath_4, "\t");
                  _builder.append(".is");
                  String _firstUpper_1 = StringExtensions.toFirstUpper(it.getName());
                  _builder.append(_firstUpper_1, "\t");
                  _builder.append(" === true) {");
                  _builder.newLineIfNotEmpty();
                  _builder.append("\t");
                  _builder.append("\t");
                  _builder.append("return AppUtils.deepCopy(");
                  String _elementPath_5 = this._es6Extension.elementPath(it);
                  _builder.append(_elementPath_5, "\t\t");
                  _builder.append(");");
                  _builder.newLineIfNotEmpty();
                  _builder.append("\t");
                  _builder.append("}");
                  _builder.newLine();
                  _builder.append("\t");
                  _builder.append("return undefined;");
                  _builder.newLine();
                } else {
                  _builder.append("\t");
                  _builder.append("if (!");
                  String _elementPath_6 = this._es6Extension.elementPath(it);
                  _builder.append(_elementPath_6, "\t");
                  _builder.append(") {");
                  _builder.newLineIfNotEmpty();
                  _builder.append("\t");
                  _builder.append("\t");
                  _builder.append("return undefined;");
                  _builder.newLine();
                  _builder.append("\t");
                  _builder.append("}");
                  _builder.newLine();
                  _builder.append("\t");
                  _builder.append("return AppUtils.deepCopy(");
                  String _elementPath_7 = this._es6Extension.elementPath(it);
                  _builder.append(_elementPath_7, "\t");
                  _builder.append(");");
                  _builder.newLineIfNotEmpty();
                }
              }
            }
          }
        }
      }
    }
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    return _builder;
  }
  
  private CharSequence setStateFunction(final SingleClientAttribute it) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("export function set_");
    String _functionName = this._es6Extension.functionName(it);
    _builder.append(_functionName);
    _builder.append("(eventData) {");
    _builder.newLineIfNotEmpty();
    {
      boolean _isHash = it.isHash();
      if (_isHash) {
        _builder.append("\t");
        _builder.append("location.hash = eventData.");
        String _name = it.getName();
        _builder.append(_name, "\t");
        _builder.append(";");
        _builder.newLineIfNotEmpty();
      } else {
        boolean _isStorage = it.isStorage();
        if (_isStorage) {
          _builder.append("\t");
          _builder.append("localStorage.setItem(\"");
          String _name_1 = it.getName();
          _builder.append(_name_1, "\t");
          _builder.append("\", eventData.");
          String _name_2 = it.getName();
          _builder.append(_name_2, "\t");
          _builder.append(");");
          _builder.newLineIfNotEmpty();
        } else {
          {
            List<ClientAttribute> _allParentAttributes = this._es6Extension.allParentAttributes(it);
            for(final ClientAttribute attribute : _allParentAttributes) {
              {
                EObject _eContainer = attribute.eContainer();
                if ((_eContainer instanceof GroupedClientAttribute)) {
                  _builder.append("\t");
                  _builder.append("if (!");
                  String _elementPath = this._es6Extension.elementPath(attribute);
                  _builder.append(_elementPath, "\t");
                  _builder.append(" || ");
                  String _elementPath_1 = this._es6Extension.elementPath(attribute);
                  _builder.append(_elementPath_1, "\t");
                  _builder.append(".is");
                  String _firstUpper = StringExtensions.toFirstUpper(attribute.getName());
                  _builder.append(_firstUpper, "\t");
                  _builder.append(" !== true) {");
                  _builder.newLineIfNotEmpty();
                  _builder.append("\t");
                  _builder.append("\t");
                  String _elementPath_2 = this._es6Extension.elementPath(attribute);
                  _builder.append(_elementPath_2, "\t\t");
                  _builder.append(" = {");
                  _builder.newLineIfNotEmpty();
                  _builder.append("\t");
                  _builder.append("\t\t");
                  _builder.append("is");
                  String _firstUpper_1 = StringExtensions.toFirstUpper(attribute.getName());
                  _builder.append(_firstUpper_1, "\t\t\t");
                  _builder.append(" : true");
                  _builder.newLineIfNotEmpty();
                  _builder.append("\t");
                  _builder.append("\t");
                  _builder.append("};");
                  _builder.newLine();
                  _builder.append("\t");
                  _builder.append("}");
                  _builder.newLine();
                } else {
                  _builder.append("\t");
                  _builder.append("if (!");
                  String _elementPath_3 = this._es6Extension.elementPath(attribute);
                  _builder.append(_elementPath_3, "\t");
                  _builder.append(") {");
                  _builder.newLineIfNotEmpty();
                  _builder.append("\t");
                  _builder.append("\t");
                  String _elementPath_4 = this._es6Extension.elementPath(attribute);
                  _builder.append(_elementPath_4, "\t\t");
                  _builder.append(" = {};");
                  _builder.newLineIfNotEmpty();
                  _builder.append("\t");
                  _builder.append("}");
                  _builder.newLine();
                }
              }
            }
          }
          {
            EObject _eContainer_1 = it.eContainer();
            if ((_eContainer_1 instanceof GroupedClientAttribute)) {
              _builder.append("\t");
              _builder.append("if (!!eventData.");
              String _name_3 = it.getName();
              _builder.append(_name_3, "\t");
              _builder.append(") {");
              _builder.newLineIfNotEmpty();
              _builder.append("\t");
              _builder.append("\t");
              String _elementPath_5 = this._es6Extension.elementPath(it);
              _builder.append(_elementPath_5, "\t\t");
              _builder.append(" = eventData.");
              String _name_4 = it.getName();
              _builder.append(_name_4, "\t\t");
              _builder.append(";");
              _builder.newLineIfNotEmpty();
              _builder.append("\t");
              _builder.append("\t");
              String _elementPath_6 = this._es6Extension.elementPath(it);
              _builder.append(_elementPath_6, "\t\t");
              _builder.append(".is");
              String _firstUpper_2 = StringExtensions.toFirstUpper(it.getName());
              _builder.append(_firstUpper_2, "\t\t");
              _builder.append(" = true;");
              _builder.newLineIfNotEmpty();
              _builder.append("\t");
              _builder.append("} else {");
              _builder.newLine();
              _builder.append("\t");
              _builder.append("\t");
              String _elementPath_7 = this._es6Extension.elementPath(it);
              _builder.append(_elementPath_7, "\t\t");
              _builder.append(" = {");
              _builder.newLineIfNotEmpty();
              _builder.append("\t");
              _builder.append("\t\t");
              _builder.append("is");
              String _firstUpper_3 = StringExtensions.toFirstUpper(it.getName());
              _builder.append(_firstUpper_3, "\t\t\t");
              _builder.append(" : true");
              _builder.newLineIfNotEmpty();
              _builder.append("\t");
              _builder.append("\t");
              _builder.append("};");
              _builder.newLine();
              _builder.append("\t");
              _builder.append("}");
              _builder.newLine();
            } else {
              _builder.append("\t");
              String _elementPath_8 = this._es6Extension.elementPath(it);
              _builder.append(_elementPath_8, "\t");
              _builder.append(" = eventData.");
              String _name_5 = it.getName();
              _builder.append(_name_5, "\t");
              _builder.append(";");
              _builder.newLineIfNotEmpty();
            }
          }
        }
      }
    }
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    return _builder;
  }
  
  private CharSequence resetStateFunction(final SingleClientAttribute it) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("export function reset_");
    String _functionName = this._es6Extension.functionName(it);
    _builder.append(_functionName);
    _builder.append("() {");
    _builder.newLineIfNotEmpty();
    {
      boolean _isHash = it.isHash();
      if (_isHash) {
        _builder.append("\t");
        _builder.append("location.hash = \"\";");
        _builder.newLine();
      } else {
        boolean _isStorage = it.isStorage();
        if (_isStorage) {
          _builder.append("\t");
          _builder.append("localStorage.removeItem(\"");
          String _name = it.getName();
          _builder.append(_name, "\t");
          _builder.append("\");");
          _builder.newLineIfNotEmpty();
        } else {
          {
            List<ClientAttribute> _allParentAttributes = this._es6Extension.allParentAttributes(it);
            for(final ClientAttribute attribute : _allParentAttributes) {
              _builder.append("\t");
              _builder.append("if (!");
              String _elementPath = this._es6Extension.elementPath(attribute);
              _builder.append(_elementPath, "\t");
              _builder.append(") {");
              _builder.newLineIfNotEmpty();
              _builder.append("\t");
              _builder.append("\t");
              _builder.append("return;");
              _builder.newLine();
              _builder.append("\t");
              _builder.append("}");
              _builder.newLine();
            }
          }
          _builder.append("\t");
          String _elementPath_1 = this._es6Extension.elementPath(it);
          _builder.append(_elementPath_1, "\t");
          _builder.append(" = undefined;");
          _builder.newLineIfNotEmpty();
        }
      }
    }
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    return _builder;
  }
  
  private CharSequence mergeStateFunction(final SingleClientAttribute it) {
    StringConcatenation _builder = new StringConcatenation();
    {
      if (((((it.getAttributes() != null) && (((Object[])Conversions.unwrapArray(it.getAttributes(), Object.class)).length > 0)) && (!it.isHash())) && (!it.isStorage()))) {
        _builder.append("export function merge_");
        String _functionName = this._es6Extension.functionName(it);
        _builder.append(_functionName);
        _builder.append("(eventData) {");
        _builder.newLineIfNotEmpty();
        {
          List<ClientAttribute> _allParentAttributes = this._es6Extension.allParentAttributes(it);
          for(final ClientAttribute attr : _allParentAttributes) {
            _builder.append("\t");
            _builder.append("if (!");
            String _elementPath = this._es6Extension.elementPath(attr);
            _builder.append(_elementPath, "\t");
            _builder.append(") {");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("\t");
            String _elementPath_1 = this._es6Extension.elementPath(attr);
            _builder.append(_elementPath_1, "\t\t");
            _builder.append(" = {};");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("}");
            _builder.newLine();
          }
        }
        _builder.append("\t");
        _builder.append("if (!");
        String _elementPath_2 = this._es6Extension.elementPath(it);
        _builder.append(_elementPath_2, "\t");
        _builder.append(") {");
        _builder.newLineIfNotEmpty();
        {
          EObject _eContainer = it.eContainer();
          if ((_eContainer instanceof GroupedClientAttribute)) {
            _builder.append("\t\t");
            String _elementPath_3 = this._es6Extension.elementPath(it);
            _builder.append(_elementPath_3, "\t\t");
            _builder.append(" = {");
            _builder.newLineIfNotEmpty();
            _builder.append("\t\t");
            _builder.append("\t");
            _builder.append("is");
            String _firstUpper = StringExtensions.toFirstUpper(it.getName());
            _builder.append(_firstUpper, "\t\t\t");
            _builder.append(" : true");
            _builder.newLineIfNotEmpty();
            _builder.append("\t\t");
            _builder.append("};");
            _builder.newLine();
          } else {
            _builder.append("\t\t");
            String _elementPath_4 = this._es6Extension.elementPath(it);
            _builder.append(_elementPath_4, "\t\t");
            _builder.append(" = {};");
            _builder.newLineIfNotEmpty();
          }
        }
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
        {
          EList<ClientAttribute> _attributes = it.getAttributes();
          for(final ClientAttribute attribute : _attributes) {
            {
              if ((attribute instanceof SingleClientAttribute)) {
                _builder.append("\t");
                _builder.append("if (eventData.");
                String _name = ((SingleClientAttribute)attribute).getName();
                _builder.append(_name, "\t");
                _builder.append(" !== undefined) {");
                _builder.newLineIfNotEmpty();
                _builder.append("\t");
                _builder.append("\t");
                String _elementPath_5 = this._es6Extension.elementPath(attribute);
                _builder.append(_elementPath_5, "\t\t");
                _builder.append(" = eventData.");
                String _name_1 = ((SingleClientAttribute)attribute).getName();
                _builder.append(_name_1, "\t\t");
                _builder.append(";");
                _builder.newLineIfNotEmpty();
                _builder.append("\t");
                _builder.append("}");
                _builder.newLine();
              }
            }
          }
        }
        _builder.append("}");
        _builder.newLine();
        _builder.newLine();
      }
    }
    return _builder;
  }
  
  private CharSequence childAttributes(final SingleClientAttribute it) {
    StringConcatenation _builder = new StringConcatenation();
    {
      if (((((it.getAttributes() != null) && (!it.isList())) && (!it.isHash())) && (!it.isStorage()))) {
        {
          EList<ClientAttribute> _attributes = it.getAttributes();
          for(final ClientAttribute attribute : _attributes) {
            String _generateAppStateRec = this.generateAppStateRec(attribute);
            _builder.append(_generateAppStateRec);
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    return _builder;
  }
  
  protected String _generateAppStateRec(final SingleClientAttribute it) {
    StringConcatenation _builder = new StringConcatenation();
    CharSequence _stateFunction = this.getStateFunction(it);
    _builder.append(_stateFunction);
    _builder.newLineIfNotEmpty();
    CharSequence _setStateFunction = this.setStateFunction(it);
    _builder.append(_setStateFunction);
    _builder.newLineIfNotEmpty();
    CharSequence _resetStateFunction = this.resetStateFunction(it);
    _builder.append(_resetStateFunction);
    _builder.newLineIfNotEmpty();
    CharSequence _mergeStateFunction = this.mergeStateFunction(it);
    _builder.append(_mergeStateFunction);
    _builder.newLineIfNotEmpty();
    CharSequence _childAttributes = this.childAttributes(it);
    _builder.append(_childAttributes);
    _builder.newLineIfNotEmpty();
    return _builder.toString();
  }
  
  protected String _generateAppStateRec(final GroupedClientAttribute it) {
    StringConcatenation _builder = new StringConcatenation();
    {
      if (((it.getAttributeGroup() == null) || (((Object[])Conversions.unwrapArray(it.getAttributeGroup(), Object.class)).length > 0))) {
        {
          EList<ClientAttribute> _attributeGroup = it.getAttributeGroup();
          for(final ClientAttribute attribute : _attributeGroup) {
            {
              if ((attribute instanceof SingleClientAttribute)) {
                CharSequence _stateFunction = this.getStateFunction(((SingleClientAttribute)attribute));
                _builder.append(_stateFunction);
                _builder.newLineIfNotEmpty();
                CharSequence _setStateFunction = this.setStateFunction(((SingleClientAttribute)attribute));
                _builder.append(_setStateFunction);
                _builder.newLineIfNotEmpty();
                CharSequence _resetStateFunction = this.resetStateFunction(((SingleClientAttribute)attribute));
                _builder.append(_resetStateFunction);
                _builder.newLineIfNotEmpty();
                CharSequence _mergeStateFunction = this.mergeStateFunction(((SingleClientAttribute)attribute));
                _builder.append(_mergeStateFunction);
                _builder.newLineIfNotEmpty();
                CharSequence _childAttributes = this.childAttributes(((SingleClientAttribute)attribute));
                _builder.append(_childAttributes);
                _builder.newLineIfNotEmpty();
              } else {
                String _generateAppStateRec = this.generateAppStateRec(attribute);
                _builder.append(_generateAppStateRec);
                _builder.newLineIfNotEmpty();
              }
            }
          }
        }
      }
    }
    return _builder.toString();
  }
  
  public String generateAppStateRec(final ClientAttribute it) {
    if (it instanceof GroupedClientAttribute) {
      return _generateAppStateRec((GroupedClientAttribute)it);
    } else if (it instanceof SingleClientAttribute) {
      return _generateAppStateRec((SingleClientAttribute)it);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(it).toString());
    }
  }
}
