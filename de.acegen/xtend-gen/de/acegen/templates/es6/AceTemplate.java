/**
 * Copyright (c) 2019, Annette Pohl, Koblenz, Germany
 * 
 * Permission to use, copy, modify, and/or distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */
package de.acegen.templates.es6;

import de.acegen.aceGen.HttpClientStateElement;
import de.acegen.aceGen.HttpClientTypeDefinition;
import de.acegen.extensions.CommonExtension;
import de.acegen.extensions.es6.Es6Extension;
import javax.inject.Inject;
import org.eclipse.emf.common.util.EList;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.xbase.lib.Conversions;
import org.eclipse.xtext.xbase.lib.Extension;
import org.eclipse.xtext.xbase.lib.StringExtensions;

@SuppressWarnings("all")
public class AceTemplate {
  @Inject
  @Extension
  private Es6Extension _es6Extension;
  
  @Inject
  @Extension
  private CommonExtension _commonExtension;
  
  public CharSequence generateAppUtilsStub() {
    StringConcatenation _builder = new StringConcatenation();
    String _copyright = this._commonExtension.copyright();
    _builder.append(_copyright);
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("import ACEController from \"../../gen/ace/ACEController\";");
    _builder.newLine();
    _builder.append("import uuid from \"uuid\";");
    _builder.newLine();
    _builder.newLine();
    _builder.append("export default class AppUtils {");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("static start() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("AppUtils.loadSettings().then((settings) => {");
    _builder.newLine();
    _builder.append("\t\t    ");
    _builder.append("AppUtils.settings = settings;");
    _builder.newLine();
    _builder.append("    \t\t");
    _builder.append("// call initial action");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("});");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("static loadSettings() {");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("return new Promise((resolve, reject) => {");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("const headers = new Headers();");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("headers.append(\"Content-Type\", \"application/json\");");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("headers.append(\"Accept\", \"application/json\");");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("const options = {");
    _builder.newLine();
    _builder.append("\t            ");
    _builder.append("method: \'GET\',");
    _builder.newLine();
    _builder.append("\t            ");
    _builder.append("headers: headers,");
    _builder.newLine();
    _builder.append("\t            ");
    _builder.append("mode: \'cors\',");
    _builder.newLine();
    _builder.append("\t            ");
    _builder.append("cache: \'no-cache\'");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("};");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("const request = new Request(\"settings.json\", options);");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("fetch(request).then(function (response) {");
    _builder.newLine();
    _builder.append("\t            ");
    _builder.append("return response.json();");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("}).then(function (data) {");
    _builder.newLine();
    _builder.append("\t                ");
    _builder.append("resolve(data);");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("}).catch(function (error) {");
    _builder.newLine();
    _builder.append("\t            ");
    _builder.append("reject(error);");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("});");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("});");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("static getClientVersion() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return AppUtils.settings.clientVersion;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("static getAceScenariosApiKey() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return AppUtils.settings.aceScenariosApiKey;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("static getAceScenariosBaseUrl() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return AppUtils.settings.aceScenariosBaseUrl;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("static isDevelopment() {");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("return AppUtils.settings.development;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("static createInitialAppState() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return {};");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("static renderNewState() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("// render the new state");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("// you should get it from AppState");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("static httpGet(url, authorize, queryParams, commandData) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return new Promise((resolve, reject) => {");
    _builder.newLine();
    _builder.append("\t\t    ");
    _builder.append("const headers = new Headers();");
    _builder.newLine();
    _builder.append("\t\t    ");
    _builder.append("headers.append(\"Content-Type\", \"application/json\");");
    _builder.newLine();
    _builder.append("\t\t    ");
    _builder.append("headers.append(\"Accept\", \"application/json\");");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if (authorize === true) {");
    _builder.newLine();
    _builder.append("\t\t\t    ");
    _builder.append("let authorization = AppUtils.basicAuth();");
    _builder.newLine();
    _builder.append("\t\t\t    ");
    _builder.append("if (authorization !== undefined) {");
    _builder.newLine();
    _builder.append("\t\t\t        ");
    _builder.append("headers.append(\"Authorization\", authorization);");
    _builder.newLine();
    _builder.append("\t\t\t    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t    ");
    _builder.append("const options = {");
    _builder.newLine();
    _builder.append("\t\t        ");
    _builder.append("method: \'GET\',");
    _builder.newLine();
    _builder.append("\t\t        ");
    _builder.append("headers: headers,");
    _builder.newLine();
    _builder.append("\t\t        ");
    _builder.append("mode: \'cors\',");
    _builder.newLine();
    _builder.append("\t\t        ");
    _builder.append("cache: \'no-cache\'");
    _builder.newLine();
    _builder.append("\t\t    ");
    _builder.append("};");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t    ");
    _builder.append("const completeUrl = url + AppUtils.queryParamString(url, queryParams);");
    _builder.newLine();
    _builder.append("\t\t    ");
    _builder.append("const request = new Request(completeUrl, options);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("let status;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("let statusText;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("fetch(request).then(function (response) {");
    _builder.newLine();
    _builder.append("\t\t\t    ");
    _builder.append("status = response.status;");
    _builder.newLine();
    _builder.append("\t\t\t    ");
    _builder.append("statusText = response.statusText;");
    _builder.newLine();
    _builder.append("\t\t\t    ");
    _builder.append("if (status >= 300) {");
    _builder.newLine();
    _builder.append("\t\t\t        ");
    _builder.append("return response.text();");
    _builder.newLine();
    _builder.append("\t\t\t    ");
    _builder.append("} else {");
    _builder.newLine();
    _builder.append("\t\t\t        ");
    _builder.append("return response.json();");
    _builder.newLine();
    _builder.append("\t\t\t    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}).then(function (data) {");
    _builder.newLine();
    _builder.append("\t\t\t    ");
    _builder.append("if (status >= 300) {");
    _builder.newLine();
    _builder.append("\t\t\t        ");
    _builder.append("const error = {");
    _builder.newLine();
    _builder.append("\t\t\t            ");
    _builder.append("code: status,");
    _builder.newLine();
    _builder.append("\t\t\t            ");
    _builder.append("text: statusText,");
    _builder.newLine();
    _builder.append("\t\t\t            ");
    _builder.append("errorKey: data");
    _builder.newLine();
    _builder.append("\t\t\t        ");
    _builder.append("};");
    _builder.newLine();
    _builder.append("\t\t\t        ");
    _builder.append("reject(error);");
    _builder.newLine();
    _builder.append("\t\t\t    ");
    _builder.append("} else {");
    _builder.newLine();
    _builder.append("\t\t\t        ");
    _builder.append("resolve(data);");
    _builder.newLine();
    _builder.append("\t\t\t    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}).catch(function (error) {");
    _builder.newLine();
    _builder.append("\t\t\t    ");
    _builder.append("const status = {");
    _builder.newLine();
    _builder.append("\t\t\t        ");
    _builder.append("code: error.name,");
    _builder.newLine();
    _builder.append("\t\t\t        ");
    _builder.append("text: error.message");
    _builder.newLine();
    _builder.append("\t\t\t    ");
    _builder.append("};");
    _builder.newLine();
    _builder.append("\t\t\t    ");
    _builder.append("reject(status);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("});");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("});");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("static httpChange(methodType, url, authorize, queryParams, data) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return new Promise((resolve, reject) => {");
    _builder.newLine();
    _builder.append("\t\t    ");
    _builder.append("const headers = new Headers();");
    _builder.newLine();
    _builder.append("\t\t    ");
    _builder.append("headers.append(\"Content-Type\", \"application/json\");");
    _builder.newLine();
    _builder.append("\t\t    ");
    _builder.append("headers.append(\"Accept\", \"application/json\");");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if (authorize === true) {");
    _builder.newLine();
    _builder.append("\t\t\t    ");
    _builder.append("let authorization = AppUtils.basicAuth();");
    _builder.newLine();
    _builder.append("\t\t\t    ");
    _builder.append("if (authorization !== undefined) {");
    _builder.newLine();
    _builder.append("\t\t\t        ");
    _builder.append("headers.append(\"Authorization\", authorization);");
    _builder.newLine();
    _builder.append("\t\t\t    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t    ");
    _builder.append("const options = {");
    _builder.newLine();
    _builder.append("\t\t        ");
    _builder.append("method: methodType,");
    _builder.newLine();
    _builder.append("\t\t        ");
    _builder.append("headers: headers,");
    _builder.newLine();
    _builder.append("\t\t        ");
    _builder.append("mode: \'cors\',");
    _builder.newLine();
    _builder.append("\t\t        ");
    _builder.append("cache: \'no-cache\',");
    _builder.newLine();
    _builder.append("\t\t        ");
    _builder.append("body: JSON.stringify(data)");
    _builder.newLine();
    _builder.append("\t\t    ");
    _builder.append("};");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t    ");
    _builder.append("const completeUrl = url + AppUtils.queryParamString(url, queryParams);");
    _builder.newLine();
    _builder.append("\t\t    ");
    _builder.append("const request = new Request(completeUrl, options);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("let status;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("let statusText;");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("fetch(request).then(function (response) {");
    _builder.newLine();
    _builder.append("\t\t\t    ");
    _builder.append("status = response.status;");
    _builder.newLine();
    _builder.append("\t\t\t    ");
    _builder.append("statusText = response.statusText;");
    _builder.newLine();
    _builder.append("\t\t\t    ");
    _builder.append("return response.text();");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}).then(function (data) {");
    _builder.newLine();
    _builder.append("\t\t\t    ");
    _builder.append("if (status >= 300) {");
    _builder.newLine();
    _builder.append("\t\t\t        ");
    _builder.append("const error = {");
    _builder.newLine();
    _builder.append("\t\t\t            ");
    _builder.append("code: status,");
    _builder.newLine();
    _builder.append("\t\t\t            ");
    _builder.append("text: statusText,");
    _builder.newLine();
    _builder.append("\t\t\t            ");
    _builder.append("errorKey: data");
    _builder.newLine();
    _builder.append("\t\t\t        ");
    _builder.append("};");
    _builder.newLine();
    _builder.append("\t\t\t        ");
    _builder.append("reject(error);");
    _builder.newLine();
    _builder.append("\t\t\t    ");
    _builder.append("} else {");
    _builder.newLine();
    _builder.append("\t\t\t        ");
    _builder.append("resolve(data);");
    _builder.newLine();
    _builder.append("\t\t\t    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}).catch(function (error) {");
    _builder.newLine();
    _builder.append("\t\t\t    ");
    _builder.append("const status = {");
    _builder.newLine();
    _builder.append("\t\t\t        ");
    _builder.append("code: error.name,");
    _builder.newLine();
    _builder.append("\t\t\t        ");
    _builder.append("text: error.message");
    _builder.newLine();
    _builder.append("\t\t\t    ");
    _builder.append("};");
    _builder.newLine();
    _builder.append("\t\t\t    ");
    _builder.append("reject(status);");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("});");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("});");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("static httpPost(url, authorize, queryParams, data) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return AppUtils.httpChange(\"POST\", authorize, url, queryParams, data);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("static httpPut(url, authorize, queryParams, data) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return AppUtils.httpChange(\"PUT\", authorize, url, queryParams, data);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("static httpDelete(url, authorize, queryParams, data) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return AppUtils.httpChange(\"DELETE\", authorize, url, queryParams, data);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("static queryParamString(url, queryParams) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("let queryString = \"\";");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (queryParams && queryParams.length > 0) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("for (let i = 0; i < queryParams.length; i++) {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("if (url.indexOf(\'?\') < 0 && i === 0) {");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("queryString += \'?\'");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("} else {");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("queryString += \'&\'");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("queryString += queryParams[i].key + \"=\" + queryParams[i].value;");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return queryString;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("static basicAuth() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// implement your basic auth");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("return undefined;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("static createUUID() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("let d = new Date().getTime();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return \'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\'.replace(/[xy]/g, function (c) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("var r = (d + Math.random() * 16) % 16 | 0;");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("d = Math.floor(d / 16);");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("return (c == \'x\' ? r : (r & 0x3 | 0x8)).toString(16);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("});");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("static displayUnexpectedError(error) {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("static deepCopy(object) {");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("return JSON.parse(JSON.stringify(object));");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("static getMaxTimelineSize() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return 2000;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("static getAppState() {");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("return {};");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("static deepMerge(newState, appState) {");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("for (let property in newState) {");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("if (newState.hasOwnProperty(property)) {");
    _builder.newLine();
    _builder.append("\t            ");
    _builder.append("if (appState[property] === undefined) {");
    _builder.newLine();
    _builder.append("\t                ");
    _builder.append("appState[property] = newState[property];");
    _builder.newLine();
    _builder.append("\t            ");
    _builder.append("} else if (newState[property] === undefined) {");
    _builder.newLine();
    _builder.append("\t                ");
    _builder.append("appState[property] = undefined;");
    _builder.newLine();
    _builder.append("\t            ");
    _builder.append("} else if (typeof newState[property] === \'object\') {");
    _builder.newLine();
    _builder.append("\t                ");
    _builder.append("AppUtils.deepMerge(newState[property], appState[property]);");
    _builder.newLine();
    _builder.append("\t            ");
    _builder.append("} else {");
    _builder.newLine();
    _builder.append("\t                ");
    _builder.append("appState[property] = newState[property];");
    _builder.newLine();
    _builder.append("\t            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("return appState;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("static merge(newState, appState) {");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("for (let property in newState) {");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("if (newState.hasOwnProperty(property)) {");
    _builder.newLine();
    _builder.append("\t            ");
    _builder.append("appState[property] = newState[property];");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("return appState;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    String _sdg = this._commonExtension.sdg();
    _builder.append(_sdg);
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generateAppStub() {
    StringConcatenation _builder = new StringConcatenation();
    String _copyright = this._commonExtension.copyright();
    _builder.append(_copyright);
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("import AppUtils from \"./AppUtils\";");
    _builder.newLine();
    _builder.newLine();
    _builder.append("export * from \"../../gen/ace/Scenario\";");
    _builder.newLine();
    _builder.append("export * from \"../../gen/ace/Bug\";");
    _builder.newLine();
    _builder.newLine();
    _builder.append("AppUtils.start();");
    _builder.newLine();
    _builder.newLine();
    _builder.append("export function deepMergeState(newAppState) {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("appState = AppUtils.deepMerge(newAppState, appState);");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("export function mergeState(newAppState) {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("appState = AppUtils.merge(newAppState, appState);");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("// add EventListenerRegistration.init() of all modules");
    _builder.newLine();
    _builder.append("// add ActionFactoryRegistrationTodo.init() of all modules");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    String _sdg = this._commonExtension.sdg();
    _builder.append(_sdg);
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generateReplayUtilsStub() {
    StringConcatenation _builder = new StringConcatenation();
    String _copyright = this._commonExtension.copyright();
    _builder.append(_copyright);
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("export default class ReplayUtils {");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("static itemStringifyReplacer(key, value) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (key === \'timestamp\') {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("return undefined;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("} else {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("return value;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("static compareItems(expected, actual) {");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("// will return false if just the order of props is different");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("// for a better result use https://www.npmjs.com/package/json-stable-stringify");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return JSON.stringify(expected, ReplayUtils.itemStringifyReplacer) === JSON.stringify(actual, ReplayUtils.itemStringifyReplacer);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("static prepareReplay() {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("static tearDownReplay() {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    String _sdg = this._commonExtension.sdg();
    _builder.append(_sdg);
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generateACEController() {
    StringConcatenation _builder = new StringConcatenation();
    String _copyright = this._commonExtension.copyright();
    _builder.append(_copyright);
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("import AppUtils from \"../../src/app/AppUtils\";");
    _builder.newLine();
    _builder.append("import Utils from \"./Utils\";");
    _builder.newLine();
    _builder.newLine();
    _builder.append("export default class ACEController {");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("static init() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("ACEController.timeline = [];");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("ACEController.listeners = {};");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("ACEController.factories = {};");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("ACEController.registerListener(\'TriggerAction\', ACEController.triggerAction);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("ACEController.actionIsProcessing = false;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("ACEController.actionQueue = [];");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("ACEController.LIVE = 1;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("ACEController.REPLAY = 2;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("ACEController.E2E = 3;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("ACEController.execution = ACEController.LIVE;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("ACEController.actualTimeline = [];");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("ACEController.expectedTimeline = [];");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("static registerListener(eventName, listener) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (!eventName.trim()) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("throw new Error(\'cannot register listener for empty eventName\');");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (!listener) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("throw new Error(\'cannot register undefined listener for event \' + eventName);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("let listenersForEventName;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (ACEController.listeners[eventName] === undefined) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("ACEController.listeners[eventName] = [];");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("listenersForEventName = ACEController.listeners[eventName];");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("listenersForEventName.push(listener);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("static registerFactory(actionName, factory) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (!actionName.trim()) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("throw new Error(\'cannot register factory for empty actionName\');");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (!factory) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("throw new Error(\'cannot register undefined factory for action \' + actionName);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("ACEController.factories[actionName] = factory;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("static addItemToTimeLine(item) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("let timestamp = new Date();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("item.timestamp = timestamp.getTime();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if (ACEController.execution === ACEController.LIVE && AppUtils.isDevelopment() ");
    _builder.newLine();
    _builder.append("\t\t        ");
    _builder.append("|| !ACEController.execution === ACEController.LIVE) {");
    _builder.newLine();
    _builder.append("\t\t    ");
    _builder.append("ACEController.timeline.push(AppUtils.deepCopy(item));");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("static addActionToQueue(action) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (ACEController.execution === ACEController.LIVE) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("ACEController.actionQueue.push(action);");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("if (ACEController.actionIsProcessing === false) {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("ACEController.actionIsProcessing = true;");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("ACEController.applyNextActions();");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("static applyNextActions() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("let action = ACEController.actionQueue.shift();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (action) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("if (action.asynchronous) {");
    _builder.newLine();
    _builder.append("\t\t\t    ");
    _builder.append("action.applyAction().then(() => {");
    _builder.newLine();
    _builder.append("\t\t\t    \t");
    _builder.append("ACEController.callApplyNextActions();");
    _builder.newLine();
    _builder.append("\t\t\t    ");
    _builder.append("}, (error) => {");
    _builder.newLine();
    _builder.append("\t\t\t        ");
    _builder.append("AppUtils.displayUnexpectedError(error);");
    _builder.newLine();
    _builder.append("\t\t\t    \t");
    _builder.append("ACEController.callApplyNextActions();");
    _builder.newLine();
    _builder.append("\t\t\t    ");
    _builder.append("});");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("} else {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t\t\t\t\t");
    _builder.append("action.applyAction();");
    _builder.newLine();
    _builder.append("\t\t\t    \t");
    _builder.append("ACEController.callApplyNextActions();");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("} catch(error) {");
    _builder.newLine();
    _builder.append("\t\t\t        ");
    _builder.append("AppUtils.displayUnexpectedError(error);");
    _builder.newLine();
    _builder.append("\t\t\t    \t");
    _builder.append("ACEController.callApplyNextActions();");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("} else if (action === undefined) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("ACEController.actionIsProcessing = false;");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("if (ACEController.execution !== ACEController.LIVE) {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("ACEController.timeline = [];");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("ACEController.actionIsProcessing = false;");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("ACEController.actionQueue = [];");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("ACEController.execution = ACEController.LIVE;");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("Utils.finishReplay();");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("AppUtils.start();");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("static callApplyNextActions() {");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("if (ACEController.execution === ACEController.LIVE) {");
    _builder.newLine();
    _builder.append("    \t\t");
    _builder.append("ACEController.applyNextActions();");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("} else {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("setTimeout(ACEController.applyNextActions, ACEController.pauseInMillis);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("static triggerAction(action) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("ACEController.addActionToQueue(action);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("static startReplay(level, pauseInMillis) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("ACEController.actualTimeline = [];");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("ACEController.execution = level;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("ACEController.pauseInMillis = pauseInMillis;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("ACEController.readTimelineAndCreateReplayActions();");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("static readTimelineAndCreateReplayActions() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("let actions = [];");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (ACEController.expectedTimeline.length === 0) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("for (let i = 0; i < ACEController.timeline.length; i++) {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("let item = ACEController.timeline[i];");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("ACEController.expectedTimeline.push(item);");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("for (let i = 0; i < ACEController.expectedTimeline.length; i++) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("let item = ACEController.expectedTimeline[i];");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("if (item.action) {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("const actionData = item.action.actionData;");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("let action = ACEController.factories[item.action.actionName](actionData);");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("action.actionData = actionData;");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("actions.push(action);");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("ACEController.actionQueue = actions;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("ACEController.applyNextActions();");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("static getCommandByUuid(uuid) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("for (let i = 0; i < ACEController.expectedTimeline.length; i++) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("let item = ACEController.expectedTimeline[i];");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("if (item.command && item.command.commandData.uuid === uuid) {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("return item.command;");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("ACEController.init();");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    String _sdg = this._commonExtension.sdg();
    _builder.append(_sdg);
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generateScenario() {
    StringConcatenation _builder = new StringConcatenation();
    String _copyright = this._commonExtension.copyright();
    _builder.append(_copyright);
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("import AppUtils from \"../../src/app/AppUtils\";");
    _builder.newLine();
    _builder.append("import ReplayUtils from \"../../src/app/ReplayUtils\";");
    _builder.newLine();
    _builder.append("import ACEController from \"./ACEController\";");
    _builder.newLine();
    _builder.append("import Utils from \"./Utils\";");
    _builder.newLine();
    _builder.newLine();
    _builder.append("export function runScenario(scenarioId, executor = \"unknown\", pauseInMillis = 0) {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if (AppUtils.isDevelopment() === false) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("console.error(\"runScenario is only available during development\");");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("} else {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("Utils.loadScenario(scenarioId).then((scenario) => {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("ReplayUtils.scenarioConfig = {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("executor,");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("scenarioId,");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("saveScenarioResult: true");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("};");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("ACEController.expectedTimeline = JSON.parse(scenario.timeline);");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("Utils.replayE2E(pauseInMillis, scenario.serverTimeline);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("});");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("export function runAllScenarios(executor = \"unknown\", pauseInMillis = 0) {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if (AppUtils.isDevelopment() === false) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("console.error(\"runAllScenarios is only available during development\");");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("} else {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("Utils.loadNextScenario(null).then((scenario) => {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("if (scenario) {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("ReplayUtils.scenarioConfig = {");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("executor,");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("scenarioId: scenario.id,");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("saveScenarioResult: true,");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("runAllScenarios: true,");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("pauseInMillis");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("};");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("ACEController.expectedTimeline = JSON.parse(scenario.timeline);");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("Utils.replayE2E(pauseInMillis, scenario.serverTimeline);");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("});");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("export function saveScenario(description, creator) {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("if (AppUtils.isDevelopment() === false) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("console.error(\"saveScenario is only available during development\");");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("} else {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("Utils.saveScenario(description, creator).then((id) => {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("console.log(`saved scenario with id ${id}`);");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("ACEController.timeline = [];");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("AppUtils.start();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("});");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    String _sdg = this._commonExtension.sdg();
    _builder.append(_sdg);
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generateBug() {
    StringConcatenation _builder = new StringConcatenation();
    String _copyright = this._commonExtension.copyright();
    _builder.append(_copyright);
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("import ReplayUtils from \"../../src/app/ReplayUtils\";");
    _builder.newLine();
    _builder.append("import ACEController from \"./ACEController\";");
    _builder.newLine();
    _builder.append("import Utils from \"./Utils\";");
    _builder.newLine();
    _builder.newLine();
    _builder.append("export function runBug(bugId, pauseInMillis = 0) {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("Utils.loadBug(bugId).then((scenario) => {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("ReplayUtils.scenarioConfig = {};");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("ACEController.expectedTimeline = JSON.parse(scenario.timeline);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("Utils.replayServerless(pauseInMillis);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("});");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("export function saveBug(description, creator) {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("Utils.saveBug(description, creator).then((id) => {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("console.log(`saved bug with id ${id}`);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("});");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    String _sdg = this._commonExtension.sdg();
    _builder.append(_sdg);
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generateTriggerAction() {
    StringConcatenation _builder = new StringConcatenation();
    String _copyright = this._commonExtension.copyright();
    _builder.append(_copyright);
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("import Event from \"./Event\";");
    _builder.newLine();
    _builder.append("import ACEController from \"./ACEController\";");
    _builder.newLine();
    _builder.newLine();
    _builder.append("export default class TriggerAction extends Event {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("constructor(action) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("super(action, \'TriggerAction\');");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("this.eventData = action;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("publish() {");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("ACEController.addItemToTimeLine({event: this});");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("this.notifyListeners();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("notifyListeners() {");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("let i, listener;");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("if (this.eventName !== undefined) {");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("const listenersForEvent = ACEController.listeners[this.eventName];");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("if (listenersForEvent !== undefined) {");
    _builder.newLine();
    _builder.append("\t            ");
    _builder.append("for (i = 0; i < listenersForEvent.length; i += 1) {");
    _builder.newLine();
    _builder.append("\t                ");
    _builder.append("listener = listenersForEvent[i];");
    _builder.newLine();
    _builder.append("\t                ");
    _builder.append("listener(this.eventData);");
    _builder.newLine();
    _builder.append("\t            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    String _sdg = this._commonExtension.sdg();
    _builder.append(_sdg);
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generateUtils() {
    StringConcatenation _builder = new StringConcatenation();
    String _copyright = this._commonExtension.copyright();
    _builder.append(_copyright);
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("import AppUtils from \"../../src/app/AppUtils\";");
    _builder.newLine();
    _builder.append("import ACEController from \"./ACEController\";");
    _builder.newLine();
    _builder.append("import ReplayUtils from \"../../src/app/ReplayUtils\";");
    _builder.newLine();
    _builder.newLine();
    _builder.append("export default class Utils {");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("static getServerInfo() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return AppUtils.httpGet(\'api/server/info\');");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("static saveBug(description, creator) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return Utils.getServerInfo().then((serverInfo) => {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("const browser = Utils.getBrowserInfo();");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("const uuid = AppUtils.createUUID();");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("const data = {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("description,");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("timeline: JSON.stringify(ACEController.timeline),");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("creator,");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("clientVersion: AppUtils.getClientVersion(),");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("device: browser.name + \" \" + browser.version,");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("uuid,");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("apiKey: AppUtils.getAceScenariosApiKey(),");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("serverVersion: serverInfo.serverVersion");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("};");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("return AppUtils.httpPost(AppUtils.getAceScenariosBaseUrl() + \'api/bugs/create\', false, [], data);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("});");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("static loadBug(id) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("const uuid = AppUtils.createUUID();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("let queryParams = [];");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("queryParams.push({");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("key: \"id\",");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("value: id");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("});");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("queryParams.push({");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("key: \"apiKey\",");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("value: AppUtils.getAceScenariosApiKey()");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("});");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("queryParams.push({");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("key: \"uuid\",");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("value: uuid");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("});");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return AppUtils.httpGet(AppUtils.getAceScenariosBaseUrl() + \'api/bugs/get\', false, queryParams);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("static saveScenario(description, creator) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return AppUtils.httpGet(\'api/e2e/timeline\').then((serverTimeline) => {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("return Utils.getServerInfo().then((serverInfo) => {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("const browser = Utils.getBrowserInfo();");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("const uuid = AppUtils.createUUID();");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("const data = {");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("description,");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("timeline: JSON.stringify(ACEController.timeline),");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("serverTimeline: JSON.stringify(serverTimeline),");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("creator,");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("clientVersion: AppUtils.getClientVersion(),");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("device: browser.name + \" \" + browser.version,");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("uuid,");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("apiKey: AppUtils.getAceScenariosApiKey(),");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("serverVersion: serverInfo.serverVersion");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("};");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("return AppUtils.httpPost(AppUtils.getAceScenariosBaseUrl() + \'api/scenarios/create\', false, [], data);");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("});");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("});");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("static saveScenarioResult(normalized, result) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return AppUtils.httpGet(\'replay/e2e/timeline\').then((serverTimeline) => {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("return Utils.getServerInfo().then((serverInfo) => {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("const browser = Utils.getBrowserInfo();");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("const uuid = AppUtils.createUUID();");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("const data = {");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("scenarioId: ReplayUtils.scenarioConfig.scenarioId,");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("timeline: JSON.stringify(normalized),");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("executor: ReplayUtils.scenarioConfig.executor,");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("result,");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("uuid,");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("clientVersion: AppUtils.getClientVersion(),");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("device: browser.name + \" \" + browser.version,");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("apiKey: AppUtils.getAceScenariosApiKey(),");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("serverVersion: serverInfo.serverVersion,");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("serverTimeline: JSON.stringify(serverTimeline)");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("};");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("return AppUtils.httpPost(AppUtils.getAceScenariosBaseUrl() + \'api/results/create\', false, [], data);");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("});");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("});");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("static loadScenario(id) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("const uuid = AppUtils.createUUID();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("let queryParams = [];");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("queryParams.push({");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("key: \"id\",");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("value: id");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("});");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("queryParams.push({");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("key: \"apiKey\",");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("value: AppUtils.getAceScenariosApiKey()");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("});");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("queryParams.push({");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("key: \"uuid\",");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("value: uuid");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("});");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return AppUtils.httpGet(AppUtils.getAceScenariosBaseUrl() + \'api/scenarios/get\', false, queryParams);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("static loadNextScenario(lastId) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("const uuid = AppUtils.createUUID();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("let queryParams = [];");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("queryParams.push({");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("key: \"lastId\",");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("value: lastId");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("});");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("queryParams.push({");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("key: \"apiKey\",");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("value: AppUtils.getAceScenariosApiKey()");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("});");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("queryParams.push({");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("key: \"uuid\",");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("value: uuid");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("});");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return AppUtils.httpGet(AppUtils.getAceScenariosBaseUrl() + \'api/scenarios/next\', false, queryParams);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("static getBrowserInfo() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("let ua = navigator.userAgent, tem,");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("M = ua.match(/(opera|chrome|safari|firefox|msie|trident(?=\\/))\\/?\\s*(\\d+)/i) || [];");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (/trident/i.test(M[1])) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("tem = /\\brv[ :]+(\\d+)/g.exec(ua) || [];");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("return {name: \'IE \', version: (tem[1] || \'\')};");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (M[1] === \'Chrome\') {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("tem = ua.match(/\\bOPR\\/(\\d+)/);");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("if (tem != null) {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("return {name: \'Opera\', version: tem[1]};");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("M = M[2] ? [M[1], M[2]] : [navigator.appName, navigator.appVersion, \'-?\'];");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if ((tem = ua.match(/version\\/(\\d+)/i)) != null) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("M.splice(1, 1, tem[1]);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("name: M[0],");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("version: M[1]");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("};");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("static prepareAction(uuid) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (ACEController.execution === ACEController.E2E) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("return AppUtils.httpPut(\'replay/e2e/prepare?uuid=\' + uuid);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("} else {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("return new Promise((resolve) => {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("resolve();");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("});");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("static replayServerless(pauseInMillis) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("ReplayUtils.prepareReplay();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("ACEController.startReplay(ACEController.REPLAY, pauseInMillis)");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("static replayE2E(pauseInMillis, serverTimeline) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("ReplayUtils.prepareReplay();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("AppUtils.httpPut(\'replay/e2e/start\', false, [], JSON.parse(serverTimeline)).then(() => {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("ACEController.startReplay(ACEController.E2E, pauseInMillis)");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("});");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("static normalizeTimelines(expected, actual) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("let normalizedExpected = [];");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("let normalizedActual = [];");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("let expectedIndex = 0;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("let actualIndex = 0;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("while (expectedIndex < expected.length) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("if (actualIndex >= actual.length) {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("normalizedExpected.push(expected[expectedIndex]);");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("normalizedActual.push({});");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("expectedIndex++;");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("} else if (expected[expectedIndex].action && actual[actualIndex].action || !expected[expectedIndex].action && !actual[actualIndex].action) {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("normalizedExpected.push(expected[expectedIndex]);");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("normalizedActual.push(actual[actualIndex]);");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("expectedIndex++;");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("actualIndex++;");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("} else if (expected[expectedIndex].action && !actual[actualIndex].action) {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("normalizedExpected.push({});");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("normalizedActual.push(actual[actualIndex]);");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("actualIndex++;");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("} else if (!expected[expectedIndex].action && actual[actualIndex].action) {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("normalizedExpected.push(expected[expectedIndex]);");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("normalizedActual.push({});");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("expectedIndex++;");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("while (actualIndex < actual.length) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("normalizedExpected.push({});");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("normalizedActual.push(actual[actualIndex]);");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("actualIndex++;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("expected: normalizedExpected,");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("actual: normalizedActual");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("};");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("static finishReplay() {");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("ReplayUtils.tearDownReplay();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (ReplayUtils.scenarioConfig.saveScenarioResult === true) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("const normalized = Utils.normalizeTimelines(ACEController.expectedTimeline, ACEController.actualTimeline);");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("const result = ReplayUtils.compareItems(normalized.expected, normalized.actual);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("            ");
    _builder.append("if (normalized.expected && normalized.actual) {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("const size = normalized.expected.length > normalized.actual.length ? normalized.expected.length : normalized.actual.length;");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("for (let i = 0; i < size; i++) {");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("const expected = normalized.expected[i] ? normalized.expected[i] : null;");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("const actual = normalized.actual[i] ? normalized.actual[i] : null;");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("const result = ReplayUtils.compareItems(expected, actual);");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("const item = {");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("expected,");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("actual,");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("result");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("};");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("if (result === true) {");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("console.log(\"%cSUCCESS expected \" + Utils.name(item.expected) + \" actual \" + Utils.name(item.actual), \"color: green;\", item);");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("} else {");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("console.log(\"%cFAILURE expected \" + Utils.name(item.expected) + \" actual \" + Utils.name(item.actual), \"color: red;\", item);");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("if (result === true) {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("console.log(\"%c===============\", \"color: green;\");");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("console.log(\"%c=== SCENARIO \" + ReplayUtils.scenarioConfig.scenarioId + \" SUCCESS ===\", \"color: green;\");");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("console.log(\"%c===============\", \"color: green;\");");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("} else {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("console.log(\"%c===============\", \"color: red;\");");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("console.log(\"%c=== SCENARIO \" + ReplayUtils.scenarioConfig.scenarioId + \" FAILURE ===\", \"color: red;\");");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("console.log(\"%c===============\", \"color: red;\");");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("Utils.saveScenarioResult(normalized, result);");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("AppUtils.httpPut(\'replay/e2e/stop\').then(() => {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("if (ReplayUtils.scenarioConfig.runAllScenarios === true) {");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("Utils.loadNextScenario(ReplayUtils.scenarioConfig.scenarioId).then((scenario) => {");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("if (scenario.id) {");
    _builder.newLine();
    _builder.append("                            ");
    _builder.append("ReplayUtils.scenarioConfig.scenarioId = scenario.id;");
    _builder.newLine();
    _builder.append("                            ");
    _builder.append("ACEController.expectedTimeline = JSON.parse(scenario.timeline);");
    _builder.newLine();
    _builder.append("                            ");
    _builder.append("Utils.replayE2E(ReplayUtils.scenarioConfig.pauseInMillis, scenario.serverTimeline);");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("});");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("});");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("static name(item) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (item.action) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("return item.action.actionName;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (item.command) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("return item.command.commandName;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (item.event) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("return item.event.eventName;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    String _sdg = this._commonExtension.sdg();
    _builder.append(_sdg);
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    return _builder;
  }
  
  public String generateWriteAppState(final HttpClientStateElement it, final String prefix) {
    StringConcatenation _builder = new StringConcatenation();
    String _copyright = this._commonExtension.copyright();
    _builder.append(_copyright);
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("import AppUtils from \"../../src/app/AppUtils\";");
    _builder.newLine();
    _builder.newLine();
    _builder.append("export let ");
    String _name = it.getName();
    _builder.append(_name);
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("export function setInitial");
    String _firstUpper = StringExtensions.toFirstUpper(it.getName());
    _builder.append(_firstUpper);
    _builder.append("(initial");
    String _firstUpper_1 = StringExtensions.toFirstUpper(it.getName());
    _builder.append(_firstUpper_1);
    _builder.append(") {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    String _name_1 = it.getName();
    _builder.append(_name_1, "\t");
    _builder.append(" = AppUtils.deepCopy(initial");
    String _firstUpper_2 = StringExtensions.toFirstUpper(it.getName());
    _builder.append(_firstUpper_2, "\t");
    _builder.append(");");
    _builder.newLineIfNotEmpty();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    {
      EList<HttpClientTypeDefinition> _types = it.getTypes();
      boolean _tripleNotEquals = (_types != null);
      if (_tripleNotEquals) {
        {
          EList<HttpClientTypeDefinition> _types_1 = it.getTypes();
          for(final HttpClientTypeDefinition type : _types_1) {
            {
              EList<HttpClientStateElement> _elements = type.getElements();
              for(final HttpClientStateElement element : _elements) {
                String _generateWriteAppStateRec = this.generateWriteAppStateRec(element);
                _builder.append(_generateWriteAppStateRec);
                _builder.newLineIfNotEmpty();
              }
            }
          }
        }
      }
    }
    return _builder.toString();
  }
  
  public String generateWriteAppStateRec(final HttpClientStateElement it) {
    StringConcatenation _builder = new StringConcatenation();
    {
      if (((it.getTypes() == null) || (((Object[])Conversions.unwrapArray(it.getTypes(), Object.class)).length == 0))) {
        _builder.append("export function set_");
        String _functionName = this._es6Extension.functionName(it);
        _builder.append(_functionName);
        _builder.append("(eventData) {");
        _builder.newLineIfNotEmpty();
        {
          boolean _isHash = it.isHash();
          if (_isHash) {
            _builder.append("\t");
            _builder.append("location.hash = eventData.");
            String _name = it.getName();
            _builder.append(_name, "\t");
            _builder.append(";");
            _builder.newLineIfNotEmpty();
          } else {
            boolean _isStorage = it.isStorage();
            if (_isStorage) {
              _builder.append("\t");
              _builder.append("localStorage.setItem(\"");
              String _name_1 = it.getName();
              _builder.append(_name_1, "\t");
              _builder.append("\", eventData.");
              String _name_2 = it.getName();
              _builder.append(_name_2, "\t");
              _builder.append(");");
              _builder.newLineIfNotEmpty();
            } else {
              _builder.append("\t");
              String _elementPath = this._es6Extension.elementPath(it);
              _builder.append(_elementPath, "\t");
              _builder.append(" = eventData.");
              String _name_3 = it.getName();
              _builder.append(_name_3, "\t");
              _builder.append(";");
              _builder.newLineIfNotEmpty();
            }
          }
        }
        _builder.append("}");
        _builder.newLine();
        _builder.newLine();
        _builder.append("export function reset_");
        String _functionName_1 = this._es6Extension.functionName(it);
        _builder.append(_functionName_1);
        _builder.append("() {");
        _builder.newLineIfNotEmpty();
        {
          boolean _isHash_1 = it.isHash();
          if (_isHash_1) {
            _builder.append("\t");
            _builder.append("location.hash = \"\";");
            _builder.newLine();
          } else {
            boolean _isStorage_1 = it.isStorage();
            if (_isStorage_1) {
              _builder.append("\t");
              _builder.append("localStorage.removeItem(\"");
              String _name_4 = it.getName();
              _builder.append(_name_4, "\t");
              _builder.append("\");");
              _builder.newLineIfNotEmpty();
            } else {
              _builder.append("\t");
              String _elementPath_1 = this._es6Extension.elementPath(it);
              _builder.append(_elementPath_1, "\t");
              _builder.append(" = null;");
              _builder.newLineIfNotEmpty();
            }
          }
        }
        _builder.append("}");
        _builder.newLine();
        _builder.newLine();
        _builder.append("export function init_");
        String _functionName_2 = this._es6Extension.functionName(it);
        _builder.append(_functionName_2);
        _builder.append("() {");
        _builder.newLineIfNotEmpty();
        {
          boolean _isHash_2 = it.isHash();
          if (_isHash_2) {
            _builder.append("\t");
            _builder.append("location.hash = \"\";");
            _builder.newLine();
          } else {
            boolean _isStorage_2 = it.isStorage();
            if (_isStorage_2) {
              _builder.append("\t");
              _builder.append("localStorage.removeItem(\"");
              String _name_5 = it.getName();
              _builder.append(_name_5, "\t");
              _builder.append("\");");
              _builder.newLineIfNotEmpty();
            } else {
              _builder.append("\t");
              String _elementPath_2 = this._es6Extension.elementPath(it);
              _builder.append(_elementPath_2, "\t");
              _builder.append(" = null;");
              _builder.newLineIfNotEmpty();
            }
          }
        }
        _builder.append("}");
        _builder.newLine();
      } else {
        _builder.append("export function set_");
        String _functionName_3 = this._es6Extension.functionName(it);
        _builder.append(_functionName_3);
        _builder.append("(eventData) {");
        _builder.newLineIfNotEmpty();
        {
          boolean _isHash_3 = it.isHash();
          if (_isHash_3) {
            _builder.append("\t");
            _builder.append("location.hash = eventData.");
            String _name_6 = it.getName();
            _builder.append(_name_6, "\t");
            _builder.append(";");
            _builder.newLineIfNotEmpty();
          } else {
            boolean _isStorage_3 = it.isStorage();
            if (_isStorage_3) {
              _builder.append("\t");
              _builder.append("localStorage.setItem(\"");
              String _name_7 = it.getName();
              _builder.append(_name_7, "\t");
              _builder.append("\", eventData.");
              String _name_8 = it.getName();
              _builder.append(_name_8, "\t");
              _builder.append(");");
              _builder.newLineIfNotEmpty();
            } else {
              _builder.append("\t");
              String _elementPath_3 = this._es6Extension.elementPath(it);
              _builder.append(_elementPath_3, "\t");
              _builder.append(" = eventData.");
              String _name_9 = it.getName();
              _builder.append(_name_9, "\t");
              _builder.append(";");
              _builder.newLineIfNotEmpty();
            }
          }
        }
        _builder.append("}");
        _builder.newLine();
        _builder.newLine();
        {
          if ((((!it.isList()) && (!it.isHash())) && (!it.isStorage()))) {
            _builder.append("export function merge_");
            String _functionName_4 = this._es6Extension.functionName(it);
            _builder.append(_functionName_4);
            _builder.append("(eventData) {");
            _builder.newLineIfNotEmpty();
            {
              EList<HttpClientTypeDefinition> _types = it.getTypes();
              for(final HttpClientTypeDefinition type : _types) {
                {
                  EList<HttpClientStateElement> _elements = type.getElements();
                  for(final HttpClientStateElement element : _elements) {
                    _builder.append("\t");
                    _builder.append("if (eventData.");
                    String _name_10 = element.getName();
                    _builder.append(_name_10, "\t");
                    _builder.append(" !== undefined) {");
                    _builder.newLineIfNotEmpty();
                    _builder.append("\t");
                    _builder.append("\t");
                    String _elementPath_4 = this._es6Extension.elementPath(element);
                    _builder.append(_elementPath_4, "\t\t");
                    _builder.append(" = eventData.");
                    String _name_11 = element.getName();
                    _builder.append(_name_11, "\t\t");
                    _builder.append(";");
                    _builder.newLineIfNotEmpty();
                    _builder.append("\t");
                    _builder.append("}");
                    _builder.newLine();
                  }
                }
              }
            }
            _builder.append("}");
            _builder.newLine();
          }
        }
        _builder.newLine();
        _builder.append("export function reset_");
        String _functionName_5 = this._es6Extension.functionName(it);
        _builder.append(_functionName_5);
        _builder.append("() {");
        _builder.newLineIfNotEmpty();
        {
          boolean _isHash_4 = it.isHash();
          if (_isHash_4) {
            _builder.append("\t");
            _builder.append("location.hash = \"\";");
            _builder.newLine();
          } else {
            boolean _isStorage_4 = it.isStorage();
            if (_isStorage_4) {
              _builder.append("\t");
              _builder.append("localStorage.removeItem(\"");
              String _name_12 = it.getName();
              _builder.append(_name_12, "\t");
              _builder.append("\");");
              _builder.newLineIfNotEmpty();
            } else {
              _builder.append("\t");
              String _elementPath_5 = this._es6Extension.elementPath(it);
              _builder.append(_elementPath_5, "\t");
              _builder.append(" = null;");
              _builder.newLineIfNotEmpty();
            }
          }
        }
        _builder.append("}");
        _builder.newLine();
        _builder.newLine();
        _builder.append("export function init_");
        String _functionName_6 = this._es6Extension.functionName(it);
        _builder.append(_functionName_6);
        _builder.append("() {");
        _builder.newLineIfNotEmpty();
        {
          boolean _isHash_5 = it.isHash();
          if (_isHash_5) {
            _builder.append("\t");
            _builder.append("location.hash = \"\";");
            _builder.newLine();
          } else {
            boolean _isStorage_5 = it.isStorage();
            if (_isStorage_5) {
              _builder.append("\t");
              _builder.append("localStorage.removeItem(\"");
              String _name_13 = it.getName();
              _builder.append(_name_13, "\t");
              _builder.append("\");");
              _builder.newLineIfNotEmpty();
            } else {
              _builder.append("\t");
              String _elementPath_6 = this._es6Extension.elementPath(it);
              _builder.append(_elementPath_6, "\t");
              _builder.append(" = {};");
              _builder.newLineIfNotEmpty();
            }
          }
        }
        _builder.append("}");
        _builder.newLine();
        _builder.newLine();
        {
          if (((((it.getTypes() != null) && (!it.isList())) && (!it.isHash())) && (!it.isStorage()))) {
            {
              EList<HttpClientTypeDefinition> _types_1 = it.getTypes();
              for(final HttpClientTypeDefinition type_1 : _types_1) {
                {
                  EList<HttpClientStateElement> _elements_1 = type_1.getElements();
                  for(final HttpClientStateElement element_1 : _elements_1) {
                    String _generateWriteAppStateRec = this.generateWriteAppStateRec(element_1);
                    _builder.append(_generateWriteAppStateRec);
                    _builder.newLineIfNotEmpty();
                  }
                }
              }
            }
          }
        }
        _builder.newLine();
      }
    }
    return _builder.toString();
  }
  
  public String generateReadAppState(final HttpClientStateElement it, final String prefix) {
    StringConcatenation _builder = new StringConcatenation();
    String _copyright = this._commonExtension.copyright();
    _builder.append(_copyright);
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("import AppUtils from \"../../src/app/AppUtils\";");
    _builder.newLine();
    _builder.append("import { state } from \"./WriteAppState\";");
    _builder.newLine();
    _builder.newLine();
    _builder.append("export function get");
    String _firstUpper = StringExtensions.toFirstUpper(it.getName());
    _builder.append(_firstUpper);
    _builder.append("() {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("return AppUtils.deepCopy(");
    String _name = it.getName();
    _builder.append(_name, "\t");
    _builder.append(");");
    _builder.newLineIfNotEmpty();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    {
      EList<HttpClientTypeDefinition> _types = it.getTypes();
      boolean _tripleNotEquals = (_types != null);
      if (_tripleNotEquals) {
        {
          EList<HttpClientTypeDefinition> _types_1 = it.getTypes();
          for(final HttpClientTypeDefinition type : _types_1) {
            {
              EList<HttpClientStateElement> _elements = type.getElements();
              for(final HttpClientStateElement element : _elements) {
                String _generateReadAppStateRec = this.generateReadAppStateRec(element);
                _builder.append(_generateReadAppStateRec);
                _builder.newLineIfNotEmpty();
              }
            }
          }
        }
      }
    }
    _builder.newLine();
    _builder.newLine();
    String _sdg = this._commonExtension.sdg();
    _builder.append(_sdg);
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.newLine();
    return _builder.toString();
  }
  
  public String generateReadAppStateRec(final HttpClientStateElement it) {
    StringConcatenation _builder = new StringConcatenation();
    String _copyright = this._commonExtension.copyright();
    _builder.append(_copyright);
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    {
      if (((it.getTypes() == null) || (((Object[])Conversions.unwrapArray(it.getTypes(), Object.class)).length == 0))) {
        _builder.append("export function get_");
        String _functionName = this._es6Extension.functionName(it);
        _builder.append(_functionName);
        _builder.append("() {");
        _builder.newLineIfNotEmpty();
        {
          boolean _isHash = it.isHash();
          if (_isHash) {
            _builder.append("\t");
            _builder.append("return location.hash;");
            _builder.newLine();
          } else {
            boolean _isStorage = it.isStorage();
            if (_isStorage) {
              _builder.append("\t");
              _builder.append("return localStorage.getItem(\"");
              String _name = it.getName();
              _builder.append(_name, "\t");
              _builder.append("\");");
              _builder.newLineIfNotEmpty();
            } else {
              _builder.append("\t");
              _builder.append("return ");
              String _elementPath = this._es6Extension.elementPath(it);
              _builder.append(_elementPath, "\t");
              _builder.append(";");
              _builder.newLineIfNotEmpty();
            }
          }
        }
        _builder.append("}");
        _builder.newLine();
        _builder.newLine();
      } else {
        _builder.append("export function get_");
        String _functionName_1 = this._es6Extension.functionName(it);
        _builder.append(_functionName_1);
        _builder.append("() {");
        _builder.newLineIfNotEmpty();
        {
          boolean _isHash_1 = it.isHash();
          if (_isHash_1) {
            _builder.append("\t");
            _builder.append("return location.hash;");
            _builder.newLine();
          } else {
            boolean _isStorage_1 = it.isStorage();
            if (_isStorage_1) {
              _builder.append("\t");
              _builder.append("localStorage.getItem(\"");
              String _name_1 = it.getName();
              _builder.append(_name_1, "\t");
              _builder.append("\");");
              _builder.newLineIfNotEmpty();
            } else {
              _builder.append("\t");
              _builder.append("return AppUtils.deepCopy(");
              String _elementPath_1 = this._es6Extension.elementPath(it);
              _builder.append(_elementPath_1, "\t");
              _builder.append(");");
              _builder.newLineIfNotEmpty();
            }
          }
        }
        _builder.append("}");
        _builder.newLine();
        _builder.newLine();
        {
          if (((((it.getTypes() != null) && (!it.isList())) && (!it.isHash())) && (!it.isStorage()))) {
            {
              EList<HttpClientTypeDefinition> _types = it.getTypes();
              for(final HttpClientTypeDefinition type : _types) {
                {
                  EList<HttpClientStateElement> _elements = type.getElements();
                  for(final HttpClientStateElement element : _elements) {
                    String _generateReadAppStateRec = this.generateReadAppStateRec(element);
                    _builder.append(_generateReadAppStateRec);
                    _builder.newLineIfNotEmpty();
                  }
                }
              }
            }
          }
        }
        _builder.newLine();
      }
    }
    _builder.newLine();
    String _sdg = this._commonExtension.sdg();
    _builder.append(_sdg);
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.newLine();
    return _builder.toString();
  }
}
