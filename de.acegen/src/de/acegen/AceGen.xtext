/* 
 * Copyright (c) 2019, Annette Pohl, Koblenz, Germany
 *
 * Permission to use, copy, modify, and/or distribute this software for any
 * purpose with or without fee is hereby granted, provided that the above
 * copyright notice and this permission notice appear in all copies.

 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 * ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 * WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 * ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
 * OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 */
 

grammar de.acegen.AceGen with org.eclipse.xtext.common.Terminals

generate aceGen "http://www.acegen.de/AceGen"

Project: 
	{Project} 'HttpClient' httpClient = HttpClient ? | 'HttpServer' httpServer = HttpServer ?
;

HttpClient: 
	name = QualifiedName
	('ACE' (aceOperations += HttpClientAce)*)?
	('appState' appState = HttpClientStateElement )?
;

HttpClientAce: 
	name = ID  ('<' input += ID (',' input += ID)* '>')?  
	('call' serverCall = [HttpServerAce | QualifiedName] )? 
	('loadingFlag' loadingFlag = [HttpClientStateElement | QualifiedName])? 
	(outcomes += HttpClientOutcome)*
;

HttpClientOutcome:
	'on' name = ID 
	('(' listeners += HttpClientStateFunction* ')')? 
	('triggers' '(' (aceOperations += [HttpClientAce | QualifiedName])* ')')? 
;

HttpClientStateFunction:
	stateFunctionType = HttpClientStateFunctionType attribute = [HttpClientStateElement | QualifiedName]
;

HttpClientStateFunctionType:
	'set' | 'merge' | 'reset' | 'init'
;

HttpClientStateElement:
	name = ID list ?= 'list'? hash ?= 'location.hash'? storage ?= 'storage'? (types += HttpClientTypeDefinition ('|' types += HttpClientTypeDefinition)*)?
;

HttpClientTypeDefinition:
	':' name = ID '{'
		elements += HttpClientStateElement* 
	'}'
;

HttpServer:
	name = QualifiedName
	('Authorization' authUser = AuthUser)?
	('import' authUserRef = [AuthUser | QualifiedName])?
	('ACE' (aceOperations += HttpServerAce)*	)?
	('views' (views += HttpServerView)* )?
	('models' (models += Model)*)?
	('scenarios' (scenarios += Scenario)*)?
;

HttpServerAce: 
	HttpServerAceWrite | HttpServerAceRead
;

HttpServerAceWrite: 
	proxy ?= 'proxy'? name = ID '<' model = [ Model | QualifiedName ] '>' 
	type = WriteFunctionType
	url = STRING
	authorize ?= 'authorize'? 
	('pathParams' (pathParams += [Attribute | QualifiedName])*)?
	('queryParams' (queryParams += [Attribute | QualifiedName])*)?
	('payload' (payload += [Attribute | QualifiedName])*)?
	('response' (response += [Attribute | QualifiedName])*)?
	(outcomes += HttpServerOutcome)*
;

HttpServerOutcome:
	'on' name = ID 
	('('(listeners += [HttpServerViewFunction | QualifiedName])*')')* 
;

HttpServerAceRead: 
	proxy ?= 'proxy'? name = ID '<' model = [ Model | QualifiedName ] '>' 
	type = ReadFunctionType
	url = STRING
	authorize ?= 'authorize'? 
	('pathParams' (pathParams += [Attribute | QualifiedName])*)?
	('queryParams' (queryParams += [Attribute | QualifiedName])*)?
	('payload' (payload += [Attribute | QualifiedName])*)?
	('response' (response += [Attribute | QualifiedName])*)?
;

HttpServerView: 
	name = ID 
	('{'
		(renderFunctions += HttpServerViewFunction)*
	'}')?		
;

HttpServerViewFunction:
	name = ID '(' model = [ Model | QualifiedName ] ')'
;

AuthUser: 
	name = ID
	 ('{'
		attributes += Attribute*
	'}')
;

Model:
	persistent ?= 'persistent'? name = ID ('extends' superModels+=[Model|QualifiedName] (',' superModels+=[Model|QualifiedName])* )? ('{'
		attributes += Attribute*
	'}')?
;

Scenario:
	name = ID
	('GIVEN' scenarios += [Scenario | QualifiedName]* )? 
	'WHEN' whenBlock = WhenBlock
	'THEN' thenBlock = ThenBlock
;

WhenBlock: 
	action = [HttpServerAce|QualifiedName] 
	dataDefinition = DataDefinition
	(authorization = Authorization)?
;

ThenBlock:
	statusCode = INT 
	('response' response = DataDefinition)?
;

DataDefinition: 
	{DataDefinition} 
	('uuid' uuid = STRING)? 
	('systemTime' systemtime = STRING)? 
	(data = AttributeDefinitionList)?
;

Authorization:
	'authorization' username = STRING ':' password = STRING
;

AttributeDefinitionList:
	{AttributeDefinitionList} '{' 
		attributeDefinitions += AttributeDefinition*
	'}'
;

ListAttributeDefinitionList:
	{ListAttributeDefinitionList} '[' 
		attributeDefinitionList += AttributeDefinitionList*
	']'
;

AttributeDefinition:
	attribute = [Attribute | QualifiedName] ':' value = Value
;

Attribute:
	unique ?= 'Unique'? 
	primaryKey ?= 'PrimaryKey'? 
	(constraint = Constraint)? 
	list ?= 'List'? 
	(type = Type | model = [Model | QualifiedName]) 
	name = ID 
	('references' foreignKey = [Attribute | QualifiedName])? 
	notReplayable ?= 'notReplayable'?
;

QualifiedName:
  ID ('.' ID)*
;

WriteFunctionType:
	'POST' | 'PUT' | 'DELETE'
;

ReadFunctionType:
	'GET'
;

Type:
	'Integer' | 'String' | 'Float' | 'Boolean' | 'DateTime' | 'Long'
;

Constraint:
	'NotEmpty' | 'NotNull'
;

Value:
	stringValue = STRING | intValue = INT | attributeDefinitionList = AttributeDefinitionList | listAttributeDefinitionList = ListAttributeDefinitionList
;
	
/******* S.D.G. *******/
	
	

