/*
 * generated by Xtext 2.10.0
 */
package com.anfelisa.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class AceGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ProjectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.anfelisa.Ace.Project");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cTargetKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTargetAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Alternatives cTargetAlternatives_3_0 = (Alternatives)cTargetAssignment_3.eContents().get(0);
		private final Keyword cTargetPHPKeyword_3_0_0 = (Keyword)cTargetAlternatives_3_0.eContents().get(0);
		private final Keyword cTargetES6Keyword_3_0_1 = (Keyword)cTargetAlternatives_3_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cActionsKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cActionsAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cActionsActionParserRuleCall_4_2_0 = (RuleCall)cActionsAssignment_4_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4_3 = (Keyword)cGroup_4.eContents().get(3);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cCommandsKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cCommandsAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cCommandsCommandParserRuleCall_5_2_0 = (RuleCall)cCommandsAssignment_5_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5_3 = (Keyword)cGroup_5.eContents().get(3);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cEventsKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_6_1 = (Keyword)cGroup_6.eContents().get(1);
		private final Assignment cEventsAssignment_6_2 = (Assignment)cGroup_6.eContents().get(2);
		private final RuleCall cEventsEventParserRuleCall_6_2_0 = (RuleCall)cEventsAssignment_6_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6_3 = (Keyword)cGroup_6.eContents().get(3);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cViewsKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_7_1 = (Keyword)cGroup_7.eContents().get(1);
		private final Assignment cViewsAssignment_7_2 = (Assignment)cGroup_7.eContents().get(2);
		private final RuleCall cViewsViewParserRuleCall_7_2_0 = (RuleCall)cViewsAssignment_7_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7_3 = (Keyword)cGroup_7.eContents().get(3);
		
		//Project:
		//	name=ID
		//	'target' ':' target=('PHP' | 'ES6') ('actions' '{'
		//	actions+=Action*
		//	'}')* ('commands' '{'
		//	commands+=Command*
		//	'}')* ('events' '{'
		//	events+=Event*
		//	'}')* ('views' '{'
		//	views+=View*
		//	'}')*;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID 'target' ':' target=('PHP' | 'ES6') ('actions' '{' actions+=Action* '}')* ('commands' '{' commands+=Command*
		//'}')* ('events' '{' events+=Event* '}')* ('views' '{' views+=View* '}')*
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//'target'
		public Keyword getTargetKeyword_1() { return cTargetKeyword_1; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//target=('PHP' | 'ES6')
		public Assignment getTargetAssignment_3() { return cTargetAssignment_3; }
		
		//('PHP' | 'ES6')
		public Alternatives getTargetAlternatives_3_0() { return cTargetAlternatives_3_0; }
		
		//'PHP'
		public Keyword getTargetPHPKeyword_3_0_0() { return cTargetPHPKeyword_3_0_0; }
		
		//'ES6'
		public Keyword getTargetES6Keyword_3_0_1() { return cTargetES6Keyword_3_0_1; }
		
		//('actions' '{' actions+=Action* '}')*
		public Group getGroup_4() { return cGroup_4; }
		
		//'actions'
		public Keyword getActionsKeyword_4_0() { return cActionsKeyword_4_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4_1() { return cLeftCurlyBracketKeyword_4_1; }
		
		//actions+=Action*
		public Assignment getActionsAssignment_4_2() { return cActionsAssignment_4_2; }
		
		//Action
		public RuleCall getActionsActionParserRuleCall_4_2_0() { return cActionsActionParserRuleCall_4_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4_3() { return cRightCurlyBracketKeyword_4_3; }
		
		//('commands' '{' commands+=Command* '}')*
		public Group getGroup_5() { return cGroup_5; }
		
		//'commands'
		public Keyword getCommandsKeyword_5_0() { return cCommandsKeyword_5_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5_1() { return cLeftCurlyBracketKeyword_5_1; }
		
		//commands+=Command*
		public Assignment getCommandsAssignment_5_2() { return cCommandsAssignment_5_2; }
		
		//Command
		public RuleCall getCommandsCommandParserRuleCall_5_2_0() { return cCommandsCommandParserRuleCall_5_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5_3() { return cRightCurlyBracketKeyword_5_3; }
		
		//('events' '{' events+=Event* '}')*
		public Group getGroup_6() { return cGroup_6; }
		
		//'events'
		public Keyword getEventsKeyword_6_0() { return cEventsKeyword_6_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_6_1() { return cLeftCurlyBracketKeyword_6_1; }
		
		//events+=Event*
		public Assignment getEventsAssignment_6_2() { return cEventsAssignment_6_2; }
		
		//Event
		public RuleCall getEventsEventParserRuleCall_6_2_0() { return cEventsEventParserRuleCall_6_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6_3() { return cRightCurlyBracketKeyword_6_3; }
		
		//('views' '{' views+=View* '}')*
		public Group getGroup_7() { return cGroup_7; }
		
		//'views'
		public Keyword getViewsKeyword_7_0() { return cViewsKeyword_7_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_7_1() { return cLeftCurlyBracketKeyword_7_1; }
		
		//views+=View*
		public Assignment getViewsAssignment_7_2() { return cViewsAssignment_7_2; }
		
		//View
		public RuleCall getViewsViewParserRuleCall_7_2_0() { return cViewsViewParserRuleCall_7_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7_3() { return cRightCurlyBracketKeyword_7_3; }
	}
	public class ActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.anfelisa.Ace.Action");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cExecutesKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cCommandAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final CrossReference cCommandCommandCrossReference_1_1_0 = (CrossReference)cCommandAssignment_1_1.eContents().get(0);
		private final RuleCall cCommandCommandIDTerminalRuleCall_1_1_0_1 = (RuleCall)cCommandCommandCrossReference_1_1_0.eContents().get(1);
		
		//Action:
		//	name=ID ('executes' command=[Command])?;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ('executes' command=[Command])?
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//('executes' command=[Command])?
		public Group getGroup_1() { return cGroup_1; }
		
		//'executes'
		public Keyword getExecutesKeyword_1_0() { return cExecutesKeyword_1_0; }
		
		//command=[Command]
		public Assignment getCommandAssignment_1_1() { return cCommandAssignment_1_1; }
		
		//[Command]
		public CrossReference getCommandCommandCrossReference_1_1_0() { return cCommandCommandCrossReference_1_1_0; }
		
		//ID
		public RuleCall getCommandCommandIDTerminalRuleCall_1_1_0_1() { return cCommandCommandIDTerminalRuleCall_1_1_0_1; }
	}
	public class CommandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.anfelisa.Ace.Command");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cEventsOnOutcomeAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cEventsOnOutcomeEventOnOutcomeParserRuleCall_1_1_0 = (RuleCall)cEventsOnOutcomeAssignment_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//Command:
		//	name=ID ('{'
		//	eventsOnOutcome+=EventOnOutcome*
		//	'}')*;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ('{' eventsOnOutcome+=EventOnOutcome* '}')*
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//('{' eventsOnOutcome+=EventOnOutcome* '}')*
		public Group getGroup_1() { return cGroup_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1_0() { return cLeftCurlyBracketKeyword_1_0; }
		
		//eventsOnOutcome+=EventOnOutcome*
		public Assignment getEventsOnOutcomeAssignment_1_1() { return cEventsOnOutcomeAssignment_1_1; }
		
		//EventOnOutcome
		public RuleCall getEventsOnOutcomeEventOnOutcomeParserRuleCall_1_1_0() { return cEventsOnOutcomeEventOnOutcomeParserRuleCall_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_1_2() { return cRightCurlyBracketKeyword_1_2; }
	}
	public class EventOnOutcomeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.anfelisa.Ace.EventOnOutcome");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOnKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cOutcomeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOutcomeIDTerminalRuleCall_1_0 = (RuleCall)cOutcomeAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cPublishesKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Assignment cEventsAssignment_2_2 = (Assignment)cGroup_2.eContents().get(2);
		private final CrossReference cEventsEventCrossReference_2_2_0 = (CrossReference)cEventsAssignment_2_2.eContents().get(0);
		private final RuleCall cEventsEventIDTerminalRuleCall_2_2_0_1 = (RuleCall)cEventsEventCrossReference_2_2_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2_3 = (Keyword)cGroup_2.eContents().get(3);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cTriggersKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_3_1 = (Keyword)cGroup_3.eContents().get(1);
		private final Assignment cActionsAssignment_3_2 = (Assignment)cGroup_3.eContents().get(2);
		private final CrossReference cActionsActionCrossReference_3_2_0 = (CrossReference)cActionsAssignment_3_2.eContents().get(0);
		private final RuleCall cActionsActionIDTerminalRuleCall_3_2_0_1 = (RuleCall)cActionsActionCrossReference_3_2_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		
		//EventOnOutcome:
		//	'on' outcome=ID ('publishes' '(' events+=[Event]* ')')? ('triggers' '(' actions+=[Action]* ')')?;
		@Override public ParserRule getRule() { return rule; }
		
		//'on' outcome=ID ('publishes' '(' events+=[Event]* ')')? ('triggers' '(' actions+=[Action]* ')')?
		public Group getGroup() { return cGroup; }
		
		//'on'
		public Keyword getOnKeyword_0() { return cOnKeyword_0; }
		
		//outcome=ID
		public Assignment getOutcomeAssignment_1() { return cOutcomeAssignment_1; }
		
		//ID
		public RuleCall getOutcomeIDTerminalRuleCall_1_0() { return cOutcomeIDTerminalRuleCall_1_0; }
		
		//('publishes' '(' events+=[Event]* ')')?
		public Group getGroup_2() { return cGroup_2; }
		
		//'publishes'
		public Keyword getPublishesKeyword_2_0() { return cPublishesKeyword_2_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_1() { return cLeftParenthesisKeyword_2_1; }
		
		//events+=[Event]*
		public Assignment getEventsAssignment_2_2() { return cEventsAssignment_2_2; }
		
		//[Event]
		public CrossReference getEventsEventCrossReference_2_2_0() { return cEventsEventCrossReference_2_2_0; }
		
		//ID
		public RuleCall getEventsEventIDTerminalRuleCall_2_2_0_1() { return cEventsEventIDTerminalRuleCall_2_2_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_3() { return cRightParenthesisKeyword_2_3; }
		
		//('triggers' '(' actions+=[Action]* ')')?
		public Group getGroup_3() { return cGroup_3; }
		
		//'triggers'
		public Keyword getTriggersKeyword_3_0() { return cTriggersKeyword_3_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3_1() { return cLeftParenthesisKeyword_3_1; }
		
		//actions+=[Action]*
		public Assignment getActionsAssignment_3_2() { return cActionsAssignment_3_2; }
		
		//[Action]
		public CrossReference getActionsActionCrossReference_3_2_0() { return cActionsActionCrossReference_3_2_0; }
		
		//ID
		public RuleCall getActionsActionIDTerminalRuleCall_3_2_0_1() { return cActionsActionIDTerminalRuleCall_3_2_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3_3() { return cRightParenthesisKeyword_3_3; }
	}
	public class EventElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.anfelisa.Ace.Event");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cListenedToByKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cListenersAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final CrossReference cListenersRenderFunctionCrossReference_1_2_0 = (CrossReference)cListenersAssignment_1_2.eContents().get(0);
		private final RuleCall cListenersRenderFunctionQualifiedNameParserRuleCall_1_2_0_1 = (RuleCall)cListenersRenderFunctionCrossReference_1_2_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		
		//Event:
		//	name=ID ('listenedToBy' '(' listeners+=[RenderFunction|QualifiedName]* ')')?;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ('listenedToBy' '(' listeners+=[RenderFunction|QualifiedName]* ')')?
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//('listenedToBy' '(' listeners+=[RenderFunction|QualifiedName]* ')')?
		public Group getGroup_1() { return cGroup_1; }
		
		//'listenedToBy'
		public Keyword getListenedToByKeyword_1_0() { return cListenedToByKeyword_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_1() { return cLeftParenthesisKeyword_1_1; }
		
		//listeners+=[RenderFunction|QualifiedName]*
		public Assignment getListenersAssignment_1_2() { return cListenersAssignment_1_2; }
		
		//[RenderFunction|QualifiedName]
		public CrossReference getListenersRenderFunctionCrossReference_1_2_0() { return cListenersRenderFunctionCrossReference_1_2_0; }
		
		//QualifiedName
		public RuleCall getListenersRenderFunctionQualifiedNameParserRuleCall_1_2_0_1() { return cListenersRenderFunctionQualifiedNameParserRuleCall_1_2_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_3() { return cRightParenthesisKeyword_1_3; }
	}
	public class ViewElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.anfelisa.Ace.View");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cRenderFunctionsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRenderFunctionsRenderFunctionParserRuleCall_1_1_0 = (RuleCall)cRenderFunctionsAssignment_1_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//View:
		//	name=ID ('{'
		//	renderFunctions+=RenderFunction*
		//	'}')*;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID ('{' renderFunctions+=RenderFunction* '}')*
		public Group getGroup() { return cGroup; }
		
		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }
		
		//('{' renderFunctions+=RenderFunction* '}')*
		public Group getGroup_1() { return cGroup_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1_0() { return cLeftCurlyBracketKeyword_1_0; }
		
		//renderFunctions+=RenderFunction*
		public Assignment getRenderFunctionsAssignment_1_1() { return cRenderFunctionsAssignment_1_1; }
		
		//RenderFunction
		public RuleCall getRenderFunctionsRenderFunctionParserRuleCall_1_1_0() { return cRenderFunctionsRenderFunctionParserRuleCall_1_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_1_2() { return cRightCurlyBracketKeyword_1_2; }
	}
	public class RenderFunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.anfelisa.Ace.RenderFunction");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//RenderFunction:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }
		
		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.anfelisa.Ace.QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName:
		//	ID ('.' ID)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ID ('.' ID)*
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//('.' ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	
	
	private final ProjectElements pProject;
	private final ActionElements pAction;
	private final CommandElements pCommand;
	private final EventOnOutcomeElements pEventOnOutcome;
	private final EventElements pEvent;
	private final ViewElements pView;
	private final RenderFunctionElements pRenderFunction;
	private final QualifiedNameElements pQualifiedName;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public AceGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pProject = new ProjectElements();
		this.pAction = new ActionElements();
		this.pCommand = new CommandElements();
		this.pEventOnOutcome = new EventOnOutcomeElements();
		this.pEvent = new EventElements();
		this.pView = new ViewElements();
		this.pRenderFunction = new RenderFunctionElements();
		this.pQualifiedName = new QualifiedNameElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("com.anfelisa.Ace".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Project:
	//	name=ID
	//	'target' ':' target=('PHP' | 'ES6') ('actions' '{'
	//	actions+=Action*
	//	'}')* ('commands' '{'
	//	commands+=Command*
	//	'}')* ('events' '{'
	//	events+=Event*
	//	'}')* ('views' '{'
	//	views+=View*
	//	'}')*;
	public ProjectElements getProjectAccess() {
		return pProject;
	}
	
	public ParserRule getProjectRule() {
		return getProjectAccess().getRule();
	}
	
	//Action:
	//	name=ID ('executes' command=[Command])?;
	public ActionElements getActionAccess() {
		return pAction;
	}
	
	public ParserRule getActionRule() {
		return getActionAccess().getRule();
	}
	
	//Command:
	//	name=ID ('{'
	//	eventsOnOutcome+=EventOnOutcome*
	//	'}')*;
	public CommandElements getCommandAccess() {
		return pCommand;
	}
	
	public ParserRule getCommandRule() {
		return getCommandAccess().getRule();
	}
	
	//EventOnOutcome:
	//	'on' outcome=ID ('publishes' '(' events+=[Event]* ')')? ('triggers' '(' actions+=[Action]* ')')?;
	public EventOnOutcomeElements getEventOnOutcomeAccess() {
		return pEventOnOutcome;
	}
	
	public ParserRule getEventOnOutcomeRule() {
		return getEventOnOutcomeAccess().getRule();
	}
	
	//Event:
	//	name=ID ('listenedToBy' '(' listeners+=[RenderFunction|QualifiedName]* ')')?;
	public EventElements getEventAccess() {
		return pEvent;
	}
	
	public ParserRule getEventRule() {
		return getEventAccess().getRule();
	}
	
	//View:
	//	name=ID ('{'
	//	renderFunctions+=RenderFunction*
	//	'}')*;
	public ViewElements getViewAccess() {
		return pView;
	}
	
	public ParserRule getViewRule() {
		return getViewAccess().getRule();
	}
	
	//RenderFunction:
	//	name=ID;
	public RenderFunctionElements getRenderFunctionAccess() {
		return pRenderFunction;
	}
	
	public ParserRule getRenderFunctionRule() {
		return getRenderFunctionAccess().getRule();
	}
	
	//QualifiedName:
	//	ID ('.' ID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return pQualifiedName;
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
