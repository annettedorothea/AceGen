/**
 * generated by Xtext 2.10.0
 */
package com.anfelisa.generator;

import com.anfelisa.ace.Action;
import com.anfelisa.ace.Command;
import com.anfelisa.ace.Event;
import com.anfelisa.ace.Project;
import com.anfelisa.ace.View;
import com.anfelisa.extensions.ActionExtension;
import com.anfelisa.extensions.CommandExtension;
import com.anfelisa.extensions.EventExtension;
import com.anfelisa.extensions.ViewExtension;
import com.anfelisa.generator.ACEOutputConfigurationProvider;
import com.anfelisa.generator.Template;
import com.google.common.base.Objects;
import javax.inject.Inject;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.Extension;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class AceGenerator extends AbstractGenerator {
  @Inject
  private Template template;
  
  @Inject
  @Extension
  private ActionExtension _actionExtension;
  
  @Inject
  @Extension
  private CommandExtension _commandExtension;
  
  @Inject
  @Extension
  private EventExtension _eventExtension;
  
  @Inject
  @Extension
  private ViewExtension _viewExtension;
  
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    if ((((!Objects.equal(resource, null)) && (!Objects.equal(resource.getContents(), null))) && (resource.getContents().size() > 0))) {
      EList<EObject> _contents = resource.getContents();
      EObject _get = _contents.get(0);
      final Project project = ((Project) _get);
      EList<Action> _actions = project.getActions();
      for (final Action action : _actions) {
        {
          String _name = project.getName();
          String _plus = (_name + "/actions/");
          String _abstractActionName = this._actionExtension.abstractActionName(action);
          String _plus_1 = (_plus + _abstractActionName);
          String _plus_2 = (_plus_1 + ".es6");
          CharSequence _generateAbstractActionFile = this.template.generateAbstractActionFile(action);
          fsa.generateFile(_plus_2, 
            IFileSystemAccess.DEFAULT_OUTPUT, _generateAbstractActionFile);
          String _name_1 = project.getName();
          String _plus_3 = (_name_1 + "/actions/");
          String _actionName = this._actionExtension.actionName(action);
          String _plus_4 = (_plus_3 + _actionName);
          String _plus_5 = (_plus_4 + ".es6");
          CharSequence _generateInitialActionFile = this.template.generateInitialActionFile(action);
          fsa.generateFile(_plus_5, 
            ACEOutputConfigurationProvider.DEFAULT_JAVASCRIPT_OUTPUT_ONCE, _generateInitialActionFile);
        }
      }
      EList<Command> _commands = project.getCommands();
      for (final Command command : _commands) {
        {
          String _name = project.getName();
          String _plus = (_name + "/commands/");
          String _abstractCommandName = this._commandExtension.abstractCommandName(command);
          String _plus_1 = (_plus + _abstractCommandName);
          String _plus_2 = (_plus_1 + ".es6");
          CharSequence _generateAbstractCommandFile = this.template.generateAbstractCommandFile(command);
          fsa.generateFile(_plus_2, 
            IFileSystemAccess.DEFAULT_OUTPUT, _generateAbstractCommandFile);
          String _name_1 = project.getName();
          String _plus_3 = (_name_1 + "/commands/");
          String _commandName = this._commandExtension.commandName(command);
          String _plus_4 = (_plus_3 + _commandName);
          String _plus_5 = (_plus_4 + ".es6");
          CharSequence _generateInitialCommandFile = this.template.generateInitialCommandFile(command);
          fsa.generateFile(_plus_5, 
            ACEOutputConfigurationProvider.DEFAULT_JAVASCRIPT_OUTPUT_ONCE, _generateInitialCommandFile);
        }
      }
      String _name = project.getName();
      String _plus = (_name + "/EventListenerRegistration.es6");
      CharSequence _generateEventListenerRegistration = this.template.generateEventListenerRegistration(project);
      fsa.generateFile(_plus, 
        IFileSystemAccess.DEFAULT_OUTPUT, _generateEventListenerRegistration);
      EList<Event> _events = project.getEvents();
      for (final Event event : _events) {
        String _name_1 = project.getName();
        String _plus_1 = (_name_1 + "/events/");
        String _eventName = this._eventExtension.eventName(event);
        String _plus_2 = (_plus_1 + _eventName);
        String _plus_3 = (_plus_2 + ".es6");
        CharSequence _generateEventFile = this.template.generateEventFile(event);
        fsa.generateFile(_plus_3, 
          IFileSystemAccess.DEFAULT_OUTPUT, _generateEventFile);
      }
      EList<View> _views = project.getViews();
      for (final View view : _views) {
        String _name_2 = project.getName();
        String _plus_4 = (_name_2 + "/");
        String _viewName = this._viewExtension.viewName(view);
        String _plus_5 = (_plus_4 + _viewName);
        String _plus_6 = (_plus_5 + ".es6");
        CharSequence _generateView = this.template.generateView(view);
        fsa.generateFile(_plus_6, 
          ACEOutputConfigurationProvider.DEFAULT_JAVASCRIPT_OUTPUT_ONCE, _generateView);
      }
      String _name_3 = project.getName();
      String _plus_7 = (_name_3 + "/htmlDev.snippet");
      CharSequence _generateHtmlDevSnippet = this.template.generateHtmlDevSnippet(project);
      fsa.generateFile(_plus_7, 
        IFileSystemAccess.DEFAULT_OUTPUT, _generateHtmlDevSnippet);
    }
  }
}
