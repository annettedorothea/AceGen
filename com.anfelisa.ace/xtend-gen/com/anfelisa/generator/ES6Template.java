package com.anfelisa.generator;

import com.anfelisa.ace.Action;
import com.anfelisa.ace.Command;
import com.anfelisa.ace.Event;
import com.anfelisa.ace.EventOnOutcome;
import com.anfelisa.ace.Project;
import com.anfelisa.ace.View;
import com.anfelisa.ace.ViewFunction;
import com.anfelisa.extensions.ActionExtension;
import com.anfelisa.extensions.CommandExtension;
import com.anfelisa.extensions.EventExtension;
import com.anfelisa.extensions.ProjectExtension;
import com.anfelisa.extensions.ViewExtension;
import com.google.common.base.Objects;
import javax.inject.Inject;
import org.eclipse.emf.common.util.EList;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.xbase.lib.Extension;

@SuppressWarnings("all")
public class ES6Template {
  @Inject
  @Extension
  private ActionExtension _actionExtension;
  
  @Inject
  @Extension
  private CommandExtension _commandExtension;
  
  @Inject
  @Extension
  private EventExtension _eventExtension;
  
  @Inject
  @Extension
  private ViewExtension _viewExtension;
  
  @Inject
  @Extension
  private ProjectExtension _projectExtension;
  
  public CharSequence generateAbstractActionFile(final Action it) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("\'use strict\';");
    _builder.newLine();
    _builder.newLine();
    _builder.append("class ");
    String _abstractActionName = this._actionExtension.abstractActionName(it);
    _builder.append(_abstractActionName, "");
    _builder.append(" extends Action {");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("constructor(actionParam) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("super(actionParam, \'");
    String _actionName = this._actionExtension.actionName(it);
    _builder.append(_actionName, "        ");
    _builder.append("\');");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    {
      Command _command = it.getCommand();
      boolean _notEquals = (!Objects.equal(_command, null));
      if (_notEquals) {
        _builder.append("\t");
        _builder.append("getCommand() {");
        _builder.newLine();
        {
          Command _command_1 = it.getCommand();
          boolean _notEquals_1 = (!Objects.equal(_command_1, null));
          if (_notEquals_1) {
            _builder.append("\t");
            _builder.append("\t");
            _builder.append("return new ");
            Command _command_2 = it.getCommand();
            String _commandName = this._commandExtension.commandName(_command_2);
            _builder.append(_commandName, "\t\t");
            _builder.append("(this.actionData);");
            _builder.newLineIfNotEmpty();
          } else {
            _builder.append("\t");
            _builder.append("\t");
            _builder.append("return null;");
            _builder.newLine();
          }
        }
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
      }
    }
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/*       S.D.G.       */");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generateInitialActionFile(final Action it) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("\'use strict\';");
    _builder.newLine();
    _builder.newLine();
    _builder.append("class ");
    String _actionName = this._actionExtension.actionName(it);
    _builder.append(_actionName, "");
    _builder.append(" extends ");
    String _abstractActionName = this._actionExtension.abstractActionName(it);
    _builder.append(_abstractActionName, "");
    _builder.append(" {");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("captureActionParam() {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("initActionData() {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("releaseActionParam() {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/*       S.D.G.       */");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generateAbstractCommandFile(final Command it) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("\'use strict\';");
    _builder.newLine();
    _builder.newLine();
    _builder.append("class ");
    String _abstractCommandName = this._commandExtension.abstractCommandName(it);
    _builder.append(_abstractCommandName, "");
    _builder.append(" extends Command {");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("constructor(commandParam) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("super(commandParam, \"");
    String _commandName = this._commandExtension.commandName(it);
    _builder.append(_commandName, "        ");
    _builder.append("\");");
    _builder.newLineIfNotEmpty();
    {
      EList<EventOnOutcome> _eventsOnOutcome = it.getEventsOnOutcome();
      for(final EventOnOutcome eventOnOutcome : _eventsOnOutcome) {
        _builder.append("        ");
        _builder.append("this.");
        String _outcome = eventOnOutcome.getOutcome();
        _builder.append(_outcome, "        ");
        _builder.append(" = \"");
        String _outcome_1 = eventOnOutcome.getOutcome();
        _builder.append(_outcome_1, "        ");
        _builder.append("\";");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("publishEvents() {");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("let promises = [];");
    _builder.newLine();
    _builder.append("    \t");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("switch (this.commandData.outcome) {");
    _builder.newLine();
    {
      EList<EventOnOutcome> _eventsOnOutcome_1 = it.getEventsOnOutcome();
      for(final EventOnOutcome eventOnOutcome_1 : _eventsOnOutcome_1) {
        _builder.append("        ");
        _builder.append("case this.");
        String _outcome_2 = eventOnOutcome_1.getOutcome();
        _builder.append(_outcome_2, "        ");
        _builder.append(":");
        _builder.newLineIfNotEmpty();
        {
          EList<Event> _events = eventOnOutcome_1.getEvents();
          for(final Event event : _events) {
            _builder.append("        ");
            _builder.append("\t");
            _builder.append("promises.push(new ");
            String _eventName = this._eventExtension.eventName(event);
            _builder.append(_eventName, "        \t");
            _builder.append("(this.commandData).publish());");
            _builder.newLineIfNotEmpty();
          }
        }
        {
          EList<Action> _actions = eventOnOutcome_1.getActions();
          for(final Action action : _actions) {
            _builder.append("        ");
            _builder.append("\t");
            _builder.append("promises.push(new TriggerAction(new ");
            String _actionName = this._actionExtension.actionName(action);
            _builder.append(_actionName, "        \t");
            _builder.append("(this.commandData)).publish());");
            _builder.newLineIfNotEmpty();
          }
        }
        _builder.append("        ");
        _builder.append("\t");
        _builder.append("break;");
        _builder.newLine();
      }
    }
    _builder.append("    \t");
    _builder.append("default:");
    _builder.newLine();
    _builder.append("    \t\t");
    _builder.append("throw \'unhandled outcome: \' + this.commandData.outcome;");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("return Promise.all(promises);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/*       S.D.G.       */");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generateInitialCommandFile(final Command it) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("\'use strict\';");
    _builder.newLine();
    _builder.newLine();
    _builder.append("class ");
    String _commandName = this._commandExtension.commandName(it);
    _builder.append(_commandName, "");
    _builder.append(" extends ");
    String _abstractCommandName = this._commandExtension.abstractCommandName(it);
    _builder.append(_abstractCommandName, "");
    _builder.append(" {");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("execute() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return new Promise((resolve) => {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("resolve();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("});");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/*       S.D.G.       */");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generateAbstractEventFile(final Event it) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("\'use strict\';");
    _builder.newLine();
    _builder.newLine();
    _builder.append("class ");
    String _abstractEventName = this._eventExtension.abstractEventName(it);
    _builder.append(_abstractEventName, "");
    _builder.append(" extends Event {");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("constructor(eventParam) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("super(eventParam, \'");
    String _eventName = this._eventExtension.eventName(it);
    _builder.append(_eventName, "        ");
    _builder.append("\');");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/*       S.D.G.       */");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generateInitialEventFile(final Event it) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("\'use strict\';");
    _builder.newLine();
    _builder.newLine();
    _builder.append("class ");
    String _eventName = this._eventExtension.eventName(it);
    _builder.append(_eventName, "");
    _builder.append(" extends ");
    String _abstractEventName = this._eventExtension.abstractEventName(it);
    _builder.append(_abstractEventName, "");
    _builder.append(" {");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("prepareDataForView() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("this.eventData = JSON.parse(JSON.stringify(this.eventParam));");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (this.eventData.data === undefined) {");
    _builder.newLine();
    _builder.append("        \t");
    _builder.append("this.eventData.data = {};");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/*       S.D.G.       */");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generateEventListenerRegistration(final Project it) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("\'use strict\';");
    _builder.newLine();
    _builder.newLine();
    _builder.append("class EventListenerRegistration");
    String _projectName = this._projectExtension.projectName(it);
    _builder.append(_projectName, "");
    _builder.append(" {");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("static init() {");
    _builder.newLine();
    {
      EList<Event> _events = it.getEvents();
      for(final Event event : _events) {
        {
          EList<ViewFunction> _listeners = event.getListeners();
          for(final ViewFunction renderFunction : _listeners) {
            _builder.append("    \t");
            _builder.append("ACEController.registerListener(\'");
            String _eventName = this._eventExtension.eventName(event);
            _builder.append(_eventName, "    \t");
            _builder.append("\', ");
            String _viewFunctionWithViewName = this._viewExtension.viewFunctionWithViewName(renderFunction);
            _builder.append(_viewFunctionWithViewName, "    \t");
            _builder.append(");");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("EventListenerRegistration");
    String _projectName_1 = this._projectExtension.projectName(it);
    _builder.append(_projectName_1, "");
    _builder.append(".init();");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("/*       S.D.G.       */");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generateView(final View it) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("\'use strict\';");
    _builder.newLine();
    _builder.newLine();
    _builder.append("class ");
    String _viewName = this._viewExtension.viewName(it);
    _builder.append(_viewName, "");
    _builder.append(" {");
    _builder.newLineIfNotEmpty();
    {
      EList<ViewFunction> _renderFunctions = it.getRenderFunctions();
      for(final ViewFunction renderFunction : _renderFunctions) {
        _builder.append("    ");
        _builder.append("static ");
        String _name = renderFunction.getName();
        _builder.append(_name, "    ");
        _builder.append("(eventData) {");
        _builder.newLineIfNotEmpty();
        _builder.append("    ");
        _builder.append("};");
        _builder.newLine();
        _builder.append("    ");
        _builder.newLine();
      }
    }
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/*                    S.D.G.                    */");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generateAction() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("\'use strict\';");
    _builder.newLine();
    _builder.newLine();
    _builder.append("class Action {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("constructor(actionParam, actionName) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (actionParam === undefined) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("actionParam = {};");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("this.actionParam = JSON.parse(JSON.stringify(actionParam));");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("this.actionName = actionName;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("this.actionData = {};");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("captureActionParam() {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("releaseActionParam() {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("initActionData() {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("getCommand() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("throw \"no command defined for \" + this.actionName;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("apply() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("ACEController.addActionToQueue(this);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("applyAction() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return new Promise((resolve, reject) => {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("if (ACEController.execution === ACEController.LIVE) {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("this.actionData.uuid = ACEController.uuidGenerator.createUUID();");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("if (ACEController.execution === ACEController.LIVE) {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("this.captureActionParam();");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("} else {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("this.releaseActionParam();");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("this.initActionData();");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("ACEController.addItemToTimeLine({action: this});");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("let command = this.getCommand()");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("if (command) {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("command.executeCommand().then(() => {");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("resolve();");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("},");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("(error) => {");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("reject(error + \" when executing command \" + command.commandName);");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("});");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("} else {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("resolve();");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("});");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/*       S.D.G.       */");
    _builder.newLine();
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generateCommand() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("\'use strict\';");
    _builder.newLine();
    _builder.newLine();
    _builder.append("class Command {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("constructor(commandParam, commandName) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("this.commandParam = JSON.parse(JSON.stringify(commandParam));");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("this.commandName = commandName;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("this.commandData = {};");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("execute() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("throw \"no execute method defined for \" + this.commandName;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("publishEvents() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("throw \"no publishEvents method defined for \" + this.commandName;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("executeCommand() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return new Promise((resolve, reject) => {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("if (ACEController.execution !== ACEController.REPLAY) {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("this.execute().then(() => {");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("ACEController.addItemToTimeLine({command: this});");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("this.publishEvents().then(() => {");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("ACEController.applyNextActions();");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("resolve();");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("}, (error) => {");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("reject(error + \" when publishing events of command \" + this.commandName);");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("});");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("}, (error) => {");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("reject(error + \" when executing command \" + this.commandName);");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("});");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("} else {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("let timelineCommand = ACEController.getCommandByUuid(this.commandParam.uuid);");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("this.commandData = timelineCommand.commandData;");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("ACEController.addItemToTimeLine({command: this});");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("this.publishEvents().then(() => {");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("setTimeout(ACEController.applyNextActions, ACEController.pauseInMillis);");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("resolve();");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("}, (error) => {");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("reject(error + \" when publishing events of command \" + this.commandName);");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("});");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("});");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("prepare() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (ACEController.execution === ACEController.E2E) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("return new Promise((resolve, reject) => {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("$.ajax({");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("url: \'api/database/prepare?uuid=\' + this.commandParam.uuid,");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("type: \'put\',");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("headers: {");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("\'Accept\': \'application/json\',");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("\'Content-Type\': \'application/json\'");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("},");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("success: function () {");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("resolve();");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("},");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("error: function (jqxhr, textStatus, error) {");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("reject(error);");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("});");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("});");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("} else {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("return new Promise((resolve) => {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("resolve();");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("});");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("httpGet(url, queryParams) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return this.prepare().then(() => {");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("queryParams = this.addUuidToQueryParams(queryParams);");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("return new Promise((resolve, reject) => {");
    _builder.newLine();
    _builder.append("\t            ");
    _builder.append("let authorization = basicAuth(this.commandParam.username, this.commandParam.password);");
    _builder.newLine();
    _builder.append("\t            ");
    _builder.append("$.ajax({");
    _builder.newLine();
    _builder.append("\t                ");
    _builder.append("url: url + this.queryParamString(url, queryParams),");
    _builder.newLine();
    _builder.append("\t                ");
    _builder.append("type: \'get\',");
    _builder.newLine();
    _builder.append("\t                ");
    _builder.append("beforeSend : function(req) {");
    _builder.newLine();
    _builder.append("\t                    ");
    _builder.append("if (authorization !== undefined) {");
    _builder.newLine();
    _builder.append("\t                        ");
    _builder.append("req.setRequestHeader(\'Authorization\', authorization);");
    _builder.newLine();
    _builder.append("\t                    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t                ");
    _builder.append("},");
    _builder.newLine();
    _builder.append("\t                ");
    _builder.append("headers: {");
    _builder.newLine();
    _builder.append("\t                    ");
    _builder.append("\'Accept\': \'application/json\',");
    _builder.newLine();
    _builder.append("\t                    ");
    _builder.append("\'Content-Type\': \'application/json\'");
    _builder.newLine();
    _builder.append("\t                ");
    _builder.append("},");
    _builder.newLine();
    _builder.append("\t                ");
    _builder.append("success: function (data) {");
    _builder.newLine();
    _builder.append("\t                    ");
    _builder.append("resolve(data);");
    _builder.newLine();
    _builder.append("\t                ");
    _builder.append("},");
    _builder.newLine();
    _builder.append("\t                ");
    _builder.append("error: function (jqxhr, textStatus, error) {");
    _builder.newLine();
    _builder.append("\t                \t");
    _builder.append("reject(error);");
    _builder.newLine();
    _builder.append("\t                ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t            ");
    _builder.append("});");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("});");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}, (error) => {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("reject(error);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("});");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("httpPost(url, queryParams, data) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return this.prepare().then(() => {");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("queryParams = this.addUuidToQueryParams(queryParams);");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("data = this.addUuidToData(data);");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("let authorization = basicAuth(this.commandParam.username, this.commandParam.password);");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("return new Promise((resolve, reject) => {");
    _builder.newLine();
    _builder.append("\t            ");
    _builder.append("$.ajax({");
    _builder.newLine();
    _builder.append("\t                ");
    _builder.append("url: url + this.queryParamString(url, queryParams),");
    _builder.newLine();
    _builder.append("\t                ");
    _builder.append("type: \'post\',");
    _builder.newLine();
    _builder.append("\t                ");
    _builder.append("data: JSON.stringify(data),");
    _builder.newLine();
    _builder.append("\t                ");
    _builder.append("beforeSend : function(req) {");
    _builder.newLine();
    _builder.append("\t                    ");
    _builder.append("if (authorization !== undefined) {");
    _builder.newLine();
    _builder.append("\t                        ");
    _builder.append("req.setRequestHeader(\'Authorization\', authorization);");
    _builder.newLine();
    _builder.append("\t                    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t                ");
    _builder.append("},");
    _builder.newLine();
    _builder.append("\t                ");
    _builder.append("headers: {");
    _builder.newLine();
    _builder.append("\t                    ");
    _builder.append("\'Accept\': \'text/plain\',");
    _builder.newLine();
    _builder.append("\t                    ");
    _builder.append("\'Content-Type\': \'application/json\'");
    _builder.newLine();
    _builder.append("\t                ");
    _builder.append("},");
    _builder.newLine();
    _builder.append("\t                ");
    _builder.append("success: function (data) {");
    _builder.newLine();
    _builder.append("\t                    ");
    _builder.append("resolve(data);");
    _builder.newLine();
    _builder.append("\t                ");
    _builder.append("},");
    _builder.newLine();
    _builder.append("\t                ");
    _builder.append("error: function (jqxhr, textStatus, error) {");
    _builder.newLine();
    _builder.append("\t                \t");
    _builder.append("reject(error);");
    _builder.newLine();
    _builder.append("\t                ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t            ");
    _builder.append("});");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("});");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}, (error) => {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("reject(error);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("});");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("httpPut(url, queryParams, data) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return this.prepare().then(() => {");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("queryParams = this.addUuidToQueryParams(queryParams);");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("data = this.addUuidToData(data);");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("let authorization = basicAuth(this.commandParam.username, this.commandParam.password);");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("return new Promise((resolve, reject) => {");
    _builder.newLine();
    _builder.append("\t            ");
    _builder.append("$.ajax({");
    _builder.newLine();
    _builder.append("\t                ");
    _builder.append("url: url + this.queryParamString(url, queryParams),");
    _builder.newLine();
    _builder.append("\t                ");
    _builder.append("type: \'put\',");
    _builder.newLine();
    _builder.append("\t                ");
    _builder.append("data: JSON.stringify(data),");
    _builder.newLine();
    _builder.append("\t                ");
    _builder.append("beforeSend : function(req) {");
    _builder.newLine();
    _builder.append("\t                    ");
    _builder.append("if (authorization !== undefined) {");
    _builder.newLine();
    _builder.append("\t                        ");
    _builder.append("req.setRequestHeader(\'Authorization\', authorization);");
    _builder.newLine();
    _builder.append("\t                    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t                ");
    _builder.append("},");
    _builder.newLine();
    _builder.append("\t                ");
    _builder.append("headers: {");
    _builder.newLine();
    _builder.append("\t                    ");
    _builder.append("\'Accept\': \'application/json\',");
    _builder.newLine();
    _builder.append("\t                    ");
    _builder.append("\'Content-Type\': \'application/json\'");
    _builder.newLine();
    _builder.append("\t                ");
    _builder.append("},");
    _builder.newLine();
    _builder.append("\t                ");
    _builder.append("success: function () {");
    _builder.newLine();
    _builder.append("\t                    ");
    _builder.append("resolve();");
    _builder.newLine();
    _builder.append("\t                ");
    _builder.append("},");
    _builder.newLine();
    _builder.append("\t                ");
    _builder.append("error: function (jqxhr, textStatus, error) {");
    _builder.newLine();
    _builder.append("\t                \t");
    _builder.append("reject(error);");
    _builder.newLine();
    _builder.append("\t                ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t            ");
    _builder.append("});");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("});");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}, (error) => {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("reject(error);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("});");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("httpDelete(url, queryParams, data) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return this.prepare().then(() => {");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("queryParams = this.addUuidToQueryParams(queryParams);");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("data = this.addUuidToData(data);");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("let authorization = basicAuth(this.commandParam.username, this.commandParam.password);");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("return new Promise((resolve, reject) => {");
    _builder.newLine();
    _builder.append("\t            ");
    _builder.append("$.ajax({");
    _builder.newLine();
    _builder.append("\t                ");
    _builder.append("url: url + this.queryParamString(url, queryParams),");
    _builder.newLine();
    _builder.append("\t                ");
    _builder.append("type: \'delete\',");
    _builder.newLine();
    _builder.append("\t                ");
    _builder.append("data: JSON.stringify(data),");
    _builder.newLine();
    _builder.append("\t                ");
    _builder.append("beforeSend : function(req) {");
    _builder.newLine();
    _builder.append("\t                    ");
    _builder.append("if (authorization !== undefined) {");
    _builder.newLine();
    _builder.append("\t                        ");
    _builder.append("req.setRequestHeader(\'Authorization\', authorization);");
    _builder.newLine();
    _builder.append("\t                    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t                ");
    _builder.append("},");
    _builder.newLine();
    _builder.append("\t                ");
    _builder.append("headers: {");
    _builder.newLine();
    _builder.append("\t                    ");
    _builder.append("\'Accept\': \'application/json\',");
    _builder.newLine();
    _builder.append("\t                    ");
    _builder.append("\'Content-Type\': \'application/json\'");
    _builder.newLine();
    _builder.append("\t                ");
    _builder.append("},");
    _builder.newLine();
    _builder.append("\t                ");
    _builder.append("success: function () {");
    _builder.newLine();
    _builder.append("\t                    ");
    _builder.append("resolve();");
    _builder.newLine();
    _builder.append("\t                ");
    _builder.append("},");
    _builder.newLine();
    _builder.append("\t                ");
    _builder.append("error: function (jqxhr, textStatus, error) {");
    _builder.newLine();
    _builder.append("\t                \t");
    _builder.append("reject(error);");
    _builder.newLine();
    _builder.append("\t                ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t            ");
    _builder.append("});");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("});");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}, (error) => {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("reject(error);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("});");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("addUuidToQueryParams(queryParams) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (!queryParams) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("queryParams = [];");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (this.commandParam.uuid) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("queryParams.push({");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("key: \"uuid\",");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("value: this.commandParam.uuid");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("});");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return queryParams;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("addUuidToData(data) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (!data) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("data = {};");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (this.commandParam.uuid) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("data.uuid = this.commandParam.uuid;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return data;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("queryParamString(url, queryParams) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("var queryString = \"\";");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (queryParams && queryParams.length > 0) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("for (var i = 0; i < queryParams.length; i++) {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("if (url.indexOf(\'?\') < 0 && i === 0) {");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("queryString += \'?\'");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("} else {");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("queryString += \'&\'");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("queryString += queryParams[i].key + \"=\" + queryParams[i].value;");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return queryString;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/*       S.D.G.       */");
    _builder.newLine();
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generateEvent() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("\'use strict\';");
    _builder.newLine();
    _builder.newLine();
    _builder.append("class Event {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("constructor(eventParam, eventName) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("this.eventName = eventName;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("this.eventParam = eventParam;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("prepareDataForView() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("throw \"no prepareDataForView method defined for \" + this.eventName;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("publish() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return new Promise((resolve, reject) => {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("this.prepareDataForView();");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("ACEController.addItemToTimeLine({event: this});");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("Promise.all(this.notifyListeners()).then(() => {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("resolve();");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}, (error) => {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("reject(error + \" when notifying listeners of event \" + this.eventName);");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("});");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("});");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("notifyListeners() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("let promises = [];");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("var i, listener;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (this.eventName !== undefined) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("var listenersForEvent = ACEController.listeners[this.eventName];");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("if (listenersForEvent !== undefined) {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("for (i = 0; i < listenersForEvent.length; i += 1) {");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("listener = listenersForEvent[i];");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("promises.push(listener(this.eventData));");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return promises;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/*       S.D.G.       */");
    _builder.newLine();
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generateACEController() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("\'use strict\';");
    _builder.newLine();
    _builder.newLine();
    _builder.append("class ACEController {");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("static init() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("ACEController.timeLine = [];");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("ACEController.timeLineLocalStorageChunks = [];");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("ACEController.writeTimeLine = true;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("ACEController.listeners = {};");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("ACEController.registerListener(\'TriggerAction\', ACEController.triggerAction);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("ACEController.actionIsProcessing = false;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("ACEController.actionQueue = [];");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("ACEController.uuidGenerator = new UUID();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("ACEController.LIVE = 1;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("ACEController.REPLAY = 2;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("ACEController.E2E = 3;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("ACEController.execution = ACEController.LIVE;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("ACEController.replayTimeLine = [];");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("        \t");
    _builder.append("sessionStorage.clear();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("} catch (exception) {");
    _builder.newLine();
    _builder.append("        \t");
    _builder.append("ACEController.writeTimeLine = false;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("static registerListener(eventName, listener) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if (!eventName.trim()) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("throw new Error(\'cannot register listener for empty eventName\');");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if (!listener) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("throw new Error(\'cannot register undefined listener for event \' + eventName);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("var listenersForEventName;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if (ACEController.listeners[eventName] === undefined) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("ACEController.listeners[eventName] = [];");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("listenersForEventName = ACEController.listeners[eventName];");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("listenersForEventName.push(listener);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("static addItemToTimeLine(item) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("let timestamp = new Date();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("item.timestamp = timestamp.getTime();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (ACEController.execution === ACEController.LIVE) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("if (ACEController.writeTimeLine) {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("if (ACEController.timeLine.length > 100 && item.action && item.action.actionName === \'InitAction\') {");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("let timestampInMillis  = timestamp.getTime();");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("sessionStorage[timestampInMillis] = JSON.stringify(ACEController.timeLine, null, 2);");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("ACEController.timeLineLocalStorageChunks.push(timestampInMillis);");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("if (ACEController.timeLineLocalStorageChunks.length > 10) {");
    _builder.newLine();
    _builder.append("                            ");
    _builder.append("ACEController.timeLineLocalStorageChunks.shift();");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("} catch (exception) {");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("ACEController.writeTimeLine = false;");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("ACEController.timeLine = [];");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("ACEController.timeLine.push(JSON.parse(JSON.stringify(item)));");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("} else {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("ACEController.replayTimeLine.push(JSON.parse(JSON.stringify(item)));");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("static getCompleteTimeline() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("var completeTimeline = [];");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("for(var i=0; i<ACEController.timeLineLocalStorageChunks.length; i++) {");
    _builder.newLine();
    _builder.append("\t            ");
    _builder.append("let timelineChunk = sessionStorage[ACEController.timeLineLocalStorageChunks[i]];");
    _builder.newLine();
    _builder.append("\t            ");
    _builder.append("completeTimeline.push.apply(completeTimeline, JSON.parse(timelineChunk));");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t        ");
    _builder.append("completeTimeline.push.apply(completeTimeline, ACEController.timeLine);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("} catch (exception) {");
    _builder.newLine();
    _builder.append("        \t");
    _builder.append("ACEController.writeTimeLine = false;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return completeTimeline;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("static downloadTimeline() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("let timelineJson = JSON.stringify(ACEController.getCompleteTimeline(), null, 2);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("let a = window.document.createElement(\'a\');");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("a.href = window.URL.createObjectURL(new Blob([timelineJson], {type: \'text/json\'}));");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("a.download = \'scenario.json\';");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("document.body.appendChild(a);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("a.click();");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("document.body.removeChild(a);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("static uploadTimeline(event) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("ACEController.clearReplayResultDiv();");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("var input = event.target;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("var reader = new FileReader();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("reader.onload = function () {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("let json = reader.result;");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("ACEController.timeLine = JSON.parse(json);");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("document.getElementById(\"uploadTimelineInputField\").value = \"\";");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("};");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("reader.readAsText(input.files[0]);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("static addActionToQueue(action) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (ACEController.execution === ACEController.LIVE) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("ACEController.actionQueue.push(action);");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("if (ACEController.actionIsProcessing === false) {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("ACEController.actionIsProcessing = true;");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("ACEController.applyNextActions();");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("static applyNextActions() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("let action = ACEController.actionQueue.shift();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (action) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("action.applyAction().then(() => {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}, (error) => {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("ACEController.actionIsProcessing = false;");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("throw error + \" when applying action \" + action.actionName;");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("});");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("} else if (action === undefined) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("ACEController.actionIsProcessing = false;");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("if (ACEController.execution !== ACEController.LIVE) {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("ACEController.finishReplay();");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("static triggerAction(action) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("ACEController.addActionToQueue(action);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("static clearReplayResultDiv() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (document.getElementById(\"replayResultDiv\")) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("let table = document.getElementById(\"replayResultDiv\");");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("var rowCount = table.rows.length;");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("while (--rowCount) {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("table.deleteRow(rowCount);");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("table.rows[0].className = \'\';");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("static replay() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("ACEController.startReplay(ACEController.REPLAY)");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("static e2e() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("ACEController.startReplay(ACEController.E2E)");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("static startReplay(level) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("ACEController.passed = undefined;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("ACEController.expectedTimeLine = [];");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("ACEController.replayTimeLine = [];");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("ACEController.pauseInMillis = undefined;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("ACEController.execution = level;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("ACEController.clearReplayResultDiv();");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (ACEController.execution === ACEController.REPLAY) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("ACEController.readTimelineAndCreateReplayActions();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("} else {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("$.ajax({");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("url: \'api/database/reset\',");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("type: \'delete\',");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("headers: {");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("\'Accept\': \'application/json\',");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("\'Content-Type\': \'application/json\'");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("},");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("success: function () {");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("ACEController.readTimelineAndCreateReplayActions();");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("},");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("error: function (jqxhr, textStatus, error) {");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("throw error;");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("});");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("static readTimelineAndCreateReplayActions() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("var actions = [];");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("var completeTimeLine = ACEController.getCompleteTimeline();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("for (let i = 0; i < completeTimeLine.length; i++) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("let item = completeTimeLine[i];");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("ACEController.expectedTimeLine.push(item);");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("if (item.action) {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("var action = eval(\'new \' + item.action.actionName + \'(item.action.actionParam)\');");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("action.actionData.uuid = item.action.actionData.uuid;");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("actions.push(action);");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("ACEController.actionQueue = actions;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (document.getElementById(\'pauseInMillisInput\')) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("ACEController.pauseInMillis = document.getElementById(\'pauseInMillisInput\').value;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("ACEController.applyNextActions();");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("static getCommandByUuid(uuid) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("for (let i = 0; i < ACEController.expectedTimeLine.length; i++) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("let item = ACEController.expectedTimeLine[i];");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("if (item.command && item.command.commandParam.uuid === uuid) {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("return item.command;");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("static finishReplay() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("ACEController.passed = true;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (document.getElementById(\"replayResultDiv\")) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("let table = document.getElementById(\"replayResultDiv\");");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("for (let i = 0; i < ACEController.expectedTimeLine.length; i++) {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("let expectedItem = ACEController.expectedTimeLine[i];");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("let actualItem = undefined;");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("if (i < ACEController.replayTimeLine.length) {");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("actualItem = ACEController.replayTimeLine[i];");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("                ");
    _builder.append("let rowAbstract = table.insertRow(table.rows.length);");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("rowAbstract.insertCell(0);");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("let original = rowAbstract.insertCell(1);");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("let actual= rowAbstract.insertCell(2);");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("rowAbstract.insertCell(3);");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("original.innerHTML = \'<a onclick=\\\'toggleVisibilityOfRow(\"row_\' + i + \'\")\\\'>\' + ACEController.abstractText(expectedItem) + \'</a>\';");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("actual.innerHTML = \'<a onclick=\\\'toggleVisibilityOfRow(\"row_\' + i + \'\")\\\'>\' + ACEController.abstractText(actualItem) + \'</a>\';");
    _builder.newLine();
    _builder.newLine();
    _builder.append("                ");
    _builder.append("let row = table.insertRow(table.rows.length);");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("row.id = \"row_\" + i;");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("row.style = \"display: none;\";");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("let originalExpectedItemCell = row.insertCell(0);");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("let expectedItemCell = row.insertCell(1);");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("let actualItemCell = row.insertCell(2);");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("let originalActualItemCell = row.insertCell(3);");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("originalExpectedItemCell.innerHTML = \'<pre style=\"font-size: 10px;\">\' + JSON.stringify(expectedItem, null, 2) + \'</pre>\';");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("expectedItemCell.innerHTML = \'<pre style=\"font-size: 10px;\">\' + JSON.stringify(expectedItem, ACEController.verificationCleanupFunction, 2) + \'</pre>\';");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("actualItemCell.innerHTML = \'<pre style=\"font-size: 10px;\">\' + JSON.stringify(actualItem, ACEController.verificationCleanupFunction, 2) + \'</pre>\';");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("originalActualItemCell.innerHTML = \'<pre style=\"font-size: 10px;\">\' + JSON.stringify(actualItem, null, 2) + \'</pre>\';");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("if (JSON.stringify(expectedItem, ACEController.verificationCleanupFunction) === JSON.stringify(actualItem, ACEController.verificationCleanupFunction)) {");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("row.className = \'success\';");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("rowAbstract.className = \'success\';");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("} else {");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("row.className = \'danger\';");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("rowAbstract.className = \'danger\';");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("ACEController.passed = false;");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("if (ACEController.passed) {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("table.rows[0].className = \'success\';");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("} else {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("table.rows[0].className = \'danger\';");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("ACEController.actionIsProcessing = false;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("ACEController.actionQueue = [];");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("ACEController.execution = ACEController.LIVE;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("static abstractText(item) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (item === undefined) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("return \"undefined\";");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (item.action) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("return \"A \" + item.action.actionName;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (item.command) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("return \"C \" + item.command.commandName;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (item.event) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("var triggerActionName = item.event.eventName === \'TriggerAction\' ? \" \" + item.event.eventParam.actionName : \"\";");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("return \"E \" + item.event.eventName + triggerActionName;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("ACEController.init();");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/*       S.D.G.       */");
    _builder.newLine();
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generateTriggerAction() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("\'use strict\';");
    _builder.newLine();
    _builder.newLine();
    _builder.append("class TriggerAction extends Event {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("constructor(action) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("super(action, \'TriggerAction\');");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("this.eventData = action;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("prepareDataForView() {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/*       S.D.G.       */");
    _builder.newLine();
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generateAceHtmlDevSnippet(final Project it) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<script type=\"text/javascript\" src=\"es6/gen/ace/UUID.js\"></script>");
    _builder.newLine();
    _builder.append("<script type=\"text/javascript\" src=\"es6/gen/ace/Action.es6\"></script>");
    _builder.newLine();
    _builder.append("<script type=\"text/javascript\" src=\"es6/gen/ace/Command.es6\"></script>");
    _builder.newLine();
    _builder.append("<script type=\"text/javascript\" src=\"es6/gen/ace/Event.es6\"></script>");
    _builder.newLine();
    _builder.append("<script type=\"text/javascript\" src=\"es6/gen/ace/ACEController.es6\"></script>");
    _builder.newLine();
    _builder.append("<script type=\"text/javascript\" src=\"es6/gen/ace/TriggerAction.es6\"></script>");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generateHtmlDevSnippet(final Project it) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EList<Action> _actions = it.getActions();
      for(final Action action : _actions) {
        _builder.append("<script type=\"text/javascript\" src=\"es6/gen/app/");
        String _name = it.getName();
        _builder.append(_name, "");
        _builder.append("/actions/");
        String _abstractActionName = this._actionExtension.abstractActionName(action);
        _builder.append(_abstractActionName, "");
        _builder.append(".es6\"></script>");
        _builder.newLineIfNotEmpty();
        _builder.append("<script type=\"text/javascript\" src=\"es6/src/");
        String _name_1 = it.getName();
        _builder.append(_name_1, "");
        _builder.append("/actions/");
        String _actionName = this._actionExtension.actionName(action);
        _builder.append(_actionName, "");
        _builder.append(".es6\"></script>");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      EList<Command> _commands = it.getCommands();
      for(final Command command : _commands) {
        _builder.append("<script type=\"text/javascript\" src=\"es6/gen/app/");
        String _name_2 = it.getName();
        _builder.append(_name_2, "");
        _builder.append("/commands/");
        String _abstractCommandName = this._commandExtension.abstractCommandName(command);
        _builder.append(_abstractCommandName, "");
        _builder.append(".es6\"></script>");
        _builder.newLineIfNotEmpty();
        _builder.append("<script type=\"text/javascript\" src=\"es6/src/");
        String _name_3 = it.getName();
        _builder.append(_name_3, "");
        _builder.append("/commands/");
        String _commandName = this._commandExtension.commandName(command);
        _builder.append(_commandName, "");
        _builder.append(".es6\"></script>");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      EList<Event> _events = it.getEvents();
      for(final Event event : _events) {
        _builder.append("<script type=\"text/javascript\" src=\"es6/gen/app/");
        String _name_4 = it.getName();
        _builder.append(_name_4, "");
        _builder.append("/events/");
        String _abstractEventName = this._eventExtension.abstractEventName(event);
        _builder.append(_abstractEventName, "");
        _builder.append(".es6\"></script>");
        _builder.newLineIfNotEmpty();
        _builder.append("<script type=\"text/javascript\" src=\"es6/src/");
        String _name_5 = it.getName();
        _builder.append(_name_5, "");
        _builder.append("/events/");
        String _eventName = this._eventExtension.eventName(event);
        _builder.append(_eventName, "");
        _builder.append(".es6\"></script>");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      EList<View> _views = it.getViews();
      for(final View view : _views) {
        _builder.append("<script type=\"text/javascript\" src=\"es6/src/");
        String _name_6 = it.getName();
        _builder.append(_name_6, "");
        _builder.append("/");
        String _viewName = this._viewExtension.viewName(view);
        _builder.append(_viewName, "");
        _builder.append(".es6\"></script>");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("<script type=\"text/javascript\" src=\"es6/gen/elr/");
    String _name_7 = it.getName();
    _builder.append(_name_7, "");
    _builder.append("/EventListenerRegistration.es6\"></script>");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence generateUUID() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("/*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("uuid.js - Version 0.3");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("JavaScript Class to create a UUID like identifier");
    _builder.newLine();
    _builder.newLine();
    _builder.append(" ");
    _builder.append("Copyright (C) 2006-2008, Erik Giberti (AF-Design), All rights reserved.");
    _builder.newLine();
    _builder.newLine();
    _builder.append(" ");
    _builder.append("This program is free software; you can redistribute it and/or modify it under");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("the terms of the GNU General Public License as published by the Free Software");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("Foundation; either version 2 of the License, or (at your option) any later");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("version.");
    _builder.newLine();
    _builder.newLine();
    _builder.append(" ");
    _builder.append("This program is distributed in the hope that it will be useful, but WITHOUT ANY");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("PARTICULAR PURPOSE. See the GNU General Public License for more details.");
    _builder.newLine();
    _builder.newLine();
    _builder.append(" ");
    _builder.append("You should have received a copy of the GNU General Public License along with");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("this program; if not, write to the Free Software Foundation, Inc., 59 Temple");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("Place, Suite 330, Boston, MA 02111-1307 USA");
    _builder.newLine();
    _builder.newLine();
    _builder.append(" ");
    _builder.append("The latest version of this file can be downloaded from");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("http://www.af-design.com/resources/javascript_uuid.php");
    _builder.newLine();
    _builder.newLine();
    _builder.append(" ");
    _builder.append("HISTORY:");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("6/5/06 \t- Initial Release");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("5/22/08 - Updated code to run faster, removed randrange(min,max) in favor of");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("a simpler rand(max) function. Reduced overhead by using getTime()");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("method of date class (suggestion by James Hall).");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("9/5/08\t- Fixed a bug with rand(max) and additional efficiencies pointed out");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("by Robert Kieffer http://broofa.com/");
    _builder.newLine();
    _builder.newLine();
    _builder.append(" ");
    _builder.append("KNOWN ISSUES:");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("- Still no way to get MAC address in JavaScript");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("- Research into other versions of UUID show promising possibilities");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("(more research needed)");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("- Documentation needs improvement");
    _builder.newLine();
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.newLine();
    _builder.append("// On creation of a UUID object, set it\'s initial value");
    _builder.newLine();
    _builder.append("function UUID(){");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("this.id = this.createUUID();");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("// When asked what this Object is, lie and return it\'s value");
    _builder.newLine();
    _builder.append("UUID.prototype.valueOf = function(){ return this.id; }");
    _builder.newLine();
    _builder.append("UUID.prototype.toString = function(){ return this.id; }");
    _builder.newLine();
    _builder.newLine();
    _builder.append("//");
    _builder.newLine();
    _builder.append("// INSTANCE SPECIFIC METHODS");
    _builder.newLine();
    _builder.append("//");
    _builder.newLine();
    _builder.newLine();
    _builder.append("UUID.prototype.createUUID = function(){");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("//");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// Loose interpretation of the specification DCE 1.1: Remote Procedure Call");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// described at http://www.opengroup.org/onlinepubs/009629399/apdxa.htm#tagtcjh_37");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// since JavaScript doesn\'t allow access to internal systems, the last 48 bits");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// of the node section is made up using a series of random numbers (6 octets long).");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("//");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("var dg = new Date(1582, 10, 15, 0, 0, 0, 0);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("var dc = new Date();");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("var t = dc.getTime() - dg.getTime();");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("var h = \'-\';");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("var tl = UUID.getIntegerBits(t,0,31);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("var tm = UUID.getIntegerBits(t,32,47);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("var thv = UUID.getIntegerBits(t,48,59) + \'1\'; // version 1, security version is 2");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("var csar = UUID.getIntegerBits(UUID.rand(4095),0,7);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("var csl = UUID.getIntegerBits(UUID.rand(4095),0,7);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// since detection of anything about the machine/browser is far to buggy,");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// include some more random numbers here");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// if NIC or an IP can be obtained reliably, that should be put in");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// here instead.");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("var n = UUID.getIntegerBits(UUID.rand(8191),0,7) +");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("UUID.getIntegerBits(UUID.rand(8191),8,15) +");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("UUID.getIntegerBits(UUID.rand(8191),0,7) +");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("UUID.getIntegerBits(UUID.rand(8191),8,15) +");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("UUID.getIntegerBits(UUID.rand(8191),0,15); // this last number is two octets long");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("return tl + h + tm + h + thv + h + csar + csl + h + n;");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("//");
    _builder.newLine();
    _builder.append("// GENERAL METHODS (Not instance specific)");
    _builder.newLine();
    _builder.append("//");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("// Pull out only certain bits from a very large integer, used to get the time");
    _builder.newLine();
    _builder.append("// code information for the first part of a UUID. Will return zero\'s if there");
    _builder.newLine();
    _builder.append("// aren\'t enough bits to shift where it needs to.");
    _builder.newLine();
    _builder.append("UUID.getIntegerBits = function(val,start,end){");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("var base16 = UUID.returnBase(val,16);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("var quadArray = new Array();");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("var quadString = \'\';");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("var i = 0;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("for(i=0;i<base16.length;i++){");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("quadArray.push(base16.substring(i,i+1));");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("for(i=Math.floor(start/4);i<=Math.floor(end/4);i++){");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if(!quadArray[i] || quadArray[i] == \'\') quadString += \'0\';");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("else quadString += quadArray[i];");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("return quadString;");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("// Replaced from the original function to leverage the built in methods in");
    _builder.newLine();
    _builder.append("// JavaScript. Thanks to Robert Kieffer for pointing this one out");
    _builder.newLine();
    _builder.append("UUID.returnBase = function(number, base){");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("return (number).toString(base).toUpperCase();");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("// pick a random number within a range of numbers");
    _builder.newLine();
    _builder.append("// int b rand(int a); where 0 <= b <= a");
    _builder.newLine();
    _builder.append("UUID.rand = function(max){");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("return Math.floor(Math.random() * (max + 1));");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("// end of UUID class file");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    return _builder;
  }
}
