package com.anfelisa.generator;

import com.anfelisa.ace.Action;
import com.anfelisa.ace.Command;
import com.anfelisa.ace.Event;
import com.anfelisa.ace.EventOnOutcome;
import com.anfelisa.ace.Project;
import com.anfelisa.ace.RenderFunction;
import com.anfelisa.ace.View;
import com.anfelisa.extensions.ActionExtension;
import com.anfelisa.extensions.CommandExtension;
import com.anfelisa.extensions.EventExtension;
import com.anfelisa.extensions.ViewExtension;
import com.google.common.base.Objects;
import javax.inject.Inject;
import org.eclipse.emf.common.util.EList;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.xbase.lib.Extension;

@SuppressWarnings("all")
public class ES6Template {
  @Inject
  @Extension
  private ActionExtension _actionExtension;
  
  @Inject
  @Extension
  private CommandExtension _commandExtension;
  
  @Inject
  @Extension
  private EventExtension _eventExtension;
  
  @Inject
  @Extension
  private ViewExtension _viewExtension;
  
  public CharSequence generateAbstractActionFile(final Action it) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("\'use strict\';");
    _builder.newLine();
    _builder.newLine();
    _builder.append("class ");
    String _abstractActionName = this._actionExtension.abstractActionName(it);
    _builder.append(_abstractActionName, "");
    _builder.append(" extends Action {");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("constructor(actionParam) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("super(actionParam, \'");
    String _actionName = this._actionExtension.actionName(it);
    _builder.append(_actionName, "        ");
    _builder.append("\');");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    {
      Command _command = it.getCommand();
      boolean _notEquals = (!Objects.equal(_command, null));
      if (_notEquals) {
        _builder.append("\t");
        _builder.append("getCommand() {");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("    ");
        _builder.append("return new ");
        Command _command_1 = it.getCommand();
        String _commandName = this._commandExtension.commandName(_command_1);
        _builder.append(_commandName, "\t    ");
        _builder.append("(this.actionData);");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("}");
        _builder.newLine();
      }
    }
    _builder.newLine();
    _builder.append("    ");
    _builder.append("replay() {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/*       S.D.G.       */");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generateInitialActionFile(final Action it) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("\'use strict\';");
    _builder.newLine();
    _builder.newLine();
    _builder.append("class ");
    String _actionName = this._actionExtension.actionName(it);
    _builder.append(_actionName, "");
    _builder.append(" extends ");
    String _abstractActionName = this._actionExtension.abstractActionName(it);
    _builder.append(_abstractActionName, "");
    _builder.append(" {");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("initActionDataFromView() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return new Promise((resolve) => {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("resolve();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("});");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("replay() {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/*       S.D.G.       */");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generateAbstractCommandFile(final Command it) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("\'use strict\';");
    _builder.newLine();
    _builder.newLine();
    _builder.append("class ");
    String _abstractCommandName = this._commandExtension.abstractCommandName(it);
    _builder.append(_abstractCommandName, "");
    _builder.append(" extends Command {");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("constructor(commandParam) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("super(commandParam, \"");
    String _commandName = this._commandExtension.commandName(it);
    _builder.append(_commandName, "        ");
    _builder.append("\");");
    _builder.newLineIfNotEmpty();
    {
      EList<EventOnOutcome> _eventsOnOutcome = it.getEventsOnOutcome();
      for(final EventOnOutcome eventOnOutcome : _eventsOnOutcome) {
        _builder.append("        ");
        _builder.append("this.");
        String _outcome = eventOnOutcome.getOutcome();
        _builder.append(_outcome, "        ");
        _builder.append(" = \"");
        String _outcome_1 = eventOnOutcome.getOutcome();
        _builder.append(_outcome_1, "        ");
        _builder.append("\";");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("publishEvents() {");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("let promises = [];");
    _builder.newLine();
    _builder.append("    \t");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("switch (this.commandData.outcome) {");
    _builder.newLine();
    {
      EList<EventOnOutcome> _eventsOnOutcome_1 = it.getEventsOnOutcome();
      for(final EventOnOutcome eventOnOutcome_1 : _eventsOnOutcome_1) {
        _builder.append("        ");
        _builder.append("case this.");
        String _outcome_2 = eventOnOutcome_1.getOutcome();
        _builder.append(_outcome_2, "        ");
        _builder.append(":");
        _builder.newLineIfNotEmpty();
        {
          EList<Event> _events = eventOnOutcome_1.getEvents();
          for(final Event event : _events) {
            _builder.append("        ");
            _builder.append("\t");
            _builder.append("promises.push(new ");
            String _eventName = this._eventExtension.eventName(event);
            _builder.append(_eventName, "        \t");
            _builder.append("(this.commandData).publish());");
            _builder.newLineIfNotEmpty();
          }
        }
        {
          EList<Action> _actions = eventOnOutcome_1.getActions();
          for(final Action action : _actions) {
            _builder.append("        ");
            _builder.append("\t");
            _builder.append("promises.push(new TriggerAction(new ");
            String _actionName = this._actionExtension.actionName(action);
            _builder.append(_actionName, "        \t");
            _builder.append("(this.commandData)).publish());");
            _builder.newLineIfNotEmpty();
          }
        }
        _builder.append("        ");
        _builder.append("\t");
        _builder.append("break;");
        _builder.newLine();
      }
    }
    _builder.append("    \t");
    _builder.append("default:");
    _builder.newLine();
    _builder.append("    \t\t");
    _builder.append("throw \'unhandled outcome: \' + this.commandData.outcome;");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    \t");
    _builder.append("return Promise.all(promises);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/*       S.D.G.       */");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generateInitialCommandFile(final Command it) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("\'use strict\';");
    _builder.newLine();
    _builder.newLine();
    _builder.append("class ");
    String _commandName = this._commandExtension.commandName(it);
    _builder.append(_commandName, "");
    _builder.append(" extends ");
    String _abstractCommandName = this._commandExtension.abstractCommandName(it);
    _builder.append(_abstractCommandName, "");
    _builder.append(" {");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("execute() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return new Promise((resolve) => {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("resolve();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("});");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/*       S.D.G.       */");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generateAbstractEventFile(final Event it) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("\'use strict\';");
    _builder.newLine();
    _builder.newLine();
    _builder.append("class ");
    String _abstractEventName = this._eventExtension.abstractEventName(it);
    _builder.append(_abstractEventName, "");
    _builder.append(" extends Event {");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("constructor(eventParam) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("super(eventParam, \'");
    String _eventName = this._eventExtension.eventName(it);
    _builder.append(_eventName, "        ");
    _builder.append("\');");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/*       S.D.G.       */");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generateInitialEventFile(final Event it) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("\'use strict\';");
    _builder.newLine();
    _builder.newLine();
    _builder.append("class ");
    String _eventName = this._eventExtension.eventName(it);
    _builder.append(_eventName, "");
    _builder.append(" extends ");
    String _abstractEventName = this._eventExtension.abstractEventName(it);
    _builder.append(_abstractEventName, "");
    _builder.append(" {");
    _builder.newLineIfNotEmpty();
    _builder.append("    ");
    _builder.append("prepareDataForView() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("this.eventData = JSON.parse(JSON.stringify(this.eventParam));");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/*       S.D.G.       */");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generateEventListenerRegistration(final Project it) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("\'use strict\';");
    _builder.newLine();
    _builder.newLine();
    _builder.append("class EventListenerRegistration {");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("static init() {");
    _builder.newLine();
    {
      EList<Event> _events = it.getEvents();
      for(final Event event : _events) {
        {
          EList<RenderFunction> _listeners = event.getListeners();
          for(final RenderFunction renderFunction : _listeners) {
            _builder.append("    \t");
            _builder.append("MainController.registerListener(\'");
            String _eventName = this._eventExtension.eventName(event);
            _builder.append(_eventName, "    \t");
            _builder.append("\', ");
            String _renderFunctionWithViewName = this._viewExtension.renderFunctionWithViewName(renderFunction);
            _builder.append(_renderFunctionWithViewName, "    \t");
            _builder.append(");");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/*       S.D.G.       */");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generateView(final View it) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("\'use strict\';");
    _builder.newLine();
    _builder.newLine();
    _builder.append("class ");
    String _viewName = this._viewExtension.viewName(it);
    _builder.append(_viewName, "");
    _builder.append(" {");
    _builder.newLineIfNotEmpty();
    {
      EList<RenderFunction> _renderFunctions = it.getRenderFunctions();
      for(final RenderFunction renderFunction : _renderFunctions) {
        _builder.append("    ");
        _builder.append("static ");
        String _name = renderFunction.getName();
        _builder.append(_name, "    ");
        _builder.append("(data) {");
        _builder.newLineIfNotEmpty();
        _builder.append("    ");
        _builder.append("};");
        _builder.newLine();
        _builder.append("    ");
        _builder.newLine();
      }
    }
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/*                    S.D.G.                    */");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generateHtmlDevSnippet(final Project it) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("<script type=\"text/javascript\" src=\"es6/gen/ace/Action.es6\"></script>");
    _builder.newLine();
    _builder.append("<script type=\"text/javascript\" src=\"es6/gen/ace/Command.es6\"></script>");
    _builder.newLine();
    _builder.append("<script type=\"text/javascript\" src=\"es6/gen/ace/Event.es6\"></script>");
    _builder.newLine();
    _builder.append("<script type=\"text/javascript\" src=\"es6/gen/ace/MainController.es6\"></script>");
    _builder.newLine();
    _builder.append("<script type=\"text/javascript\" src=\"es6/gen/ace/ReplayController.es6\"></script>");
    _builder.newLine();
    _builder.append("<script type=\"text/javascript\" src=\"es6/gen/ace/TriggerAction.es6\"></script>");
    _builder.newLine();
    _builder.append("<script type=\"text/javascript\" src=\"es6/gen/ace/UUID.js\"></script>");
    _builder.newLine();
    _builder.newLine();
    {
      EList<Action> _actions = it.getActions();
      for(final Action action : _actions) {
        _builder.append("<script type=\"text/javascript\" src=\"es6/gen/");
        String _name = it.getName();
        _builder.append(_name, "");
        _builder.append("/actions/");
        String _abstractActionName = this._actionExtension.abstractActionName(action);
        _builder.append(_abstractActionName, "");
        _builder.append(".es6\"></script>");
        _builder.newLineIfNotEmpty();
        _builder.append("<script type=\"text/javascript\" src=\"es6/src/");
        String _name_1 = it.getName();
        _builder.append(_name_1, "");
        _builder.append("/actions/");
        String _actionName = this._actionExtension.actionName(action);
        _builder.append(_actionName, "");
        _builder.append(".es6\"></script>");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      EList<Command> _commands = it.getCommands();
      for(final Command command : _commands) {
        _builder.append("<script type=\"text/javascript\" src=\"es6/gen/");
        String _name_2 = it.getName();
        _builder.append(_name_2, "");
        _builder.append("/commands/");
        String _abstractCommandName = this._commandExtension.abstractCommandName(command);
        _builder.append(_abstractCommandName, "");
        _builder.append(".es6\"></script>");
        _builder.newLineIfNotEmpty();
        _builder.append("<script type=\"text/javascript\" src=\"es6/src/");
        String _name_3 = it.getName();
        _builder.append(_name_3, "");
        _builder.append("/commands/");
        String _commandName = this._commandExtension.commandName(command);
        _builder.append(_commandName, "");
        _builder.append(".es6\"></script>");
        _builder.newLineIfNotEmpty();
      }
    }
    {
      EList<Event> _events = it.getEvents();
      for(final Event event : _events) {
        _builder.append("<script type=\"text/javascript\" src=\"es6/gen/");
        String _name_4 = it.getName();
        _builder.append(_name_4, "");
        _builder.append("/events/");
        String _abstractEventName = this._eventExtension.abstractEventName(event);
        _builder.append(_abstractEventName, "");
        _builder.append(".es6\"></script>");
        _builder.newLineIfNotEmpty();
        _builder.append("<script type=\"text/javascript\" src=\"es6/src/");
        String _name_5 = it.getName();
        _builder.append(_name_5, "");
        _builder.append("/events/");
        String _eventName = this._eventExtension.eventName(event);
        _builder.append(_eventName, "");
        _builder.append(".es6\"></script>");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("<script type=\"text/javascript\" src=\"es6/gen/");
    String _name_6 = it.getName();
    _builder.append(_name_6, "");
    _builder.append("/EventListenerRegistration.es6\"></script>");
    _builder.newLineIfNotEmpty();
    {
      EList<View> _views = it.getViews();
      for(final View view : _views) {
        _builder.append("<script type=\"text/javascript\" src=\"es6/src/");
        String _name_7 = it.getName();
        _builder.append(_name_7, "");
        _builder.append("/");
        String _viewName = this._viewExtension.viewName(view);
        _builder.append(_viewName, "");
        _builder.append(".es6\"></script>");
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  public CharSequence generateAction() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("\'use strict\';");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("class Action {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("constructor(actionParam, actionName) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (actionParam === undefined) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("actionParam = {};");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("this.actionParam = JSON.parse(JSON.stringify(actionParam));");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("this.actionName = actionName;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("this.actionData = {};");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("initActionDataFromView() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("throw \"no function initActionDataFromView defined for \" + this.actionName;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("getCommand() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("throw \"no command defined for \" + this.actionName;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("apply() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("MainController.addActionToQueue(this);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("replay() {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/*       S.D.G.       */");
    _builder.newLine();
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generateCommand() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("\'use strict\';");
    _builder.newLine();
    _builder.newLine();
    _builder.append("class Command {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("constructor(commandParam, commandName) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("this.commandParam = JSON.parse(JSON.stringify(commandParam));");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("this.commandName = commandName;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("this.commandData = {};");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("execute() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("throw \"no execute method defined for \" + this.commandName;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("publishEvents() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("throw \"no publishEvents method defined for \" + this.commandName;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/*       S.D.G.       */");
    _builder.newLine();
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generateEvent() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("\'use strict\';");
    _builder.newLine();
    _builder.newLine();
    _builder.append("class Event {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("constructor(eventParam, eventName) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("this.eventName = eventName;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("this.eventParam = eventParam;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("prepareDataForView() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("throw \"no prepareDataForView method defined for \" + this.eventName;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("publish() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return MainController.publishEvent(this);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("/*       S.D.G.       */");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generateMainController() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("\'use strict\';");
    _builder.newLine();
    _builder.newLine();
    _builder.append("class MainController {");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("static init() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("MainController.timeLine = [];");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("MainController.timeLineLocalStorageChunks = [];");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("MainController.writeTimeLine = true;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("MainController.listeners = {};");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("MainController.replayLevel = undefined;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("MainController.views = {};");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("MainController.EVENT_REPLAY_LEVEL = 1;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("MainController.COMMAND_REPLAY_LEVEL = 2;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("MainController.ACTION_REPLAY_LEVEL = 3;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("MainController.verificationCleanupFunctionsForReplayLevel = {};");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("MainController.registerListener(\'TriggerAction\', MainController.triggerAction);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("MainController.actionIsProcessing = false;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("MainController.actionQueue = [];");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("MainController.uuidGenerator = new UUID();");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("static start() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("MainController.timeLine = [];");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("MainController.timeLineLocalStorageChunks = [];");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("sessionStorage.clear();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("MainController.actionQueue = [];");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("MainController.actionIsProcessing = false;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("static registerListener(eventName, listener) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (!eventName.trim()) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("throw new Error(\'cannot register listener for empty eventName\');");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (!listener) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("throw new Error(\'cannot register undefined listener\');");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("var listenersForEventName;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (MainController.listeners[eventName] === undefined) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("MainController.listeners[eventName] = [];");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("listenersForEventName = MainController.listeners[eventName];");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("listenersForEventName.push(listener);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("static deRegisterListener(eventName, listener) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (!eventName.trim()) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("throw new Error(\'cannot deRegister listener for empty eventName\');");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (!listener) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("throw new Error(\'cannot deRegister undefined listener\');");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("var listenersForEventName;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (MainController.listeners[eventName] !== undefined) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("listenersForEventName = MainController.listeners[eventName];");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("for (var i = 0; i < listenersForEventName.length; i++) {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("if (listenersForEventName[i] === listener) {");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("break;");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("listenersForEventName.splice(i, 1);");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("if (listenersForEventName.length === 0) {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("MainController.listeners[eventName] = undefined;");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("static applyAction(action) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return new Promise((resolve, reject) => {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("if (!MainController.replayLevel || MainController.replayLevel === MainController.ACTION_REPLAY_LEVEL) {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("if (MainController.replayLevel !== MainController.ACTION_REPLAY_LEVEL) {");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("action.actionData.uuid = MainController.uuidGenerator.createUUID();");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("action.initActionDataFromView().then(() => {");
    _builder.newLine();
    _builder.append("                            ");
    _builder.append("MainController.addItemToTimeLine({action: action});");
    _builder.newLine();
    _builder.append("                            ");
    _builder.append("if (action.getCommand()) {");
    _builder.newLine();
    _builder.append("                                ");
    _builder.append("MainController.executeCommandOfAction(action).then(function () {");
    _builder.newLine();
    _builder.append("                                    ");
    _builder.append("resolve();");
    _builder.newLine();
    _builder.append("                                ");
    _builder.append("}, function (error) {");
    _builder.newLine();
    _builder.append("                                    ");
    _builder.append("reject(error + \" when executing command \" + action.getCommand().commandName);");
    _builder.newLine();
    _builder.append("                                ");
    _builder.append("});");
    _builder.newLine();
    _builder.append("                            ");
    _builder.append("} else {");
    _builder.newLine();
    _builder.append("                                ");
    _builder.append("resolve();");
    _builder.newLine();
    _builder.append("                            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("},");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("(error) => {");
    _builder.newLine();
    _builder.append("                            ");
    _builder.append("reject(error + \" when init action from view \" + action.actionName);");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("});");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("} else {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("resolve();");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("});");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("static executeCommandOfAction(action) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return new Promise((resolve, reject) => {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("if (!MainController.replayLevel || MainController.replayLevel === MainController.ACTION_REPLAY_LEVEL) {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("let command = action.getCommand();");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("command.execute().then(function () {");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("MainController.addItemToTimeLine({command: command});");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("MainController.publishEventsOfCommand(command).then(function () {");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("resolve();");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("}, function (error) {");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("reject(error + \" when executing command \" + command.commandName);");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("});");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("}, function () {");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("reject();");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("});");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("} else {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("resolve();");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("});");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("static publishEventsOfCommand(command) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return new Promise((resolve, reject) => {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("command.publishEvents().then(function () {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("MainController.applyNextActions();");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("resolve();");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}, function (error) {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("reject(error + \"when publishing events of command \" + command.commandName);");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("});");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("});");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("static applyNextActions() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("let action = MainController.getNextAction();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (action && !this.replayLevel) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("MainController.applyAction(action).then(function () {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}, function (error) {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("MainController.actionIsProcessing = false;");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("throw error;");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("});");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("} else if (action === undefined) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("MainController.actionIsProcessing = false;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("static publishEvent(event) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return new Promise((resolve, reject) => {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("if (!MainController.replayLevel || MainController.replayLevel === MainController.ACTION_REPLAY_LEVEL || MainController.replayLevel === MainController.COMMAND_REPLAY_LEVEL) {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("event.prepareDataForView();");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("MainController.addItemToTimeLine({event: event});");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("Promise.all(MainController.notifyListeners(event)).then(function () {");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("resolve();");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("}, function (error) {");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("reject(error + \" when notifying listeners of event \" + event.eventName);");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("});");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("} else {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("resolve();");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("});");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("static notifyListeners(event) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("let promises = [];");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("var i, listener, eventName = event.eventName;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (eventName !== undefined) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("var listenersForEvent = MainController.listeners[eventName];");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("if (listenersForEvent !== undefined) {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("for (i = 0; i < listenersForEvent.length; i += 1) {");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("listener = listenersForEvent[i];");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("promises.push(listener(event.eventData));");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return promises;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("static addItemToTimeLine(item) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("let timestamp = new Date();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("item.timestamp = timestamp.getTime();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (!MainController.replayLevel) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("if (MainController.writeTimeLine) {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("MainController.timeLine.push(JSON.parse(JSON.stringify(item)));");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("if (MainController.timeLine.length > 50) {");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("let timestampInMillis  = timestamp.getTime();");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("try {");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("sessionStorage[timestampInMillis] = JSON.stringify(MainController.timeLine, null, 2);");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("MainController.timeLineLocalStorageChunks.push(timestampInMillis);");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("} catch (exception) {");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("MainController.writeTimeLine = false;");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("MainController.timeLine = [];");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("} else {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("ReplayController.addItemToReplayTimeLine(item);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("static getCompleteTimeline() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("var completeTimeline = [];");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("for(var i=0; i<MainController.timeLineLocalStorageChunks.length; i++) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("let timelineChunk = sessionStorage[MainController.timeLineLocalStorageChunks[i]];");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("completeTimeline.push.apply(completeTimeline, JSON.parse(timelineChunk));");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("completeTimeline.push.apply(completeTimeline, MainController.timeLine);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return completeTimeline;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("static addActionToQueue(action) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("MainController.actionQueue.push(action);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (MainController.actionIsProcessing === false) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("MainController.actionIsProcessing = true;");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("MainController.applyNextActions();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("static getNextAction() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("return MainController.actionQueue.shift();");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("static triggerAction(action) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("MainController.addActionToQueue(action);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/*       S.D.G.       */");
    _builder.newLine();
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generateReplayController() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("\'use strict\';");
    _builder.newLine();
    _builder.newLine();
    _builder.append("class ReplayController {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("static init() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("ReplayController.id = \"ReplayController\";");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("ReplayController.passed = undefined;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("ReplayController.timeLine = [];");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("ReplayController.expectedTimeLine = [];");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("ReplayController.pauseInMillis = undefined;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("static clearReplayResultDiv() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (document.getElementById(\"replayResultDiv\")) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("let table = document.getElementById(\"replayResultDiv\");");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("var rowCount = table.rows.length;");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("while (--rowCount) {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("table.deleteRow(rowCount);");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("table.rows[0].className = \'\';");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("static startReplay(replayLevel) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (!replayLevel && replayLevel !== MainController.EVENT_REPLAY_LEVEL && replayLevel !== MainController.COMMAND_REPLAY_LEVEL && replayLevel !== MainController.ACTION_REPLAY_LEVEL) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("throw new Error(replayLevel + \' is no valid replay level\');");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("ReplayController.clearReplayResultDiv();");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("ReplayController.expectedTimeLine = [];");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("for (let i = 0; i < ReplayController.timeLine.length; i++) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("let item = ReplayController.timeLine[i];");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("if (item.action && replayLevel === MainController.ACTION_REPLAY_LEVEL) {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("ReplayController.expectedTimeLine.push(item);");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("} else if (item.command && (replayLevel === MainController.ACTION_REPLAY_LEVEL || replayLevel === MainController.COMMAND_REPLAY_LEVEL)) {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("ReplayController.expectedTimeLine.push(item);");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("} else if (item.event) {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("ReplayController.expectedTimeLine.push(item);");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (document.getElementById(\'pauseInMillisInput\')) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("ReplayController.pauseInMillis = document.getElementById(\'pauseInMillisInput\').value;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("MainController.replayLevel = replayLevel;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("static finishReplay() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("App.completeReplay();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("ReplayController.passed = true;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (document.getElementById(\"replayResultDiv\")) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("let table = document.getElementById(\"replayResultDiv\");");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("for (let i = 0; i < ReplayController.expectedTimeLine.length; i++) {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("let expectedItem = ReplayController.expectedTimeLine[i];");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("let actualItem = undefined;");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("if (i < ReplayController.replayTimeLine.length) {");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("actualItem = ReplayController.replayTimeLine[i];");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("let row = table.insertRow(table.rows.length);");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("let originalExpectedItemCell = row.insertCell(0);");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("let expectedItemCell = row.insertCell(1);");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("let actualItemCell = row.insertCell(2);");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("let originalActualItemCell = row.insertCell(3);");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("originalExpectedItemCell.innerHTML = \'<pre style=\"font-size: 10px;\">\' + JSON.stringify(expectedItem, null, 2) + \'</pre>\';");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("expectedItemCell.innerHTML = \'<pre style=\"font-size: 10px;\">\' + JSON.stringify(expectedItem, MainController.verificationCleanupFunctionsForReplayLevel[MainController.replayLevel], 2) + \'</pre>\';");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("actualItemCell.innerHTML = \'<pre style=\"font-size: 10px;\">\' + JSON.stringify(actualItem, MainController.verificationCleanupFunctionsForReplayLevel[MainController.replayLevel], 2) + \'</pre>\';");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("originalActualItemCell.innerHTML = \'<pre style=\"font-size: 10px;\">\' + JSON.stringify(actualItem, null, 2) + \'</pre>\';");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("if (JSON.stringify(expectedItem, MainController.verificationCleanupFunctionsForReplayLevel[MainController.replayLevel]) === JSON.stringify(actualItem, MainController.verificationCleanupFunctionsForReplayLevel[MainController.replayLevel])) {");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("row.className = \'success\';");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("} else {");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("row.className = \'danger\';");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("ReplayController.passed = false;");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("if (ReplayController.passed) {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("table.rows[0].className = \'success\';");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("} else {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("table.rows[0].className = \'danger\';");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("} else {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("for (let i = 0; i < ReplayController.expectedTimeLine.length; i++) {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("let expectedItem = ReplayController.expectedTimeLine[i];");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("let actualItem = undefined;");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("if (i < ReplayController.replayTimeLine.length) {");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("actualItem = ReplayController.replayTimeLine[i];");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("if (JSON.stringify(expectedItem, MainController.verificationCleanupFunctionsForReplayLevel[MainController.replayLevel]) !== JSON.stringify(actualItem, MainController.verificationCleanupFunctionsForReplayLevel[MainController.replayLevel])) {");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("ReplayController.passed = false;");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("MainController.replayLevel = undefined;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("MainController.actionQueue.splice(0, MainController.actionQueue.length);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("MainController.actionIsProcessing = false;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("static replayEvents() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("ReplayController.startReplay(MainController.EVENT_REPLAY_LEVEL);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("ReplayController.replayTimeLine = [];");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("var index = 0;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (index < ReplayController.timeLine.length) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("ReplayController.replayEvent(index, ReplayController.pauseInMillis);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("static replayEvent(index, timeout) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("var item = ReplayController.timeLine[index];");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("while (item && item.event === undefined && index < ReplayController.timeLine.length) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("index++;");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("item = ReplayController.timeLine[index];");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (item && item.event) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("ReplayController.addItemToReplayTimeLine({event: item.event});");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("var event = eval(\'new \' + item.event.eventName + \'(item.event.eventData)\');");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("event.prepareDataForView();");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("Promise.all(MainController.notifyListeners(event)).then(function () {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("const nextItem = index + 1 < ReplayController.timeLine.length ? ReplayController.timeLine[index+1] : undefined;");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("if (nextItem !== undefined && nextItem.event === undefined ) {");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("MainController.applyNextActions();");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("index++;");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("if (index < ReplayController.timeLine.length) {");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("setTimeout(ReplayController.replayEvent, timeout, index, timeout);");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("} else {");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("ReplayController.finishReplay();");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("} else {");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("index++;");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("if (index < ReplayController.timeLine.length) {");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("setTimeout(ReplayController.replayEvent, timeout, index, timeout);");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("} else {");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("ReplayController.finishReplay();");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}, function (error) {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("throw error;");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("});");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("} else {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("ReplayController.finishReplay();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("static replayCommands() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("ReplayController.startReplay(MainController.COMMAND_REPLAY_LEVEL);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("ReplayController.replayTimeLine = [];");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("var index = 0;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (index < ReplayController.timeLine.length) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("ReplayController.replayCommand(index, ReplayController.pauseInMillis);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("static replayCommand(index, timeout) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("var item = ReplayController.timeLine[index];");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("while (item && item.command === undefined && index < ReplayController.timeLine.length) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("index++;");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("item = ReplayController.timeLine[index];");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (item && item.command) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("var command = eval(\'new \' + item.command.commandName + \'(item.command.commandParam)\');");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("command.commandData = item.command.commandData;");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("ReplayController.addItemToReplayTimeLine({command: command});");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("MainController.publishEventsOfCommand(command).then(function () {");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("index++;");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("if (index < ReplayController.timeLine.length) {");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("setTimeout(ReplayController.replayCommand, timeout, index, timeout);");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("} else {");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("ReplayController.finishReplay();");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("},");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("function (error) {");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("throw error;");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("});");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("} else {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("ReplayController.finishReplay();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("static replayActions() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("ReplayController.startReplay(MainController.ACTION_REPLAY_LEVEL);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("ReplayController.replayTimeLine = [];");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("var index = 0;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (index < ReplayController.timeLine.length) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("ReplayController.replayAction(index, ReplayController.pauseInMillis);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("static replayAction(index, timeout) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("var item = ReplayController.timeLine[index];");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("while (item && item.action === undefined && index < ReplayController.timeLine.length) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("index++;");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("item = ReplayController.timeLine[index];");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if (item && item.action) {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("let action = undefined;");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("action = eval(\'new \' + item.action.actionName + \'(item.action.actionParam)\');");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("action.actionData = item.action.actionData;");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("action.isUndoAction = item.action.isUndoAction;");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("action.isRedoAction = item.action.isRedoAction;");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("ReplayController.addItemToReplayTimeLine({action: action});");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("action.replay();");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("setTimeout(function () {");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("MainController.executeCommandOfAction(action).then(function () {");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("index++;");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("if (index < ReplayController.timeLine.length) {");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("setTimeout(ReplayController.replayAction, timeout, index, timeout);");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("} else {");
    _builder.newLine();
    _builder.append("                        ");
    _builder.append("ReplayController.finishReplay();");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("}, function (error) {");
    _builder.newLine();
    _builder.append("                    ");
    _builder.append("throw error;");
    _builder.newLine();
    _builder.append("                ");
    _builder.append("});");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("}, timeout);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("} else {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("ReplayController.finishReplay();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("static executeCommand(command) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("ReplayController.addItemToReplayTimeLine({command: command});");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("command.execute();");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("static addItemToReplayTimeLine(item) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("item.timestamp = new Date().getTime();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("ReplayController.replayTimeLine.push(JSON.parse(JSON.stringify(item)));");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("static downloadTimeline() {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("let timelineJson = JSON.stringify(MainController.getCompleteTimeline(), null, 2);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("let a = window.document.createElement(\'a\');");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("a.href = window.URL.createObjectURL(new Blob([timelineJson], {type: \'text/json\'}));");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("a.download = \'scenario.json\';");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("document.body.appendChild(a);");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("a.click();");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("document.body.removeChild(a);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("static uploadTimeline(event) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("ReplayController.clearReplayResultDiv();");
    _builder.newLine();
    _builder.newLine();
    _builder.append("        ");
    _builder.append("var input = event.target;");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("var reader = new FileReader();");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("reader.onload = function () {");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("let json = reader.result;");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("ReplayController.timeLine = JSON.parse(json);");
    _builder.newLine();
    _builder.append("            ");
    _builder.append("document.getElementById(\"uploadTimelineInputField\").value = \"\";");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("};");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("reader.readAsText(input.files[0]);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/*       S.D.G.       */");
    _builder.newLine();
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generateTriggerAction() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("\'use strict\';");
    _builder.newLine();
    _builder.newLine();
    _builder.append("class TriggerAction extends Event {");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("constructor(action) {");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("super(action, \'TriggerAction\');");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("this.eventData = action;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("prepareDataForView() {");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("/*       S.D.G.       */");
    _builder.newLine();
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence generateUUID() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("/**");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("* Created by annette on 08.08.16.");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("/*");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("uuid.js - Version 0.3");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("JavaScript Class to create a UUID like identifier");
    _builder.newLine();
    _builder.newLine();
    _builder.append(" ");
    _builder.append("Copyright (C) 2006-2008, Erik Giberti (AF-Design), All rights reserved.");
    _builder.newLine();
    _builder.newLine();
    _builder.append(" ");
    _builder.append("This program is free software; you can redistribute it and/or modify it under");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("the terms of the GNU General Public License as published by the Free Software");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("Foundation; either version 2 of the License, or (at your option) any later");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("version.");
    _builder.newLine();
    _builder.newLine();
    _builder.append(" ");
    _builder.append("This program is distributed in the hope that it will be useful, but WITHOUT ANY");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("PARTICULAR PURPOSE. See the GNU General Public License for more details.");
    _builder.newLine();
    _builder.newLine();
    _builder.append(" ");
    _builder.append("You should have received a copy of the GNU General Public License along with");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("this program; if not, write to the Free Software Foundation, Inc., 59 Temple");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("Place, Suite 330, Boston, MA 02111-1307 USA");
    _builder.newLine();
    _builder.newLine();
    _builder.append(" ");
    _builder.append("The latest version of this file can be downloaded from");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("http://www.af-design.com/resources/javascript_uuid.php");
    _builder.newLine();
    _builder.newLine();
    _builder.append(" ");
    _builder.append("HISTORY:");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("6/5/06 \t- Initial Release");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("5/22/08 - Updated code to run faster, removed randrange(min,max) in favor of");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("a simpler rand(max) function. Reduced overhead by using getTime()");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("method of date class (suggestion by James Hall).");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("9/5/08\t- Fixed a bug with rand(max) and additional efficiencies pointed out");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("by Robert Kieffer http://broofa.com/");
    _builder.newLine();
    _builder.newLine();
    _builder.append(" ");
    _builder.append("KNOWN ISSUES:");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("- Still no way to get MAC address in JavaScript");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("- Research into other versions of UUID show promising possibilities");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("(more research needed)");
    _builder.newLine();
    _builder.append(" ");
    _builder.append("- Documentation needs improvement");
    _builder.newLine();
    _builder.newLine();
    _builder.append(" ");
    _builder.append("*/");
    _builder.newLine();
    _builder.newLine();
    _builder.append("// On creation of a UUID object, set it\'s initial value");
    _builder.newLine();
    _builder.append("function UUID(){");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("this.id = this.createUUID();");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("// When asked what this Object is, lie and return it\'s value");
    _builder.newLine();
    _builder.append("UUID.prototype.valueOf = function(){ return this.id; }");
    _builder.newLine();
    _builder.append("UUID.prototype.toString = function(){ return this.id; }");
    _builder.newLine();
    _builder.newLine();
    _builder.append("//");
    _builder.newLine();
    _builder.append("// INSTANCE SPECIFIC METHODS");
    _builder.newLine();
    _builder.append("//");
    _builder.newLine();
    _builder.newLine();
    _builder.append("UUID.prototype.createUUID = function(){");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("//");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// Loose interpretation of the specification DCE 1.1: Remote Procedure Call");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// described at http://www.opengroup.org/onlinepubs/009629399/apdxa.htm#tagtcjh_37");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// since JavaScript doesn\'t allow access to internal systems, the last 48 bits");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// of the node section is made up using a series of random numbers (6 octets long).");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("//");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("var dg = new Date(1582, 10, 15, 0, 0, 0, 0);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("var dc = new Date();");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("var t = dc.getTime() - dg.getTime();");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("var h = \'-\';");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("var tl = UUID.getIntegerBits(t,0,31);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("var tm = UUID.getIntegerBits(t,32,47);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("var thv = UUID.getIntegerBits(t,48,59) + \'1\'; // version 1, security version is 2");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("var csar = UUID.getIntegerBits(UUID.rand(4095),0,7);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("var csl = UUID.getIntegerBits(UUID.rand(4095),0,7);");
    _builder.newLine();
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// since detection of anything about the machine/browser is far to buggy,");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// include some more random numbers here");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// if NIC or an IP can be obtained reliably, that should be put in");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("// here instead.");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("var n = UUID.getIntegerBits(UUID.rand(8191),0,7) +");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("UUID.getIntegerBits(UUID.rand(8191),8,15) +");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("UUID.getIntegerBits(UUID.rand(8191),0,7) +");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("UUID.getIntegerBits(UUID.rand(8191),8,15) +");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("UUID.getIntegerBits(UUID.rand(8191),0,15); // this last number is two octets long");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("return tl + h + tm + h + thv + h + csar + csl + h + n;");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("//");
    _builder.newLine();
    _builder.append("// GENERAL METHODS (Not instance specific)");
    _builder.newLine();
    _builder.append("//");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.append("// Pull out only certain bits from a very large integer, used to get the time");
    _builder.newLine();
    _builder.append("// code information for the first part of a UUID. Will return zero\'s if there");
    _builder.newLine();
    _builder.append("// aren\'t enough bits to shift where it needs to.");
    _builder.newLine();
    _builder.append("UUID.getIntegerBits = function(val,start,end){");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("var base16 = UUID.returnBase(val,16);");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("var quadArray = new Array();");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("var quadString = \'\';");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("var i = 0;");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("for(i=0;i<base16.length;i++){");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("quadArray.push(base16.substring(i,i+1));");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("for(i=Math.floor(start/4);i<=Math.floor(end/4);i++){");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("if(!quadArray[i] || quadArray[i] == \'\') quadString += \'0\';");
    _builder.newLine();
    _builder.append("        ");
    _builder.append("else quadString += quadArray[i];");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("}");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("return quadString;");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("// Replaced from the original function to leverage the built in methods in");
    _builder.newLine();
    _builder.append("// JavaScript. Thanks to Robert Kieffer for pointing this one out");
    _builder.newLine();
    _builder.append("UUID.returnBase = function(number, base){");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("return (number).toString(base).toUpperCase();");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("// pick a random number within a range of numbers");
    _builder.newLine();
    _builder.append("// int b rand(int a); where 0 <= b <= a");
    _builder.newLine();
    _builder.append("UUID.rand = function(max){");
    _builder.newLine();
    _builder.append("    ");
    _builder.append("return Math.floor(Math.random() * (max + 1));");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("// end of UUID class file");
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    _builder.newLine();
    return _builder;
  }
}
