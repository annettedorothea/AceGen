grammar com.anfelisa.Ace with org.eclipse.xtext.common.Terminals

generate ace "http://www.anfelisa.com/Ace"

Project: 
	es6 = ES6 ?	| java = JAVA ?
;

ES6: 
	'ES6'
		name = QualifiedName
		('ACE' '{'
			(aceOperations += ES6_ACE)*
		'}')?
		('views' '{'
			(views += ES6_View)*
		'}')?
;

ES6_ACE: 
	name = ID 
	('preCall' '(' (preCall += [ES6_ViewFunction | QualifiedName])* ')')? 
	('call' '(' serverCall = [JAVA_ACE | QualifiedName] ')' )? 
	('postCall' '(' (postCall += [ES6_ViewFunction | QualifiedName])* ')')? 
	('{'
		(outcomes += ES6_Outcome)*
	'}')*
;

ES6_Outcome:
	'on' name = ID 
	('(' (listeners += [ES6_ViewFunction | QualifiedName])* ')')? 
	('triggers' '(' (aceOperations += [ES6_ACE | QualifiedName])* ')')? 
;

ES6_View: 
	name = ID ('{'
		(renderFunctions += ES6_ViewFunction)*
	'}')*
;

ES6_ViewFunction:
	name = ID
;

JAVA:
	'JAVA'
		name = QualifiedName
		('ACE' '{'
			(aceOperations += JAVA_ACE)*
		'}')?
		('views' '{'
			(views += JAVA_View)*
		'}')?
		('models' '{'
			'schema' schema = ID
			(models += Model)*
		'}')?
		('data' '{'
			(data += Data)*
		'}')?
;

JAVA_ACE: 
	type = FunctionType
	url = STRING 
	authorize ?= 'authorize'? 
	('pathParams' '{' (pathParams += [PrimitiveAttribute | QualifiedName])* '}')?
	('queryParams' '{' (queryParams += [PrimitiveAttribute | QualifiedName])* '}')?
	('payload' '{' (payload = [Data | QualifiedName]) '}')?
	name = ID 
	'uses' data = [ Data | QualifiedName ]
	('{'
		(outcomes += JAVA_Outcome)*
	'}')*
;

JAVA_Outcome:
	'on' name = ID 
	('(' (listeners += [JAVA_ViewFunction | QualifiedName])* ')')? 
;

JAVA_View: 
	external ?= 'external'? name = ID ('{'
		(renderFunctions += JAVA_ViewFunction)*
	'}')*
;

JAVA_ViewFunction:
	name = ID '(' data = [ Data | QualifiedName ] ')'
;

Model:
	persistent ?= 'persistent'? name = ID ('{'
		attributes += Attribute*
	'}')?
;

Data:
	name = ID ':' '('
		(models += ModelRef)*
	')'
;

ComplexAttribute: 
	list ?= 'List'? model = [Model | QualifiedName] name = ID
;

ModelRef: 
	model = [Model | QualifiedName]
;

PrimitiveAttribute :
	unique ?= 'Unique'? primaryKey ?= 'PrimaryKey'? (constraint = Constraint)? list ?= 'List'? (type = ModelType) name = ID ('references' foreignKey = [PrimitiveAttribute | QualifiedName])?
;

Attribute:
	complexAttribute = ComplexAttribute | primitiveAttribute = PrimitiveAttribute
;

QualifiedName:
  ID ('.' ID)*
;

FunctionType:
	'POST' | 'PUT' | 'DELETE' | 'GET'
;

ModelType:
	'Integer' | 'String' | 'Float' | 'Boolean' | 'DateTime' | 'Long' | 'AuthUser' 
;

Constraint:
	'NotEmpty' | 'NotNull'
;

Role: 
	name = ID
;

