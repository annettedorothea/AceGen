/*
 * generated by Xtext 2.10.0
 */
package com.anfelisa.scoping

import com.anfelisa.ace.AcePackage
import com.anfelisa.ace.Attribute
import com.anfelisa.ace.JAVA_ACE
import com.anfelisa.ace.JAVA_Outcome
import com.anfelisa.ace.JAVA_ViewFunction
import com.anfelisa.ace.Model
import com.anfelisa.extensions.java.ModelExtension
import java.util.ArrayList
import javax.inject.Inject
import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.EReference
import org.eclipse.xtext.scoping.Scopes
import org.eclipse.xtext.scoping.impl.FilteringScope
import com.anfelisa.ace.JAVA_ACE_WRITE

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
class AceScopeProvider extends AbstractAceScopeProvider {

	@Inject
	extension ModelExtension

	override getScope(EObject context, EReference reference) {
		if (context instanceof JAVA_ACE && (
				reference == AcePackage.Literals.JAVA_ACE__QUERY_PARAMS ||
			reference == AcePackage.Literals.JAVA_ACE__PATH_PARAMS ||
			reference == AcePackage.Literals.JAVA_ACE__PAYLOAD || reference == AcePackage.Literals.JAVA_ACE__RESPONSE
			)) {
			val javaAce = context as JAVA_ACE;
			val attrs = new ArrayList<Attribute>();
			javaAce.model.allAttributesRec(attrs);
			return Scopes.scopeFor(attrs)
		}
		if (context instanceof JAVA_Outcome) {
			val aceModel = (context.eContainer as JAVA_ACE_WRITE).model
			if (reference.name.equals("listeners")) {
				val scope = super.getScope(context, reference)
				return new FilteringScope(scope, [(getEObjectOrProxy as JAVA_ViewFunction).model.equals(aceModel)])
			} else if (reference.name.equals("aceOperations")) {
				val scope = super.getScope(context, reference)
				return new FilteringScope(scope, [(getEObjectOrProxy as JAVA_ACE_WRITE).model.equals(aceModel)])
			}
		}
		if (context instanceof Model) {
			val aceModel = context as Model
			val scope = super.getScope(context, reference)
			return new FilteringScope(scope, [!(getEObjectOrProxy as Model).equals(aceModel)])
		}
		return super.getScope(context, reference);
	}

}
