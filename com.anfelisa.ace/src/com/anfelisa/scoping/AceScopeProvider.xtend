/*
 * generated by Xtext 2.10.0
 */
package com.anfelisa.scoping

import com.anfelisa.ace.AcePackage
import com.anfelisa.ace.Attribute
import com.anfelisa.ace.JAVA_ACE
import com.anfelisa.extensions.java.ModelExtension
import java.util.ArrayList
import javax.inject.Inject
import org.eclipse.emf.ecore.EObject
import org.eclipse.emf.ecore.EReference
import org.eclipse.xtext.scoping.Scopes

/**
 * This class contains custom scoping description.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 */
class AceScopeProvider extends AbstractAceScopeProvider {

	@Inject
	extension ModelExtension
	
	override getScope(EObject context, EReference reference) {
		if (context instanceof JAVA_ACE && 
			(
				reference == AcePackage.Literals.JAVA_ACE__QUERY_PARAMS ||
				reference == AcePackage.Literals.JAVA_ACE__PATH_PARAMS ||
				reference == AcePackage.Literals.JAVA_ACE__PAYLOAD ||
				reference == AcePackage.Literals.JAVA_ACE__RESPONSE
			)
		) {
			val javaAce = context as JAVA_ACE;
			val attrs = new ArrayList<Attribute>();
			javaAce.model.allAttributesRec(attrs);
			return Scopes.scopeFor(attrs)
		}
		return super.getScope(context, reference);
	}
	
}
