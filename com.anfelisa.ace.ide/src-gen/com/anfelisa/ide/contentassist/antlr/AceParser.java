/*
 * generated by Xtext 2.10.0
 */
package com.anfelisa.ide.contentassist.antlr;

import com.anfelisa.ide.contentassist.antlr.internal.InternalAceParser;
import com.anfelisa.services.AceGrammarAccess;
import com.google.inject.Inject;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

public class AceParser extends AbstractContentAssistParser {

	@Inject
	private AceGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalAceParser createParser() {
		InternalAceParser result = new InternalAceParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getProjectAccess().getTargetAlternatives_2_0(), "rule__Project__TargetAlternatives_2_0");
					put(grammarAccess.getFunctionTypeAccess().getAlternatives(), "rule__FunctionType__Alternatives");
					put(grammarAccess.getModelTypeAccess().getAlternatives(), "rule__ModelType__Alternatives");
					put(grammarAccess.getConstraintAccess().getAlternatives(), "rule__Constraint__Alternatives");
					put(grammarAccess.getProjectAccess().getGroup(), "rule__Project__Group__0");
					put(grammarAccess.getProjectAccess().getGroup_3(), "rule__Project__Group_3__0");
					put(grammarAccess.getProjectAccess().getGroup_4(), "rule__Project__Group_4__0");
					put(grammarAccess.getProjectAccess().getGroup_5(), "rule__Project__Group_5__0");
					put(grammarAccess.getProjectAccess().getGroup_6(), "rule__Project__Group_6__0");
					put(grammarAccess.getProjectAccess().getGroup_7(), "rule__Project__Group_7__0");
					put(grammarAccess.getProjectAccess().getGroup_8(), "rule__Project__Group_8__0");
					put(grammarAccess.getModelAccess().getGroup(), "rule__Model__Group__0");
					put(grammarAccess.getModelAccess().getGroup_5(), "rule__Model__Group_5__0");
					put(grammarAccess.getDataAccess().getGroup(), "rule__Data__Group__0");
					put(grammarAccess.getModelRefAccess().getGroup(), "rule__ModelRef__Group__0");
					put(grammarAccess.getDataRefAccess().getGroup(), "rule__DataRef__Group__0");
					put(grammarAccess.getAttributeAccess().getGroup(), "rule__Attribute__Group__0");
					put(grammarAccess.getAttributeAccess().getGroup_5(), "rule__Attribute__Group_5__0");
					put(grammarAccess.getActionAccess().getGroup(), "rule__Action__Group__0");
					put(grammarAccess.getActionAccess().getGroup_2(), "rule__Action__Group_2__0");
					put(grammarAccess.getActionAccess().getGroup_3(), "rule__Action__Group_3__0");
					put(grammarAccess.getCommandAccess().getGroup(), "rule__Command__Group__0");
					put(grammarAccess.getCommandAccess().getGroup_1(), "rule__Command__Group_1__0");
					put(grammarAccess.getCommandAccess().getGroup_2(), "rule__Command__Group_2__0");
					put(grammarAccess.getEventOnOutcomeAccess().getGroup(), "rule__EventOnOutcome__Group__0");
					put(grammarAccess.getEventOnOutcomeAccess().getGroup_2(), "rule__EventOnOutcome__Group_2__0");
					put(grammarAccess.getEventOnOutcomeAccess().getGroup_3(), "rule__EventOnOutcome__Group_3__0");
					put(grammarAccess.getEventAccess().getGroup(), "rule__Event__Group__0");
					put(grammarAccess.getEventAccess().getGroup_1(), "rule__Event__Group_1__0");
					put(grammarAccess.getEventAccess().getGroup_2(), "rule__Event__Group_2__0");
					put(grammarAccess.getViewAccess().getGroup(), "rule__View__Group__0");
					put(grammarAccess.getViewAccess().getGroup_1(), "rule__View__Group_1__0");
					put(grammarAccess.getViewFunctionAccess().getGroup(), "rule__ViewFunction__Group__0");
					put(grammarAccess.getViewFunctionAccess().getGroup_1(), "rule__ViewFunction__Group_1__0");
					put(grammarAccess.getQualifiedNameAccess().getGroup(), "rule__QualifiedName__Group__0");
					put(grammarAccess.getQualifiedNameAccess().getGroup_1(), "rule__QualifiedName__Group_1__0");
					put(grammarAccess.getProjectAccess().getNameAssignment_0(), "rule__Project__NameAssignment_0");
					put(grammarAccess.getProjectAccess().getTargetAssignment_2(), "rule__Project__TargetAssignment_2");
					put(grammarAccess.getProjectAccess().getModelsAssignment_3_2(), "rule__Project__ModelsAssignment_3_2");
					put(grammarAccess.getProjectAccess().getDataAssignment_4_2(), "rule__Project__DataAssignment_4_2");
					put(grammarAccess.getProjectAccess().getActionsAssignment_5_2(), "rule__Project__ActionsAssignment_5_2");
					put(grammarAccess.getProjectAccess().getCommandsAssignment_6_2(), "rule__Project__CommandsAssignment_6_2");
					put(grammarAccess.getProjectAccess().getEventsAssignment_7_2(), "rule__Project__EventsAssignment_7_2");
					put(grammarAccess.getProjectAccess().getViewsAssignment_8_2(), "rule__Project__ViewsAssignment_8_2");
					put(grammarAccess.getModelAccess().getPersistentAssignment_0(), "rule__Model__PersistentAssignment_0");
					put(grammarAccess.getModelAccess().getNameAssignment_1(), "rule__Model__NameAssignment_1");
					put(grammarAccess.getModelAccess().getAttributesAssignment_3(), "rule__Model__AttributesAssignment_3");
					put(grammarAccess.getModelAccess().getModelsAssignment_5_1(), "rule__Model__ModelsAssignment_5_1");
					put(grammarAccess.getDataAccess().getNameAssignment_0(), "rule__Data__NameAssignment_0");
					put(grammarAccess.getDataAccess().getModelsAssignment_3(), "rule__Data__ModelsAssignment_3");
					put(grammarAccess.getModelRefAccess().getListAssignment_0(), "rule__ModelRef__ListAssignment_0");
					put(grammarAccess.getModelRefAccess().getModelAssignment_1(), "rule__ModelRef__ModelAssignment_1");
					put(grammarAccess.getDataRefAccess().getDataAssignment_1(), "rule__DataRef__DataAssignment_1");
					put(grammarAccess.getAttributeAccess().getUniqueAssignment_0(), "rule__Attribute__UniqueAssignment_0");
					put(grammarAccess.getAttributeAccess().getPrimaryKeyAssignment_1(), "rule__Attribute__PrimaryKeyAssignment_1");
					put(grammarAccess.getAttributeAccess().getConstraintAssignment_2(), "rule__Attribute__ConstraintAssignment_2");
					put(grammarAccess.getAttributeAccess().getTypeAssignment_3(), "rule__Attribute__TypeAssignment_3");
					put(grammarAccess.getAttributeAccess().getNameAssignment_4(), "rule__Attribute__NameAssignment_4");
					put(grammarAccess.getAttributeAccess().getForeignKeyAssignment_5_1(), "rule__Attribute__ForeignKeyAssignment_5_1");
					put(grammarAccess.getActionAccess().getTypeAssignment_0(), "rule__Action__TypeAssignment_0");
					put(grammarAccess.getActionAccess().getNameAssignment_1(), "rule__Action__NameAssignment_1");
					put(grammarAccess.getActionAccess().getDataAssignment_2_1(), "rule__Action__DataAssignment_2_1");
					put(grammarAccess.getActionAccess().getCommandAssignment_3_1(), "rule__Action__CommandAssignment_3_1");
					put(grammarAccess.getCommandAccess().getNameAssignment_0(), "rule__Command__NameAssignment_0");
					put(grammarAccess.getCommandAccess().getDataAssignment_1_1(), "rule__Command__DataAssignment_1_1");
					put(grammarAccess.getCommandAccess().getEventsOnOutcomeAssignment_2_1(), "rule__Command__EventsOnOutcomeAssignment_2_1");
					put(grammarAccess.getEventOnOutcomeAccess().getOutcomeAssignment_1(), "rule__EventOnOutcome__OutcomeAssignment_1");
					put(grammarAccess.getEventOnOutcomeAccess().getEventsAssignment_2_2(), "rule__EventOnOutcome__EventsAssignment_2_2");
					put(grammarAccess.getEventOnOutcomeAccess().getActionsAssignment_3_2(), "rule__EventOnOutcome__ActionsAssignment_3_2");
					put(grammarAccess.getEventAccess().getNameAssignment_0(), "rule__Event__NameAssignment_0");
					put(grammarAccess.getEventAccess().getDataAssignment_1_1(), "rule__Event__DataAssignment_1_1");
					put(grammarAccess.getEventAccess().getListenersAssignment_2_2(), "rule__Event__ListenersAssignment_2_2");
					put(grammarAccess.getViewAccess().getNameAssignment_0(), "rule__View__NameAssignment_0");
					put(grammarAccess.getViewAccess().getRenderFunctionsAssignment_1_1(), "rule__View__RenderFunctionsAssignment_1_1");
					put(grammarAccess.getViewFunctionAccess().getNameAssignment_0(), "rule__ViewFunction__NameAssignment_0");
					put(grammarAccess.getViewFunctionAccess().getDataAssignment_1_1(), "rule__ViewFunction__DataAssignment_1_1");
				}
			};
		}
		return nameMappings.get(element);
	}

	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			InternalAceParser typedParser = (InternalAceParser) parser;
			typedParser.entryRuleProject();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public AceGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(AceGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
